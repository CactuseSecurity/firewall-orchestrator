---
- hosts: all
  tasks:
    - name: make sure secrets dir exists
      file:
        path: "{{ fworch_home }}/etc/secrets"
        state: directory
        mode: "0750"
        owner: "{{ fworch_user }}"
        group: "{{ postgres_group }}"

    - block:
      # api
      - name: set random hasura admin password
        set_fact:
          api_hasura_admin_secret: "{{ randomly_generated_pwd }}"
        when: "'apiserver' in group_names"

      - name: write hasura admin password to secrets directory
        copy:
          content: "{{ api_hasura_admin_secret }}\n"
          dest: "{{ fworch_secrets_dir }}/hasura_admin_pwd"
          mode: '0600'
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
        when: "'apiserver' in group_names"

      # common
      - name: generate main key
        set_fact:
          main_key: "{{ randomly_generated_pwd }}"  # 32 bytes
          main_key_file: "{{ fworch_secrets_dir }}/main_key"

      - name: write main key to secrets directory
        copy:
          content: "{{ main_key }}\n"
          dest: "{{ main_key_file }}"
          mode: '0640'
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"

      # database
      - name: set dbadmin password randomly
        set_fact:
          dbadmin_password: "{{ randomly_generated_pwd }}"
        when: "'databaseserver' in group_names"

      - name: write dbadmin_password password to secret directory
        copy:
          content: "{{ dbadmin_password }}\n"
          dest: "{{ dbadmin_password_file }}"
          mode: '0600'
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
        when: "'databaseserver' in group_names"

      - name: set fworch db password randomly
        set_fact:
          fworch_db_password: "{{ randomly_generated_pwd }}"
        when: "'databaseserver' in group_names"

      - name: write fworch_db_password to secrets directory
        copy:
          content: "{{ fworch_db_password }}\n"
          dest: "{{ fworch_db_password_file }}"
          mode: '0600'
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
        when: "'databaseserver' in group_names"

      # middleware
      - name: Generate JWT private key 
        openssl_privatekey:
          path: "{{ jwt_private_key_file }}"
          size: 2048
          force: true
          type: RSA
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
          mode: "0600"
          backup: true
        when: "'middlewareserver' in group_names"

      - name: Generate JWT public key in PEM format
        openssl_publickey:
          path: "{{ jwt_public_key_file }}"
          privatekey_path: "{{ jwt_private_key_file }}"
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
          mode: "0644"
        when: "'middlewareserver' in group_names"

      - name: create {{ openldap_readonly_user_name }} password
        set_fact:
          ldap_inspector_pw: "{{ randomly_generated_pwd }}"
        when: "'middlewareserver' in group_names"

      - name: create {{ openldap_writer_name }} password
        set_fact:
          ldap_writer_pw: "{{ randomly_generated_pwd }}"
        when: "'middlewareserver' in group_names"

      - name: set UI admin password randomly
        set_fact:
          admin_password: "{{ randomly_generated_pwd }}"
        when: "'middlewareserver' in group_names"

      - name: write ui admin_password to secrets directory
        copy:
          content: "{{ admin_password }}\n"
          dest: "{{ ui_admin_password_file }}"
          mode: '0600'
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
        become: true
        when: "'middlewareserver' in group_names"

      - name: Set admin password in ldap
        ldap_passwd:
          dn: uid=admin,ou=tenant0,ou=operator,ou=user,{{ openldap_path }}
          passwd: "{{ admin_password }}"
          server_uri: "{{ openldap_url }}"
          bind_dn: "{{ openldap_superuser_dn }}"
          bind_pw: "{{ ldap_manager_pwd }}"
        when: "'middlewareserver' in group_names"

      - name: write importer_password to secrets directory
        copy:
          content: "{{ importer_password }}\n"
          dest: "{{ importer_password_file }}"
          mode: '0600'
          owner: "{{ fworch_user }}"
          group: "{{ fworch_group }}"
        become: true
        when: "'middlewareserver' in group_names"

      - name: Set importer password in ldap
        ldap_passwd:
          dn: uid=importer,ou=tenant0,ou=operator,ou=user,{{ openldap_path }}
          passwd: "{{ importer_password }}"
          server_uri: "{{ openldap_url }}"
          bind_dn: "{{ openldap_superuser_dn }}"
          bind_pw: "{{ ldap_manager_pwd }}"
        when: "'middlewareserver' in group_names"

      - name: Set {{ openldap_readonly_user_name }} password in ldap
        ldap_passwd:
          dn: "{{ openldap_readonly_user_dn }}"
          passwd: "{{ ldap_inspector_pw }}"
          server_uri: "{{ openldap_url }}"
          bind_dn: "{{ openldap_superuser_dn }}"
          bind_pw: "{{ ldap_manager_pwd }}"
        when: "'middlewareserver' in group_names"

      - name: Set "{{ openldap_writer_name }}" password in ldap
        ldap_passwd:
          dn: "{{ openldap_writer_dn }}"
          passwd: "{{ ldap_writer_pw }}"
          server_uri: "{{ openldap_url }}"
          bind_dn: "{{ openldap_superuser_dn }}"
          bind_pw: "{{ ldap_manager_pwd }}"
        when: "'middlewareserver' in group_names"

      become: true

    - name: add connection for internal ldap with encrypted passwords
      postgresql_query:
        db: "{{ fworch_db_name }}"
        query: >
          DO $do$ BEGIN 
          PERFORM insertLocalLdapWithEncryptedPasswords ('{{ openldap_server }}', {{ openldap_port }},
          '{{ openldap_std_user_dn }}', '{{ openldap_std_role_dn }}', '{{ openldap_std_group_dn }}',
          5, '{{ openldap_readonly_user_dn }}', '{{ ldap_inspector_pw }}',
          '{{ openldap_writer_dn }}', '{{ ldap_writer_pw }}', 2);
          END $do$
      become: true
      become_user: postgres
      when: "'middlewareserver' in group_names"


# weiter mit open ldap