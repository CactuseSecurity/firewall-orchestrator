# installs docker and the hasura image in a container

- name: Install packages for python pip3 n virtualenv
  package:
    name: "{{ item }}"
    state: present
  loop:
    - python3-pip
    - python3-virtualenv
    - python3-docker
  become: yes

- name: read dbadmin pwd from secrets file
  slurp:
    src: "{{ dbadmin_password_file }}"
  register: api_user_password
  become: yes

- name: decode dbadmin pwd
  set_fact:
    api_user_password: "{{ api_user_password['content'] | b64decode }}"

- name: read jwt public key from file as JWT secret
  slurp:
    src: "{{ jwt_public_key_file }}"
  register: api_hasura_jwt_secret_dict
  become: yes

- name: decode key
  set_fact:
    api_hasura_jwt_secret: "{{ api_hasura_jwt_secret_dict['content'] | b64decode }}"

- name: make sure {{ fworch_secrets_dir }} exists
  file:
    path: "{{ fworch_secrets_dir }}"
    state: directory
    mode: "0700"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: set static hasura admin pwd for test purposes only
  set_fact:
    api_hasura_admin_secret: "{{ api_hasura_admin_test_password }}"
  when: testkeys is defined and testkeys|bool

- name: set random hasura admin password
  set_fact:
    api_hasura_admin_secret: "{{ random_generated_pw }}"
  when: testkeys is not defined or not testkeys|bool

- name: write hasura admin password to secrets directory
  copy:
    content: "{{ api_hasura_admin_secret }}"
    dest: "{{ fworch_secrets_dir }}/hasura_admin_pwd"
    mode: '0600'
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: check for existing hasura cli file
  stat:
    path: "{{ api_hasura_cli_bin }}"
  register: api_cli_check

# only download new version of api cli, when not restoring from backup:
- name: download {{ api_hasura_version }} hasura cli binary
  get_url:
    url: "https://github.com/hasura/graphql-engine/releases/download/{{ api_hasura_version }}/cli-hasura-linux-amd64"
    dest: "{{ api_hasura_cli_bin }}"
    force: yes
    mode: "0755"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  environment: "{{ proxy_env }}"
  become: yes
  when: not api_cli_check.stat.exists 

- name: initialize hasura cli directory
  command: "{{ api_hasura_cli_bin }} init {{ product_name }} --skip-update-check --endpoint http://{{ api_ip_address }}:{{ api_port }} --admin-secret {{ api_hasura_admin_secret }}"
  args: 
    chdir: "{{ api_home }}"
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  when: not api_cli_check.stat.exists 

- name: set hasura env variable
  set_fact:
    hasura_env:
      HASURA_GRAPHQL_DATABASE_URL:     "postgres://{{ api_user }}:{{ api_user_password }}@{{ fworch_db_host }}:{{ fworch_db_port }}/{{ fworch_db_name }}"
      HASURA_GRAPHQL_ENABLE_CONSOLE:   "true"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_ADMIN_SECRET:     "{{ api_hasura_admin_secret }}"
      HASURA_GRAPHQL_LOG_LEVEL:        "{{ api_log_level }}"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: '{{ api_HASURA_GRAPHQL_ENABLED_LOG_TYPES }}'
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE: "true"
      HASURA_GRAPHQL_CORS_DOMAIN:       "*"
      HASURA_GRAPHQL_JWT_SECRET:        '
                                        {
                                          "type": "{{ api_hasura_jwt_alg|quote }}",
                                          "key": "{{ api_hasura_jwt_secret | regex_replace(''\n'', ''\\n'') }}",
                                          "claims_namespace_path": "$"
                                        }
                                        '
      HTTP_PROXY:                      "{{ http_proxy }}"
      HTTPS_PROXY:                     "{{ https_proxy }}"
      http_proxy:                      "{{ http_proxy }}"
      https_proxy:                     "{{ https_proxy }}"

- name: show hasura env for debugging
  debug:
    var:
      hasura_env
  when: debug_level > '1'

- name: start hasura container ansible 2.10 and higher
  docker_container:
    name: "{{ api_container_name }}"
    image: hasura/graphql-engine:{{ api_hasura_version }}
    state: started
    network_mode: host
    networks_cli_compatible: yes
    log_driver: syslog
    log_options:
      syslog-address: "{{ syslog_proto }}://{{ syslog_host }}:{{ syslog_port }}"
      syslog-facility: daemon
      tag: "{{ api_container_name }}"
    recreate: yes
    exposed_ports:
      - "{{ api_port }}:{{ api_port }}"
    env:
      "{{ hasura_env }}"
    container_default_behavior: no_defaults
  register: docker_return
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  when: ansible_version.string is version_compare('2.10', '>=')

- name: start hasura container pre ansible 2.1ÃŸ 
  docker_container:
    name: "{{ api_container_name }}"
    image: hasura/graphql-engine:{{ api_hasura_version }}
    state: started
    network_mode: host
    networks_cli_compatible: yes
    log_driver: syslog
    log_options:
      syslog-address: "{{ syslog_proto }}://{{ syslog_host }}:{{ syslog_port }}"
      syslog-facility: daemon
      tag: "{{ api_container_name }}"
    recreate: yes
    exposed_ports:
      - "{{ api_port }}:{{ api_port }}"
    env:
      "{{ hasura_env }}"
  register: docker_return
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  when: ansible_version.string is version_compare('2.10', '<')

- name: show docker result
  debug:
    var:
      docker_return
  when: debug_level > '1'

- name: Get info on container
  docker_container_info:
    name: "{{ api_container_name }}"
  register: result
  become: yes
  become_user: "{{ fworch_user }}"

- name: Print the status of the container in case of problems only
  fail: 
    msg: "The container status is: {{ result }}"
  when: result.exists and result.container['State']['Status'] == 'exited'

- name: copy hasura systemd service script
  template:
     src: "{{ api_service_name }}.service.j2"
     dest: "/lib/systemd/system/{{ api_service_name }}.service"
     backup: yes
     mode: "0644"
     owner: "root"
  become: yes

- name: make hasura docker container run at host startup
  systemd:
    name: "{{ api_service_name }}"
    daemon_reload: yes
    enabled: yes
  become: yes

- name:  wait for hasura port to become available
  wait_for:
    port: "{{ api_port }}"
    host: "{{ api_ip_address }}"
    connect_timeout: 1
    delay: 10
    timeout: 25

- name: check for existing api dir from restore
  stat:
    path: "{{ api_home }}/{{ product_name }}"
  register: api_metadata_check

- name: import API metadata via metadata API directly from local file
  uri: 
    url: "http://{{ api_ip_address }}:{{ api_port }}/v1/metadata"
    method: POST
    return_content: yes
    body_format: json    
    headers:
      Content-Type: application/json      
      x-hasura-admin-secret: "{{ api_hasura_admin_secret }}"
      x-hasura-role: "admin"
    body: "{{ lookup('file','replace_metadata.json') | from_json }}"
  when: not api_metadata_check.stat.exists 
