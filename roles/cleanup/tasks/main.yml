# change version to new number in /etc/fworch/fworch.yaml

- name: check for existing main config file
  stat:
    path: "{{ fworch_conf_file }}"
  register: already_installed

- set_fact:
    already_installed: "{{ already_installed.stat.exists }}"

- debug:
    msg: "installation_mode={{ installation_mode }}, already_installed={{ already_installed }}"

- name: fail if unknown installation_mode is set
  fail:
    msg: "Found undefined installation_mode: {{ installation_mode }}, aborting."
  when: installation_mode != "new" and installation_mode != "uninstall" and installation_mode != "upgrade"

- name: fail if not already installed and installation_mode is upgrade
  fail:
    msg: "Could not find existing installation but running with installation_mode set to {{ installation_mode }}. Try running with installation_mode=new"
  when: not already_installed and installation_mode == "upgrade"

- name: edit central conf file - set new version
  lineinfile:
    path: "{{ fworch_conf_file }}"
    create: yes
    regexp: "product_version"
    line: "    \"product_version\": \"{{ product_version }}\""
  when: installation_mode == "upgrade"
  become: yes

- name: include upgrade script
  import_tasks: run-upgrades.yml
  when: "installation_mode == 'upgrade'"

# Do general cleanup

- name: delete ldif files
  file:
    path: "{{  middleware_ldif_dir }}"
    state: absent
  become: yes
  when: "'middlewareserver' in group_names"

- name: restart UI to display new product version
  ansible.builtin.systemd:
    name: "{{ product_name }}-ui"
    state: restarted
  become: yes
  when: "'frontends' in group_names"
  
- name: test whether demo data is present
  postgresql_query:
    db: "{{ fworch_db_name }}"
    query: >
      SELECT * FROM device WHERE dev_name='{{ sample_fortigate_name }}'
  register: demo_data_present
  become: yes
  become_user: postgres

- name: find cron jobs in case of missing demo data
  find:
    paths: /etc/cron.d
    patterns: "{{ product_name }}_sample_data_*"
  register: files_to_delete
  when: demo_data_present.query_result == []
  become: yes

- name: delete cron jobs in case of missing demo data
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"
  when: demo_data_present.query_result == []
  become: yes

- name: start importer service
  systemd:
    name: "{{ item }}"
    state: started
    daemon_reload: yes
    enabled: yes
  become: yes
  when: "'importers' in group_names"
  loop:
    - "{{ product_name }}-importer-legacy"
    - "{{ product_name }}-importer-api"

- name: show listener status
  import_tasks: scripts/show-fworch-listeners.yml
  become: yes

- name: display secrets for this installation
  debug:
    msg:
      - "Your initial UI admin password is '{{ admin_password }}'"
      - "Your api hasura admin secret is '{{ api_hasura_admin_secret }}'"
  when: |
    admin_password is defined and 
    api_hasura_admin_secret is defined and 
    'backendserver' in group_names
