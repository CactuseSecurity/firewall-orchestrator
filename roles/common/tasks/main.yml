- block: 

  - name: assert ansible version
    assert:
      that:
        - "{{ ansible_version.string is version_compare('2.8', '>=') }}"
      msg: Ansible 2.8 or above is required

  - name: check for existing main config file {{ fworch_conf_file }}
    stat:
      path: "{{ fworch_conf_file }}"
    register: already_installed

  - set_fact:
      already_installed: "{{ already_installed.stat.exists }}"
  
  - debug:
      msg: "installation_mode={{ installation_mode }}, already_installed={{ already_installed }}"
  
  - name: fail if unknown installation_mode is set
    fail:
      msg: "Found undefined installation_mode: {{ installation_mode }}, aborting."
    when: installation_mode != "new" and installation_mode != "uninstall" and installation_mode != "upgrade"

  - name: fail if already installed and installation_mode is new
    fail:
      msg: "Found existing installation but running with installation_mode set to {{ installation_mode }}. If you want to upgrade, use 'installation_mode=upgrade'."
    when: already_installed|bool and installation_mode == "new"

  - name: fail if not already installed and installation_mode is upgrade
    fail:
      msg: "Could not find existing installation but running with installation_mode set to {{ installation_mode }}. Try running with installation_mode=new"
    when: not already_installed and installation_mode == "upgrade"

  # - name: uninstall product
  #   import_tasks: ../scripts/uninstall-fworch.yml
  #   when: installation_mode == "uninstall"

  # - name: stopping here in case of uninstall
  #   fail:
  #     msg: "uninstall completed, thanks for using firewall orchestrator"
  #   when: installation_mode == "uninstall"

  # - name: uninstall completed, thanks for using firewall orchestrator
  #   meta: end_play
  #   when: installation_mode == "uninstall"

 # - name: remove old backups
 #   file:
 #     path: "{{ fworch_parent_dir }}/{{ product_name }}_backup"
 #     state: absent
 #   when: installation_mode == "upgrade"

 # - name: backup {{ fworch_home }} dir
 #   command: "cp -rf {{ fworch_parent_dir }}/{{ product_name }} {{ fworch_parent_dir }}/{{ product_name }}_backup"
 #   when: installation_mode == "upgrade"

  - name: remove complete {{ fworch_home }} dir except for etc
    file:
      state: absent
      path: "{{ fworch_home }}/{{ item }}"
    loop:
#      - api
#      - middleware
      - bin
#      - importer  
#      - database  
#      - ui
#      - lib

  - name: include redhat install basics
    include_tasks: redhat_preps.yml
    when: installation_mode == "new" and ansible_os_family == "RedHat"

  - name: update operating system packages .deb based
    apt:
      upgrade: dist
    when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian"

  - name: update operating system packages .rpm based (untested)
    yum:
      upgrade: dist
    when: ansible_facts['distribution'] == "Red Hat" or ansible_facts['distribution'] == "CentOS"

  - name: install packages rsync
    package:
      name: "rsync"
      state: present

  - name: install rsyslog
    import_tasks: install_syslog.yml
    when: "install_syslog | bool"

  - name: create group {{ fworch_group }}
    group:
      name: "{{ fworch_user }}"
      gid: "{{ user_id }}"
      state: present
    
  - name: add user {{ fworch_user }}
    user:
      name: "{{ fworch_user }}"
      comment: "{{ product_name }} User"
      uid: "{{ user_id }}"
      home: "{{ fworch_home }}"
      shell: /bin/bash
      group: "{{ fworch_group }}"
      generate_ssh_key: yes
      ssh_key_bits: 4096
      ssh_key_file: .ssh/id_rsa

  - name: create base {{ fworch_home }} directory
    file:
      path: "{{ fworch_home }}"
      state: directory
      owner: "{{ fworch_user }}"
      group: "{{ fworch_group }}"
      mode: "0775"

  - name: add proxy setting to fworch users .profile and .bashrc
    blockinfile:
      path: "{{ fworch_home }}/{{ item }}"
      create: yes
      mode: "0644"
      owner: "{{ fworch_user }}"
      group: "{{ fworch_group }}"
      block: |
        http_proxy={{ http_proxy }}
        https_proxy={{ http_proxy }}
    loop:
      - .bashrc
      - .profile

  - name: create etc dir
    file:
      path: "{{ fworch_home }}/etc"
      state: directory
      owner: "{{ fworch_user }}"
      group: "{{ fworch_group }}"
      mode: '0755'

  - name: create dir for passwords
    file:
      path: "{{ fworch_home }}/etc/secrets"
      state: directory
      owner: "{{ fworch_user }}"
      group: "{{ fworch_group }}"
      mode: '0700'

  - name: copy iso.conf to target
    copy:
      src: iso.conf
      dest: "{{ fworch_home }}/etc/iso.conf"
      owner: "{{ fworch_user }}"
      group: "{{ fworch_group }}"

  - name: include fworch.yaml config file creator
    import_tasks: conf_file_creator.yml

  - name: include upgrade script
    import_tasks: run-upgrades.yml
    when: "installation_mode == 'upgrade'"

  become: yes
  