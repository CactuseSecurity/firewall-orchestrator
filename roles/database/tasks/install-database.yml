- name: make sure {{ fworch_home }}/etc/secrets exists
  file:
    path: "{{ fworch_home }}/etc/secrets"
    state: directory
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
    mode: "0700"
  become: yes

- name: set dbadmin password from parameter
  set_fact:
    dbadmin_password: "{{ dbadmin_initial_password }}"
  when: dbadmin_initial_password is defined

- name: set dbadmin password randomly
  set_fact:
    dbadmin_password: "{{ randomly_generated_pwd }}"
  when: dbadmin_initial_password is not defined

- name: write dbadmin_password password to secret directory
  copy:
    content: "{{ dbadmin_password }}\n"
    dest: "{{ dbadmin_password_file }}"
    mode: '0600'
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: set fworch db password randomly
  set_fact:
    fworch_db_password: "{{ randomly_generated_pwd }}"

- name: write fworch_db_password to secrets directory
  copy:
    content: "{{ fworch_db_password }}\n"
    dest: "{{ fworch_db_password_file }}"
    mode: '0600'
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- block:

  - name: fail upon new installation with existing database
    fail:
      msg: "Error: You chose new installation on a system with existing database {{ fworch_db_name }}"
    when: installation_mode == "new" and db_exists.query_result.0.count != 0

  - name: create postgres user "{{ fworch_dbadmin_name }}"
    postgresql_user: 
      name: "{{ fworch_dbadmin_name }}"
      password: "{{ dbadmin_password }}"
      encrypted: yes
      role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE,INHERIT,LOGIN

  - name: create postgres user "{{ fworch_user }}"
    postgresql_user: 
      name: "{{ fworch_user }}"
      password: "{{ fworch_db_password }}"
      encrypted: yes
      role_attr_flags: LOGIN

  # include add-tablespace.yml here

  - name: create database {{ fworch_db_name }}
    postgresql_db:
      name: "{{ fworch_db_name }}"
      state: present

  - name: test module postgresql_query functionality (only works with ansible >= 2.8) in case of an error message you may run scripts/install-lastes-ansible.yml
    postgresql_query:
      db: "{{ fworch_db_name }}"
      query: 'select version()'
    register: test_query
    when: ansible_version.full is version ('2.8', '>=')

  - name: show dummy query result
    debug:
      msg: "test_query result: {{ test_query }}"

  - name: include table creation with ansible 2.10 and beyond
    include_tasks: install-db-base-ansible-2.10.yml
    when: ansible_version.full is version('2.10', '>=')

  - name: include table creation pre ansible 2.10
    include_tasks: install-db-base-ansible-pre2.10.yml
    when: ansible_version.full is version('2.10', '<')

  - name: create db users with group memberships
    import_tasks: create-users.yml
    when: installation_mode == "new"

  - name: add colors to the database
    postgresql_copy:
      db: "{{ fworch_db_name }}"
      copy_from: "{{ database_install_dir }}/csv/color.csv"
      dst: stm_color
      columns:
        - color_name
        - color_rgb
      options:
        delimiter: ';'
        format: csv
    when: installation_mode == "new"

  - name: add error messages to the database
    postgresql_copy:
      db: "{{ fworch_db_name }}"
      copy_from: "{{ database_install_dir }}/csv/error.csv"
      dst: error
      columns:
        - error_id
        - error_lvl
        - error_txt_ger
        - error_txt_eng
      options:
        delimiter: ';'
        format: csv
    when: installation_mode == "new"

  - name: add ip protocols to the database
    postgresql_copy:
      db: "{{ fworch_db_name }}"
      copy_from: "{{ database_install_dir }}/csv/ip-protocol-list.csv"
      dst: stm_ip_proto
      columns:
        - ip_proto_id
        - ip_proto_name
        - ip_proto_comment
      options:
        delimiter: ';'
        format: csv
    when: installation_mode == "new"

  become: yes
  become_user: postgres
