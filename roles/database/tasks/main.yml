- block:

    - name: include redhat db install parts
      include_tasks: redhat_preps.yml
      when: installation_mode == "new" and ansible_os_family == "RedHat"

    - name: install package postgresql packages for redhat
      package:
        name: "{{ item }}"
        state: present
      loop:
        - postgresql-server
        - python3-psycopg2
      when: ansible_os_family == "RedHat"
      # todo: check if we need and if yes, how to install libpq-dev(el)

    - name: install package postgresql packages for debian n ubuntu
      package:
        name: "{{ item }}"
        state: present
      loop:
        - postgresql
        - python3-psycopg2
        - libpq-dev
      when: ansible_os_family == "Debian"

    - name: initdb as extra step for redhat
      # can't test if shell can be replaced with command
      shell: "LC_ALL=C.UTF-8 /usr/bin/postgresql-setup --initdb"
      become: yes
      when: ansible_os_family == "RedHat"

    - name: find out installed postgres version
      script: get_pg_version.sh
      register: pg_version_result
      changed_when: false

    - name: set fact pg_version
      set_fact: pg_version={{ pg_version_result.stdout | float }}

    - name: activate as_single_query if ansible_version is sufficient
      set_fact:
        postgresql_query_as_single_query: yes
      when: ansible_version.string is version_compare('2.10', '>=')

    - name: pg_version to int when possible
      set_fact: pg_version={{ pg_version | int }}
      when: pg_version|int >= 10

    - name: set postgresql config path for Debian based systems
      set_fact:
        postgresql_config_file: /etc/postgresql/{{ pg_version }}/main/postgresql.conf
        postgresql_hba_file: /etc/postgresql/{{ pg_version }}/main/pg_hba.conf
      when: ansible_os_family == 'Debian'

    - name: set postgresql config path for RedHat
      set_fact:
        postgresql_config_file: /var/lib/pgsql/data/postgresql.conf
        postgresql_hba_file: /var/lib/pgsql/data/pg_hba.conf
      when: ansible_os_family == 'RedHat'

    - name: edit postgresql.conf log_destination
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_destination = 'syslog'
        regexp: '\s*log_destination'
        backup: yes

    - name: edit postgresql.conf client_min_messages
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: client_min_messages = log
        regexp: '\s*client_min_messages'
        backup: yes
          
    - name: edit postgresql.conf log_min_messages
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_min_messages = WARNING
        regexp: '\s*log_min_messages'
        backup: yes
          
    - name: edit postgresql.conf application_name
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: application_name = {{ product_name }}-database
        regexp: '\s*application_name'
        backup: yes

    - name: edit postgresql.conf log_error_verbosity
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_error_verbosity = DEFAULT
        regexp: '\s*log_error_verbosity'
        backup: yes

    - name: edit postgresql.conf log_min_error_statement
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_min_error_statement = DEBUG2
        regexp: '\s*log_min_error_statement'
        backup: yes

    - name: edit postgresql.conf log_line_prefix
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_line_prefix = '%d '
        regexp: '\s*log_line_prefix'
        backup: yes

    - name: edit pg_hba.conf
      blockinfile:
        path: "{{ postgresql_hba_file }}"
        backup: yes
        insertbefore: '# IPv4 local connections:'
        block: |
          host    all         dbadmin             127.0.0.1/32           md5
          # host  all         dbadmin             0.0.0.0/0              md5
          # host  all         dbadmin             {{ ansible_host }}/32  md5
          host    all         {{ fworch_user }}   127.0.0.1/32           trust
          host    all         +dbbackupusers      127.0.0.1/32           trust
          
          # with only local import modules:
          host    all         +configimporters    127.0.0.1/32           trust
          host    all         confexporter        127.0.0.1/32           trust
          
          # with local web frontend:
          host    all         +secuadmins         127.0.0.1/32           md5
          host    all         +reporters          127.0.0.1/32           md5
          
          # with remote web frontend:
          # host  all         +secuadmins         <webserver-ip>/32      md5
          # host  all         +reporters          <webserver-ip>/32      md5
          # with remote importer modules:
          # host  all         +configimporters    <importer-ip>/32       trust
      
    - name: reload postgres service
      service:
        name: "{{ postgresql_package }}"
        state: restarted

    - name: copy database files to backend target
      copy: src="{{ item }}" dest="{{ database_install_dir }}" owner="{{ fworch_user }}" group="{{ fworch_user }}"
      loop:
        - csv
        - sql

    - name: create tablespace directory 
      file:
        path:  "{{ table_space }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0755"
      when: table_space is defined

  become: yes

- name: check if database already exists
  postgresql_query:
    query: SELECT count(*) FROM pg_database WHERE datname='{{ fworch_db_name }}'
    db: postgres
  register: db_exists
  become: yes
  become_user: postgres

- name: create new database
  import_tasks: install-database.yml
  when: installation_mode == "new"

- name: upgrade database
  import_tasks: upgrade-database.yml
  when: installation_mode == "upgrade"

- name: (re)define functions and views
  import_tasks: recreate-functions-and-views.yml
