---
- name: create middleware directory
  file:
    dest: "{{ middleware_server_base_dir }}"
    state: directory
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: copy middleware module files to middlewareserver
  copy:
    src: "{{ middleware_path_rel }}"
    dest: "{{ middleware_server_base_dir }}"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: install python3-openssl for openssl key generation
  package:
    name: "{{ item }}"
  loop:
    - python3-cryptography
    - python3-openssl
  become: yes

- name: install libs needed for pdf creator nuget packet HakanL/WkHtmlToPdf-DotNet
  package:
    name: "{{ item }}"
    state: present
  loop:
    - libjpeg62
    - libgdiplus
  become: yes

- name: create auth secrets (jwt key, ldap)
  include_tasks: create_auth_secrets.yml

- name: check if there already is an ldap connection in DB
  postgresql_query:
    db: "{{ fworch_db_name }}"
    query: SELECT COUNT(*) FROM ldap_connection
  become: yes
  become_user: postgres
  register: ldap_conn_present

- name: change value for middleware_change_local_ldap if ldap conn already exists to prevent re-creation errors
  set_fact:
    middleware_change_local_ldap: "no"
  when: ldap_conn_present.query_result.0.count >= 1

- name: import ldif driven changes
  import_tasks: set_initial_ldap_tree.yml

- name: install python modules for ansible ldap module via package
  package:
    name:
      - python3-pip
      - libsasl2-dev
      - python-dev
      - libldap2-dev
      - libssl-dev
      - python3-setuptools
      - python3-pyldap
  become: yes

# - name: install python modules for ansible ldap module via pip
#   pip:
#     name: pyldap
#   become: yes

- name: make sure {{ fworch_secrets_dir }} exists
  file:
    path: "{{ fworch_secrets_dir }}"
    state: directory
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
    mode: "0700"
  become: yes

# - name: set UI admin password from parameter
#   set_fact:
#     admin_password: "{{ admin_initial_password }}"
#   when: admin_initial_password is defined

- name: set UI admin password for testing
  set_fact:
    admin_password: "{{ ui_admin_testonly_password }}"
  when: testkeys is defined and testkeys|bool

- name: set UI admin password randomly
  set_fact:
    admin_password: "{{ random_generated_pw }}"
  when: testkeys is not defined or not testkeys|bool

- name: write admin_password password to secrets directory
  copy:
    content: "{{ admin_password }}"
    dest: "{{ ui_admin_password_file }}"
    mode: '0600'
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: Set admin password in ldap
  ldap_passwd:
    dn: uid=admin,ou=tenant0,ou=operator,ou=user,{{ openldap_path }}
    passwd: "{{ admin_password }}"
    server_uri: "{{ openldap_url }}"
    bind_dn: "{{ openldap_superuser_dn }}"
    bind_pw: "{{ ldap_manager_pwd }}"

- name: Set {{ openldap_readonly_user_name }} password in ldap
  ldap_passwd:
    dn: "{{ openldap_readonly_user_dn }}"
    passwd: "{{ ldap_inspector_pw }}"
    server_uri: "{{ openldap_url }}"
    bind_dn: "{{ openldap_superuser_dn }}"
    bind_pw: "{{ ldap_manager_pwd }}"

- name: Set "{{ openldap_writer_name }}" password in ldap
  ldap_passwd:
    dn: "{{ openldap_writer_dn }}"
    passwd: "{{ ldap_writer_pw }}"
    server_uri: "{{ openldap_url }}"
    bind_dn: "{{ openldap_superuser_dn }}"
    bind_pw: "{{ ldap_manager_pwd }}"

- name: Set {{ audit_user }} password in ldap
  ldap_passwd:
    dn: "uid={{ audit_user }},ou=tenant0,ou=operator,ou=user,{{ openldap_path }}"
    passwd: "{{ auditor_initial_pwd }}"
    server_uri: "{{ openldap_url }}"
    bind_dn: "{{ openldap_superuser_dn }}"
    bind_pw: "{{ ldap_manager_pwd }}"
  when: audit_user is defined and auditor_initial_pwd is defined and installation_mode=='new'
  
- name: insert admin tenant0 to database
  postgresql_query:
    db: "{{ fworch_db_name }}"
    query: >
      DO $do$ BEGIN IF NOT EXISTS
      (SELECT tenant_id FROM tenant WHERE tenant_name='tenant0')
      THEN insert into tenant (tenant_name, tenant_can_view_all_devices, tenant_is_superadmin)
      values ('tenant0', true, true);
      END IF; END $do$
  become: yes
  become_user: postgres

# - name: insert admin tenant0 to device mapping - tenant0 can see all devices
#   postgresql_query:
#     db: "{{ fworch_db_name }}"
#     query: >
#       DO $do$ BEGIN IF NOT EXISTS (SELECT * FROM tenant_to_device LEFT JOIN tenant USING (tenant_id) WHERE tenant_name='tenant0')
#         THEN INSERT INTO tenant_to_device (tenant_id, device_id) 
#           select tenant.tenant_id, device.dev_id FROM tenant, device WHERE tenant_name='tenant0'; 
#         END IF; 
#       END $do$
#   become: yes
#   become_user: postgres

- name: add connection for internal ldap
  postgresql_query:
    db: "{{ fworch_db_name }}"
    query: >
      DO $do$ BEGIN IF NOT EXISTS
      (SELECT * FROM ldap_connection WHERE ldap_server = '{{ openldap_server }}')
      THEN INSERT INTO ldap_connection
      (ldap_server, ldap_port, ldap_searchpath_for_users, ldap_searchpath_for_roles, ldap_searchpath_for_groups,
      ldap_tenant_level, ldap_search_user, ldap_search_user_pwd, ldap_write_user, ldap_write_user_pwd, ldap_type)
      VALUES ('{{ openldap_server }}', {{ openldap_port }},
      '{{ openldap_std_user_dn }}', '{{ openldap_std_role_dn }}', '{{ openldap_std_group_dn }}',
      1, '{{ openldap_readonly_user_dn }}', '{{ ldap_inspector_pw }}',
      '{{ openldap_writer_dn }}', '{{ ldap_writer_pw }}', 2);
      END IF; END $do$
  become: yes
  become_user: postgres

- name: update password for local ldap connection  in case of upgrade
  postgresql_query:
    db: "{{ fworch_db_name }}"
    query: >
      DO $do$ BEGIN IF EXISTS
      (SELECT * FROM ldap_connection)
      THEN UPDATE ldap_connection
      SET ldap_server='{{ openldap_server }}',
      ldap_port={{ openldap_port }}, ldap_searchpath_for_users='{{ openldap_std_user_dn }}',
      ldap_searchpath_for_roles='{{ openldap_std_role_dn }}', ldap_searchpath_for_groups='{{ openldap_std_group_dn }}',
      ldap_tenant_level=1,
      ldap_search_user='{{ openldap_readonly_user_dn }}',
      ldap_search_user_pwd='{{ ldap_inspector_pw }}',
      ldap_write_user= '{{ openldap_writer_dn }}', ldap_write_user_pwd='{{ ldap_writer_pw }}', ldap_type=2
      WHERE ldap_server='{{ openldap_server }}';
      END IF; END $do$
  become: yes
  become_user: postgres

- name: install dot net
  import_tasks: middleware_install_dot_net.yml

- name: install middleware https reverse proxy
  import_tasks: mw_apache_install_and_setup.yml

- name: upgrade with ldif files
  import_tasks: upgrade_ldap_tree.yml
  when: installation_mode == "upgrade"

- name: upgrade with yaml script
  import_tasks: run-upgrades.yml
  when: installation_mode == "upgrade"
