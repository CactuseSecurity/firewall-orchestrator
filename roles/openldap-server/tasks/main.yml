---
- name: Create universal ldif directory
  file:
    path: "{{ middleware_ldif_dir }}"
    state: directory
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- block:
### OS basics
  - name: Add the OS specific varibles
    include_vars: "{{ ansible_os_family }}.yml"

  - name: Install the openldap and required Packages
    package:
      name: "{{ item }}"
      state: present
    loop: "{{ openldap_server_pkgs }}"

### Clean up slapd.d

  - name: Create the empty configuration directory
    file:
      path: "{{ openldap_server_app_path }}/slapd.d"
      state: "{{ item }}"
    with_items:
      - absent
      - directory

  - name: Create directory for ldap pid
    file:
      path: "/var/run/slapd"
      state: directory
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

### Root password
  - name: Check if manager password exist
    stat:
      path: "{{ fworch_secrets_dir }}/ldap_manager_pw.txt"
    register: is_manger_pw_present_flag

  - name: Decide on random manager password
    set_fact:
      openldap_server_random_rootpw: "{{ random_generated_pw }}"
    when: not is_manger_pw_present_flag.stat.exists

  - name: Write random manager password to file
    copy:
      content: "{{ openldap_server_random_rootpw }}"
      dest: "{{ fworch_secrets_dir }}/ldap_manager_pw.txt"
      mode: '0600'
      owner: "{{ fworch_user }}"
      group: "{{ fworch_group }}"
    when: not is_manger_pw_present_flag.stat.exists

  - name: Generate the root password hash for the config
    command: "slappasswd -T {{ fworch_secrets_dir }}/ldap_manager_pw.txt"
    register: root_password

### TLS
  - name: Create ldap certificates
    include_role:
      name: openssl-cert
    vars:
      openssl_cert_path: "{{ openldap_server_cert_path }}"
      openssl_user: "{{ openldap_server_user }}"
      openssl_private_key: "{{ openldap_server_private_key }}"
      openssl_csr: "{{ openldap_server_csr }}"
      openssl_country: "{{ openldap_server_country }}"
      openssl_state: "{{ openldap_server_state }}"
      openssl_location: "{{ openldap_server_location }}"
      openssl_organization: "{{ openldap_server_organization }}"
      openssl_email_address: "{{ openldap_server_email_address }}"
      openssl_cert: "{{ openldap_server_cert }}"

### Config files
  - name: Create the directory for ldap database
    file:
      path: "/var/lib/ldap/{{ openldap_server_domain_name }}/"
      state: directory
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

  - name: Create the DB_CONFIG file
    copy:
      src: DB_CONFIG
      dest: /var/lib/ldap/{{ openldap_server_domain_name }}/DB_CONFIG
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

  - name: Copy the ldap.conf configuration file
    template:
      src: ldap.conf.j2
      dest: "{{ openldap_server_app_path }}/ldap.conf"

  - name: Copy slapd.d initial file to system if not present
    template:
      src: config.ldif.j2
      dest: "{{ openldap_server_app_path }}/slapd.d/config.ldif"
      force: no

  - name: Configure LDAP protocol, URI and port
    lineinfile:
      path: /etc/default/slapd
      regexp: '^SLAPD_SERVICES='
      line: SLAPD_SERVICES="ldap://127.0.0.1/ ldaps:///"

  - name: Initialize ldap config
    command: slapadd -F {{ openldap_server_app_path }}/slapd.d -n 0 -l {{ openldap_server_app_path }}/slapd.d/config.ldif

  - name: Change slapd files permissions to openldap
    file:
      path: "{{ openldap_server_app_path }}/slapd.d"
      state: directory
      recurse: yes
      owner: openldap

### systemctl
  - name: Create dir to enable TLS for slapd service
    file:
      path: /etc/systemd/system/slapd.service.d
      recurse: yes

  - name: Enable TLS for slapd service
    template:
      src: override.conf.j2
      dest: /etc/systemd/system/slapd.service.d/override.conf

  - name: Start the slapd service
    systemd:
      name: slapd
      state: restarted
      enabled: yes
      daemon_reload: yes

  become: yes
  when: installation_mode == "new"

- name: include upgrade script
  import_tasks: run-upgrades.yml
  when: "installation_mode == 'upgrade'"
