# this playbook contains middleware server tests

- name:  wait for middleware port to become available
  wait_for:
    port: "{{ middleware_web_listener_port }}"
    host: "{{ middleware_hostname }}"
    connect_timeout: 1
    delay: 10
    timeout: 25
  when: "not run_on_github|bool"

- name: middleware test get jwt valid creds
  uri:
    url: https://{{ middleware_hostname }}:{{ middleware_web_listener_port }}/api/AuthenticationToken/Get/
    method: POST
    headers:
      Content-Type: application/json
    body:
      Username: user1_demo
      Password: cactus1
    body_format: json
    validate_certs: false
    return_content: yes
  register: sample_jwt
  changed_when: false
  environment: "{{ proxy_env }}"

- debug: var=sample_jwt

- set_fact: jwt_header="{{sample_jwt.content.split('.')[0]}}"

- debug: var=jwt_header

## adding potentially missing base64 "=" padding to header:
- set_fact: jwt_header="{{ jwt_header }}=" cacheable=yes
  when: "jwt_header|length % 4 > 0"
  loop:
    - 1
    - 2
    - 3

- debug: var=jwt_header

- set_fact: jwt_header="{{ jwt_header|b64decode }}"
- debug: var=jwt_header
- set_fact: jwt_type="{{ jwt_header.typ }}"
- debug: var=jwt_type

- name: middleware get jwt test valid creds output
  debug:
    msg: "ERROR unexpected jwt test result (jwt_type does not match 'JWT'): {{ jwt_type }}"
  when: "jwt_type is not match('JWT')"

- set_fact: jwt_encoded_payload="{{sample_jwt.content.split('.')[1]}}"

- name: show jwt encoded payload pre padding
  debug: var=jwt_encoded_payload
## adding potentially missing base64 = padding to payload:
- set_fact: jwt_encoded_payload="{{ jwt_encoded_payload }}=" cacheable=yes
  when: "jwt_encoded_payload|length % 4 > 0"
  loop:
    - 1
    - 2
    - 3

- name: show jwt encoded payload post padding
  debug: var=jwt_encoded_payload

- set_fact: jwt_payload="{{ jwt_encoded_payload|b64decode }}"

- name: show jwt decoded payload
  debug: var=jwt_payload

- set_fact: jwt_unique_user_name="{{ jwt_payload.unique_name }}"
  when: "'unique_name' in jwt_payload"

- set_fact: jwt_unique_user_name="{{ jwt_payload.name }}"
  when: "'name' in jwt_payload"

- name: middleware get jwt check valid creds output user user1_demo
  debug:
    msg: "ERROR unexpected jwt test result (username does not match 'user1_demo'): {{ jwt_unique_user_name }}"
  when: "jwt_unique_user_name is not match('user1_demo')"

- name: middleware test get jwt wrong creds
  uri:
    url: https://{{ middleware_hostname }}:{{ middleware_web_listener_port }}/AuthenticateUser/
    method: POST
    headers:
      Content-Type: application/json
    body:
      Username: user1_demo
      Password: wrong-pwd
    body_format: json
    validate_certs: false
    return_content: yes
  register: sample_jwt
  changed_when: false
  ignore_errors: yes

- debug:
    var: sample_jwt

- name: middleware get jwt test wrong creds output
  debug:
    msg: "ERROR unexpected jwt test result (not equal 'error: Invalid credentials.'): {{ sample_jwt.content }}"
  when: sample_jwt.content is not match(".*error.*Invalid\scredentials\..*")
