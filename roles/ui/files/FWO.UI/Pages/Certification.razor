@using FWO.Data.Report
@using FWO.Middleware.Client
@using FWO.Recert
@using FWO.Report
@using FWO.Report.Filter
@using FWO.Services
@using FWO.Ui.Data
@using FWO.Ui.Pages.Reporting.Reports
@using System
@using System.Threading
@using System.Text.RegularExpressions

@page "/certification"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Recertifier}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject MiddlewareClient middlewareClient

@* ==== LEFT SIDEBAR ==== *@
<Sidebar @ref="deviceSelectionSidebar" Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth">
    <br>
    <div class="btn-group sticky-marker p-3 w-100">
        @if (processing == false)
        {
            <button type="button" class="btn btn-sm btn-primary" @onclick="GenerateRecertificationReport">@userConfig.GetText("load_rules")</button>
        }
        else
        {
            <button type="button" class="btn btn-sm btn-danger" @onclick="() => CancelGeneration()">@(userConfig.GetText("stop_fetching"))</button>
        }
        <br>
    </div>
    <div class="p-3">
        <h5 class="text-left">@(userConfig.GetText("due_within")):</h5>
        <input type="text" class="form-control form-control-sm" @bind="recertLookAheadDays" />
        <br>
        <h5 class="text-left">@(userConfig.GetText("owner")):</h5>
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}")">
            <Authorized>
                <div class="p-3">
                    <Dropdown ElementType="FwoOwner" ElementToString="@(o => o.Name)" Nullable="true"
                        @bind-SelectedElement="selectedOwner" Elements="ownerList">
                        <ElementTemplate Context="owner">
                            @owner.Name
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </Authorized>
            <NotAuthorized>
                @if(collectedOwnerships.Count > 1)
                {
                    <Dropdown ElementType="FwoOwner" ElementToString="@(o => o.Name)" Nullable="true"
                        @bind-SelectedElement="selectedOwner" Elements="collectedOwnerships">
                        <ElementTemplate Context="owner">
                            @owner.Name
                        </ElementTemplate>
                    </Dropdown>
                }
                else if (selectedOwner != null)
                {
                    <input type="text" class="form-control form-control-sm" readonly @bind="selectedOwner.Name" />
                }
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <DeviceSelection Environment="GlobalConst.kCertification" @bind-DeviceFilter="deviceFilter" @bind-CollapseAll="collapseDevices"></DeviceSelection>
</Sidebar>

@* ==== MAIN MIDDLE SECTION ==== *@

<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
    <h3>@(userConfig.GetText("recertification"))</h3>
    <div class="btn-group sticky-marker-60">
        @if(!readonlyMode)
        {
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Recertifier}")">
                <Authorized>
                    @if(rulesFound)
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestExecuteSelected()">@(userConfig.GetText("execute_selected"))</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("execute_selected"))</button>
                    }
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("execute_selected"))</button>
                </NotAuthorized>
            </AuthorizeView>
        }
    </div>
    <hr />
    @* <RulesReport Recertification="true" ReadonlyMode="readonlyMode" Managements="managementsReport" RulesPerPage="rulesPerPage" 
        @bind-SelectedRules="selectedRules" SelectedReportType="ReportType.Recertification"/> *@
</div>

<PopUp Title="@(userConfig.GetText("add_comment"))" Show="@AddCommentMode" Size=PopupSize.Large OnClose="() => AddCommentMode = false">
    <Body>
        @if (AddCommentMode)
        {
            <form onsubmit="return false">
                <div class="form-group row">
                    <label for="comment" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("comment") + (userConfig.CommentRequired ? "*:" : ":"))</label>
                    <div class="col-sm-8">
                        <input id="comment" type="text" class="form-control form-control-sm" @bind="actComment" />
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-primary" @onclick="() => ExecuteSelected()">@(userConfig.GetText("ok"))</button>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@*==== RIGHT SIDEBAR ====*@
<RightSidebar @bind-Width="sidebarRightWidth" CurrentReport="currentReport"
    @bind-SelectedRules="selectedRules" Recert="true" />

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private const int rulesPerPage = 0;

    private int sidebarLeftWidth = GlobalConst.kSidebarLeftWidth;
    private int sidebarRightWidth = GlobalConst.kSidebarRightWidth;

    private bool processing = false;
    private bool rulesFound = false;
    private CancellationTokenSource tokenSource = new ();

    private List<ManagementReport> managementsReport = [];
    
    private bool readonlyMode = false;
    public FwoOwner? selectedOwner = null;
    private List<FwoOwner> ownerList = [];
    private List<FwoOwner> userOwnerships = [];
    private List<FwoOwner> groupOwnerships = [];
    private List<FwoOwner> collectedOwnerships = [];
    private DeviceFilter deviceFilter = new ();
    private List<Rule> selectedRules = [];
    private bool collapseDevices = false;

    private ReportBase? currentReport;
    private ReportTemplate reportParams = new ();

    private Sidebar? deviceSelectionSidebar;
    private bool AddCommentMode = false;
    private string actComment = "";
    private int recertLookAheadDays = 0;

    private List<Rule> Certifications = [];
    private Dictionary<int, List<string>> deleteList = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Recertifier, Roles.Admin, Roles.Auditor ]);
            rulesFound = false;

            ownerList = await apiConnection.SendQueryAsync<List<FwoOwner>>(FWO.Api.Client.Queries.OwnerQueries.getOwners);
            await CollectOwnerships();

            deviceFilter.Managements = await apiConnection.SendQueryAsync<List<ManagementSelect>>(DeviceQueries.getDevicesByManagement);
            await InvokeAsync(StateHasChanged);
            if (deviceFilter.NumberMgmtDev() > userConfig.MinCollapseAllDevices)
            {
                collapseDevices = true;
                await InvokeAsync(StateHasChanged);
            }
            recertLookAheadDays = Convert.ToInt32(userConfig.RecertificationDisplayPeriod);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    private async Task CollectOwnerships()
    {
        userOwnerships = await apiConnection.SendQueryAsync<List<FwoOwner>>(OwnerQueries.getOwnersForUser, new {userDn = userConfig.User.Dn});

        List<UserGroup> ownerGroups = await GroupAccess.GetGroupsFromInternalLdap(middlewareClient, userConfig, DisplayMessageInUi, true);
        List<string> ownerGrpDns = [];
        foreach(var grp in ownerGroups)
        {
            if(grp.Users.FirstOrDefault(x => x.Dn == userConfig.User.Dn) != null)
            {
                ownerGrpDns.Add(grp.Dn);
            }
        }
        if(ownerGrpDns.Count > 0)
        {
            groupOwnerships = await apiConnection.SendQueryAsync<List<FwoOwner>>(OwnerQueries.getOwnersFromGroups, new {groupDns = ownerGrpDns});
        }

        foreach(var owner in userOwnerships)
        {
            collectedOwnerships.Add(owner);
        }
        foreach(var owner in groupOwnerships)
        {
            if(collectedOwnerships.FirstOrDefault(x => x.Id == owner.Id) == null)
            {
                collectedOwnerships.Add(owner);
            }
        }
        if(collectedOwnerships.Count > 0)
        {
            selectedOwner = collectedOwnerships[0];
        }
    }

    private async Task GenerateRecertificationReport()
    {
        processing = true;
        readonlyMode = !authenticationStateTask!.Result.User.IsInRole(Roles.Recertifier) || selectedOwner == null;
        selectedRules.Clear();

        try
        {
            if (!deviceFilter.IsAnyDeviceFilterSet())  // display pop-up with warning
            {
                DisplayMessageInUi(null, userConfig.GetText("no_device_selected"), userConfig.GetText("E1001"), true);
                processing = false;
                return;
            }

            currentReport = await ReportGenerator.GenerateFromTemplate(new ReportTemplate("", prepareReportParams()), apiConnection, userConfig, DisplayMessageInUi);
            if(currentReport != null)
            {
                managementsReport = currentReport?.ReportData.ManagementData ?? new();
            }

            postProcessReport();
            processing = false;
            
            await InvokeAsync(StateHasChanged);
            if(!rulesFound)
            {
                DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4002"), true);
            }
        }
        catch (Exception exception)
        {
            processing = false;
            DisplayMessageInUi(exception, userConfig.GetText("generate_report"), "", true);
        }
    }

    private void CancelGeneration()
    {
        tokenSource.Cancel();
        DisplayMessageInUi(null, userConfig.GetText("report_data_fetch"), userConfig.GetText("E1003"), true);
    }

    private ReportParams prepareReportParams()
    {
        List<int> ownerList = [];
        if (selectedOwner != null)
        {
            ownerList.Add(selectedOwner.Id);
        }

        return new ((int) ReportType.Recertification, deviceFilter)
        {
            RecertFilter = new()
            {
                RecertOwnerList = ownerList,
                RecertShowAnyMatch = true,
                RecertificationDisplayPeriod = recertLookAheadDays
            }
        };
    }

    private void postProcessReport()
    {
        rulesFound = false;
        foreach (var management in managementsReport)
        {
            foreach (var device in management.Devices)
            {
                if (device.ContainsRules())
                {
                    rulesFound = true;
                    // TODO: implement recertification logic
                    // foreach (var rb in device.Rulebases)
                    // {
                    //    foreach (var rule in rb.Rulebase.RuleMetadata[0].Rules!)
                    //    {
                    //        rule.Metadata.UpdateRecertPeriods(userConfig.RecertificationPeriod, userConfig.RecertificationNoticePeriod);
                    //    }
                    // }
                }
            }
        }
    }

    private void RequestExecuteSelected()
    {
        AddCommentMode = true;
    }

    private void Cancel()
    {
        AddCommentMode = false;
    }

    private async Task ExecuteSelected()
    {
        bool shortened = false;
        actComment = Sanitizer.SanitizeMand(actComment, ref shortened);
        if(shortened)
        {
            DisplayMessageInUi(null, userConfig.GetText("execute_selected"), userConfig.GetText("U0001"), true);
        }
        if(userConfig.CommentRequired && actComment == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("execute_selected"), userConfig.GetText("E4001"), true);
            return;
        }
        AddCommentMode = false;
        try
        {
            AnalyzeSelected();
            await DoRecerts();

            // create delete tickets
            if(userConfig.RecAutoCreateDeleteTicket)
            {
                TicketCreator ticketCreator = new (apiConnection, userConfig, authenticationStateTask!.Result.User, middlewareClient);
                foreach(var device in deleteList)
                {
                    await ticketCreator.CreateDecertRuleDeleteTicket(device.Key, device.Value, actComment, DateTime.Now.AddDays(userConfig.RuleRemovalGracePeriod));
                }
            }

            // reload updated report
            await GenerateRecertificationReport();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("execute_selected"), "", true);
        }
    }

    private void AnalyzeSelected()
    {
        // collect selected recerts + decerts
        Certifications = [];

        foreach (var management in managementsReport)
        {
        //    foreach (var device in management.Devices.Where(d => d.Rules != null))
         //   {
          //      if (device.ContainsRules())
        //        {
                    // TODO: implement recertification logic
                    // foreach (var rb in device.Rulebases)
                    // {
                    //     foreach (var rule in rb.Rulebase.RuleMetadata[0].Rules)
                    //     {
                    //         if(rule.Metadata.Recert || rule.Metadata.ToBeRemoved)
                    //         {
                    //             // rule.RulebaseId = Rulebase.Id;
                    //             Certifications.Add(rule);
                    //         }
                    //     }
                    // }
                    // current develop state:
                    // foreach (var rule in device.Rules!.Where(r => r.Metadata.Recert || r.Metadata.ToBeRemoved))
                    // {
                    //     rule.DeviceId = device.Id;
                    //     Certifications.Add(rule);
                    // }
           //     }
            //}
        }
    }

    private async Task DoRecerts()
    {
        int recerts = 0;
        int decerts = 0;
        deleteList = [];

        if (Certifications.Count > 0)
        {
			RecertHandler recertHandler = new(apiConnection, userConfig);
            foreach(var certRule in Certifications)
            {
                if(await recertHandler.RecertifySingleRule(certRule, selectedOwner, actComment))
                {
                    if(certRule.Metadata.Recert)
                    {
                        recerts++;
                    }
                    else
                    {
                        decerts++;
                        if(await checkAllDecertified(certRule))
                        {
                            if(!deleteList.ContainsKey(certRule.RulebaseId))
                            {
                                deleteList.Add(certRule.RulebaseId, new List<string>());
                            }
                            deleteList[certRule.RulebaseId].Add(certRule.Uid ?? "");
                        }
                    }
                }
            }
            // refresh view ?
        }
        string txt = userConfig.GetText("recerts_executed") + recerts.ToString() + ", " +
                        userConfig.GetText("decerts_executed") + decerts.ToString();
        DisplayMessageInUi(null, userConfig.GetText("execute_selected"), txt, false);
    }

    private async Task<bool> checkAllDecertified(Rule rule)
    {
        var variables = new
        {
            ruleId = rule.Id,
        };
        return ((await apiConnection.SendQueryAsync<List<Recertification>>(RecertQueries.getOpenRecertsForRule, variables)).Count == 0);
    }
}
