@using FWO.Compliance
@using NetTools

@page "/compliance/checks"

@layout ComplianceLayout

@inject UserConfig userConfig
@inject NetworkZoneService networkZoneService
@inject ApiConnection _apiConnection

<h3>@userConfig.GetText("network_zone_check")</h3>

<form class="mt-3">
    <div class="form-group row">
        <label class="col-sm-1 col-form-label">@userConfig.GetText("source")</label>
        <div class="col-sm-11">
            <IpAddressInput @bind-IpRange="sourceIpRange" />
        </div>
    </div>
    <div class="form-group row mt-2">
        <label class="col-sm-1 col-form-label">@userConfig.GetText("destination")</label>
        <div class="col-sm-11">
            <IpAddressInput @bind-IpRange="destinationIpRange" />
        </div>
    </div>
    <div class="form-group row mt-2">
        <div class="col-sm-1">
            <button type="button" @onclick="CheckIpRangeInputCompliance" class="btn btn-primary">@userConfig.GetText("check")</button>
        </div>
        <div class="col-sm-11">
            @if (displayOutput)
            {
                <label>
                    @(userConfig.GetText("rule_conform")):
                    <span class="p-1 @(compliant ? "bg-success" : "bg-danger")" style="border-radius: 5px;">
                        <i class="oi @(compliant ? "oi-check" : "oi-x") text-light" />
                    </span>
                </label>
                @if (!compliant)
                {
                    <div class="card">
                        <div class="card-header py-2">
                            @(userConfig.GetText("rule_violations"))
                        </div>
                        <div class="card-body p-0">
                            <table class="table mb-0">
                                <tbody>
                                    @foreach ((ComplianceNetworkZone, ComplianceNetworkZone) forbiddenCommunication in forbiddenCommunicationsOutput)
                                    {
                                        <tr>
                                            <td class="py-1 w-25">@(forbiddenCommunication.Item1.Name)</td>
                                            <td class="py-1 w-25">&rarr;</td>
                                            <td class="py-1 w-25">@(forbiddenCommunication.Item2.Name)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</form>

@code 
{
    IPAddressRange? sourceIpRange;
    IPAddressRange? destinationIpRange;
    bool displayOutput = false;
    bool compliant = false;
    List<(ComplianceNetworkZone, ComplianceNetworkZone)> forbiddenCommunicationsOutput = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // ToDo later: select between several policies/matrices?
        if(userConfig.ComplianceCheckPolicyId > 0)
        {
            try
            {
                CompliancePolicy? Policy = await _apiConnection.SendQueryAsync<CompliancePolicy>(ComplianceQueries.getPolicyById, new { id = userConfig.ComplianceCheckPolicyId });
                if (Policy != null)
                {
                    int? matrixId = Policy.Criteria.FirstOrDefault(c => c.Content.CriterionType == CriterionType.Matrix.ToString())?.Content.Id;
                    if (matrixId != null)
                    {
                        networkZoneService.NetworkZones = await _apiConnection.SendQueryAsync<List<ComplianceNetworkZone>>(ComplianceQueries.getNetworkZonesForMatrix, new { criterionId = matrixId });
                    }
                }
            }
            catch(Exception)
            {
                Log.WriteError("GetPolicy", "No valid Policy in UserConfig");
            }
        }
    }

    private void CheckIpRangeInputCompliance()
    {
        displayOutput = false;
        if (sourceIpRange != null && destinationIpRange != null)
        {
            displayOutput = true;
            ComplianceCheck complianceCheck = new ComplianceCheck(userConfig, null);
            forbiddenCommunicationsOutput = complianceCheck.CheckIpRangeInputCompliance(sourceIpRange, destinationIpRange, networkZoneService.NetworkZones);
            compliant = forbiddenCommunicationsOutput.Count == 0;
        }
    }
}
