@using FWO.Basics
@using FWO.Config.Api
@using FWO.Config.Api.Data

@inherits LayoutComponentBase
@layout MainLayout

@inject UserConfig userConfig


<div class="w-100">
    <Sidebar PositionLeft="true" Collapsible="true" Resizeable="true" @bind-Width="sidebarWidth">
        <div class="me-2 ms-2 mt-4 mb-4">
            <ul class="navbar-nav navbar-dark flex-column">
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Auditor}")">
                    <li class="nav-item px-2">
                        <NavLink class="nav-link" href="/compliance/policies">
                            <span class="@Icons.Compliance"></span> @(userConfig.GetText("policies"))
                        </NavLink>
                    </li>
                    <li class="nav-item px-2">
                        <NavLink class="nav-link" href="/compliance/matrix">
                            <span class="@Icons.Matrix"></span> @(userConfig.GetText("matrix"))
                        </NavLink>
                    </li>
                </AuthorizeView>
                <li class="nav-item px-2">
                    <NavLink class="nav-link" href="/compliance/checks">
                        <span class="@Icons.Check"></span> @(userConfig.GetText("checks"))
                    </NavLink>
                </li>
            </ul>
        </div>
    </Sidebar>
</div>

<div style="margin-left: @($"{sidebarWidth + 20}px");">
    @Body
</div>

@code
{
    private int sidebarWidth = 250;

    protected override void OnInitialized()
    {
        userConfig.OnChange += OnChange;
    }

    private void OnChange(Config _, ConfigItem[] __)
    {
        Task.Run(async () => await InvokeAsync(StateHasChanged));
    }
}
