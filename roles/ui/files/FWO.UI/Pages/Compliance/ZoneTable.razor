@using NetTools;

@inject UserConfig userConfig
@inject NetworkZoneService networkZoneService

<Table TableClass="table table-sm table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="ComplianceNetworkZone" 
		Items="NetworkZones.Where(zone => object.Equals(zone.Superzone, Superzone))">
	@if(!ReadonlyMode)
	{
		<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("actions"))" Context="networkZone">
			<Template>
				<div class="btn-group">
					<button type="button" class="btn btn-sm btn-warning" @onclick="() => networkZoneService.InvokeOnEditZone(networkZone)">@(userConfig.GetText("edit"))</button>
					<button type="button" class="btn btn-sm btn-danger" @onclick="() => networkZoneService.InvokeOnDeleteZone(networkZone)">@(userConfig.GetText("delete"))</button>
				</div>
			</Template>
		</Column>
	}
	<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("id"))" Field="@(networkZone => networkZone.Id)" Sortable="true" Filterable="true" />
	<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("name"))" Field="@(networkZone => networkZone.Name)" Sortable="true" Filterable="true" />
	<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("description"))" Field="@(networkZone => networkZone.Description)" Sortable="true" Filterable="true" />
	<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("ip_addresses"))" Context="networkZone">
		<Template>
			<ExpandableList Elements="networkZone.IPRanges" Context="ipRange">
				<ElementTemplate>
					@(NetworkZoneService.DisplayIpRange(ipRange))
				</ElementTemplate>
			</ExpandableList>
		</Template>
	</Column>
	<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("allowed_comm_srcs"))" Context="networkZone">
		<Template>
			<ExpandableList Elements="networkZone.AllowedCommunicationSources" Context="sourceZone">
				<ElementTemplate>
					@(sourceZone.Name)
				</ElementTemplate>
			</ExpandableList>
		</Template>
	</Column>
	<Column TableItem="ComplianceNetworkZone" Title="@(userConfig.GetText("allowed_comm_dests"))" Context="networkZone">
		<Template>
			<ExpandableList Elements="networkZone.AllowedCommunicationDestinations" Context="destinationZone">
				<ElementTemplate>
					@(destinationZone.Name)
				</ElementTemplate>
			</ExpandableList>
		</Template>
	</Column>
	@if(SubzonesPossible())
	{
		<DetailTemplate TableItem="ComplianceNetworkZone" Context="networkZone">
			<div class="mb-1">@(userConfig.GetText("subzones")):</div>
			@if (networkZone.Subzones.Length > 0)
			{
				ComplianceNetworkZone zone = networkZone;
				<ZoneTable Superzone="zone" NetworkZones="NetworkZones" />
			}
			else
			{
				@(userConfig.GetText("None"))
			}
		</DetailTemplate>
	}
	<Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

@code
{
	[Parameter]
	public ComplianceNetworkZone? Superzone { get; set; } = null;

	[Parameter]
	public List<ComplianceNetworkZone> NetworkZones { get; set; } = [];

	[Parameter]
	public bool ReadonlyMode { get; set; } = false;

	private bool SubzonesPossible()
	{
		return userConfig.ComplianceMatrixAllowNetworkZones && 
			NetworkZones.Where(zone => object.Equals(zone.Superzone, Superzone)).Any(z => z.IPRanges.Count() == 0);
	}
}
