@using FWO.Services

@page "/compliance/zones/matrix"

@layout ComplianceLayout

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<div class="ms-2 mb-3">
    <h3>@userConfig.GetText("zone_comm_matrix")</h3>
    <hr />
    <div class="form-group row">
        <label class="col-form-label col-sm-1">@(userConfig.GetText("matrix")):</label>&nbsp;
        @if(matrices.Count == 1)
        {
            <label class="col-form-label text-primary col-sm-3">@(selectedMatrix.Name)</label>
        }
        else
        {
            <div class="col-sm-3">
                <Dropdown ElementType="ComplianceCriterion" ElementToString="@(a => a.Name)"
                        SelectedElement="selectedMatrix" SelectedElementChanged="OnMatrixChanged" Elements="matrices" Nullable="true">
                    <ElementTemplate Context="matrix">
                        @(matrix.Name)
                    </ElementTemplate>
                </Dropdown>
            </div>
        }
        <div class="col-sm-1">
            <button type="button" class="btn btn-sm btn-success" @onclick="AddMatrix">@(userConfig.GetText("add"))</button>
        </div>
        @if (matrixLoaded && zones.Count > 0)
        {
            <div class="col-sm-3">
            @if (editMode)
            {
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="() => ToggleEditMode(false)">@userConfig.GetText("cancel")</button>
                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                        <Authorized>
                            <button type="button" class="btn btn-sm btn-primary" @onclick="CommitChanges">@userConfig.GetText("commit_changes")</button>
                        </Authorized>
                        <NotAuthorized>
                            <button type="button" disabled class="btn btn-sm btn-primary">@userConfig.GetText("commit_changes")</button>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            }
            else
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Auditor}")">
                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => ToggleEditMode(true)">@userConfig.GetText("edit")</button>
                </AuthorizeView>
            }
            </div>
        }
    </div>
</div>
<hr />

@if (matrixLoaded && zones.Count > 0)
{
    <table>
        <tr>
            <td></td>
            <td>
                <div class="direction-info">@(userConfig.GetText("destination"))</div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="ms-3"></div> @*Hacky fix because of a firefox display bug
            resulting in the text being diplayed inside of the table.*@
                <div class="direction-info text-rotated">@(userConfig.GetText("source"))</div>
            </td>
            <td>
                <table class="communication-matrix">
                    <thead>
                        <tr>
                            <th></th>
                            @foreach (var destinationZone in zones)
                            {
                                <th @onclick="() => ExecuteZoneAction(destinationZone)" class="zone-header-rotated">
                                    <div class="zone-name text-rotated">@(destinationZone.Name)</div>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sourceZone in zones)
                        {
                            <tr>
                                <th @onclick="() => ExecuteZoneAction(sourceZone)" class="zone-header">
                                    <div class="zone-name">@(sourceZone.Name)</div>
                                </th>
                                @foreach (var destinationZone in zones)
                                {
                                    var allowed = sourceZone.CommunicationAllowedTo(destinationZone);
                                    var allowed_in_edit = addCommunication.Contains((sourceZone, destinationZone));
                                    var disallowed_in_edit = deleteCommunication.Contains((sourceZone, destinationZone));
                                    <td @onclick="() => ExecuteCommunicationAction(sourceZone, destinationZone)"
                                        class="communication-cell @(allowed_in_edit ? "allowed-in-edit" : "")
                                        @(disallowed_in_edit ? "disallowed-in-edit" : "")
                                        @(allowed && !allowed_in_edit && !disallowed_in_edit ? "allowed" : "disallowed")" />
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
    </table>
}
else
{
    @(userConfig.GetText("no_network_zones"))
}
<AddMatrix @bind-Display="addMatrixMode"/>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private bool editMode = false;
    private ComplianceCriterion selectedMatrix = new();
    private List<ComplianceCriterion> matrices = [];
    private bool matrixLoaded = false;
    private bool addMatrixMode = false;

    private List<ComplianceNetworkZone> zones = [];
    private List<(ComplianceNetworkZone, ComplianceNetworkZone)> addCommunication = [];
    private List<(ComplianceNetworkZone, ComplianceNetworkZone)> deleteCommunication = [];

    protected async override Task OnInitializedAsync()
    {
        try
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User,
                [ Roles.Admin, Roles.FwAdmin, Roles.ReporterViewAll, Roles.Reporter,
                Roles.Requester, Roles.Approver, Roles.Planner, Roles.Implementer, Roles.Reviewer, Roles.Auditor ]);
            matrices = await apiConnection.SendQueryAsync<List<ComplianceCriterion>>(ComplianceQueries.getMatrices);
            if(matrices.Count > 0)
            {
                selectedMatrix = matrices[0];
                await LoadMatrix(selectedMatrix);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    private async Task OnMatrixChanged(ComplianceCriterion newMatrix)
    {
        selectedMatrix = newMatrix;
        await LoadMatrix(newMatrix);
    }

    private async Task LoadMatrix(ComplianceCriterion matrix)
    {
        if(matrix.Id > 0)
        {
            zones = await apiConnection.SendQueryAsync<List<ComplianceNetworkZone>>(ComplianceQueries.getNetworkZonesForMatrix, new { criterionId = matrix.Id });
            //zones = await apiConnection.SendQueryAsync<List<ComplianceNetworkZone>>(ComplianceQueries.getNetworkZones);
            matrixLoaded = true;
        }
    }

    private void AddMatrix()
    {
        addMatrixMode = true;
    }

    private void ToggleEditMode(bool editMode)
    {
        this.editMode = editMode;
        addCommunication.Clear();
        deleteCommunication.Clear();
    }

    private async Task CommitChanges()
    {
        try
        {
            var variables = new
            {
                add_zone_communication = addCommunication.ConvertAll(zones =>
                    new
                    {
                        criterion_id = selectedMatrix.Id,
                        from_network_zone_id = zones.Item1.Id,
                        to_network_zone_id = zones.Item2.Id
                    }
                ),
                delete_zone_communication_exp = deleteCommunication.ConvertAll(zones =>
                    new
                    {
                        criterion_id = selectedMatrix.Id,
                        from_network_zone_id = new { _eq = zones.Item1.Id },
                        to_network_zone_id = new { _eq = zones.Item2.Id }
                    }
                )
            };
            await apiConnection.SendQueryAsync<dynamic>(ComplianceQueries.modifyNetworkZoneCommunication, variables);
            zones = await apiConnection.SendQueryAsync<List<ComplianceNetworkZone>>(ComplianceQueries.getNetworkZones);
            ToggleEditMode(false);
            DisplayMessageInUi(null, userConfig.GetText("U0012"), userConfig.GetText("U0013"), false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("E0034"), userConfig.GetText("E0035"), true);
        }
    }

    private void ExecuteZoneAction(ComplianceNetworkZone zone)
    {
        if (editMode)
        {

        }
        else
        {
            // Jump to zone
        }
    }

    private void ExecuteCommunicationAction(ComplianceNetworkZone sourceZone, ComplianceNetworkZone destinationZone)
    {
        if (editMode)
        {
            if (addCommunication.Contains((sourceZone, destinationZone)))
            {
                addCommunication.Remove((sourceZone, destinationZone));
            }
            else if (deleteCommunication.Contains((sourceZone, destinationZone)))
            {
                deleteCommunication.Remove((sourceZone, destinationZone));
            }
            else if (sourceZone.CommunicationAllowedTo(destinationZone))
            {
                deleteCommunication.Add((sourceZone, destinationZone));
            }
            else
            {
                addCommunication.Add((sourceZone, destinationZone));
            }
        }
        else
        {
            // Jump to communication
        }
    }
}