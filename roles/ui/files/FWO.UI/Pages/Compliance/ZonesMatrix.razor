@using NetTools;

@inject UserConfig userConfig
@inject NetworkZoneService networkZoneService

<table>
    <tr>
        <td></td>
        <td>
            <div class="direction-info">@(userConfig.GetText("destination"))</div>
        </td>
    </tr>
    <tr>
        <td>
            <div class="ms-3"></div> @*Hacky fix because of a firefox display bug
        resulting in the text being diplayed inside of the table.*@
            <div class="direction-info text-rotated">@(userConfig.GetText("source"))</div>
        </td>
        <td>
            <table class="communication-matrix">
                <thead>
                    <tr>
                        <th></th>
                        @foreach (var destinationZone in GetSortedNetworkzones())
                        {
                            <th @onclick="() => ExecuteZoneAction(destinationZone)" class="zone-header-rotated">
                                <div class="zone-name text-rotated">@(destinationZone.Name)</div>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sourceZone in GetSortedNetworkzones())
                    {
                        <tr>
                            <th @onclick="() => ExecuteZoneAction(sourceZone)" class="zone-header">
                                <div class="zone-name">@(sourceZone.Name)</div>
                            </th>
                            @foreach (var destinationZone in networkZoneService.NetworkZones)
                            {
                                var allowed = sourceZone.CommunicationAllowedTo(destinationZone);
                                var allowed_in_edit = AddCommunication.Contains((sourceZone, destinationZone));
                                var disallowed_in_edit = DeleteCommunication.Contains((sourceZone, destinationZone));
                                <td @onclick="() => ExecuteCommunicationAction(sourceZone, destinationZone)"
                                    class="communication-cell @(allowed_in_edit ? "allowed-in-edit" : "")
                                    @(disallowed_in_edit ? "disallowed-in-edit" : "")
                                    @(allowed && !allowed_in_edit && !disallowed_in_edit ? "allowed" : "disallowed")" />
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </td>
    </tr>
</table>

@code
{
	[Parameter]
    public bool EditMode { get; set; } = false;

	[Parameter]
	public List<(ComplianceNetworkZone, ComplianceNetworkZone)> AddCommunication { get; set; } = [];

	[Parameter]
    public EventCallback<List<(ComplianceNetworkZone, ComplianceNetworkZone)>> AddCommunicationChanged { get; set; }

	[Parameter]
	public List<(ComplianceNetworkZone, ComplianceNetworkZone)> DeleteCommunication { get; set; } = [];

	[Parameter]
    public EventCallback<List<(ComplianceNetworkZone, ComplianceNetworkZone)>> DeleteCommunicationChanged { get; set; }

	
    private void ExecuteZoneAction(ComplianceNetworkZone zone)
    {
        if (EditMode)
        {

        }
        else
        {
            // Jump to zone
        }
    }

    private void ExecuteCommunicationAction(ComplianceNetworkZone sourceZone, ComplianceNetworkZone destinationZone)
    {
        if(!sourceZone.IsAutoCalculatedUndefinedInternalZone && !destinationZone.IsAutoCalculatedUndefinedInternalZone)
        {
            // Return to make auto-calculated undefined-internal zone readonly
            
            return;
        }

        if (EditMode)
        {
            if (AddCommunication.Contains((sourceZone, destinationZone)))
            {
                AddCommunication.Remove((sourceZone, destinationZone));
            }
            else if (DeleteCommunication.Contains((sourceZone, destinationZone)))
            {
                DeleteCommunication.Remove((sourceZone, destinationZone));
            }
            else if (sourceZone.CommunicationAllowedTo(destinationZone))
            {
                DeleteCommunication.Add((sourceZone, destinationZone));
            }
            else
            {
                AddCommunication.Add((sourceZone, destinationZone));
            }
        }
        else
        {
            // Jump to communication
        }
    }

    private List<ComplianceNetworkZone> GetSortedNetworkzones()
    {
        List<ComplianceNetworkZone> complianceNetworkZones = networkZoneService.NetworkZones.ToList();

        if(userConfig.GlobalConfig!.ComplianceCheckSortMatrixByID)
        {
            complianceNetworkZones = complianceNetworkZones.OrderBy(zone => zone.Id).ToList();
        }

        ComplianceNetworkZone? internetZone = networkZoneService.NetworkZones.FirstOrDefault(zone => zone.IsAutoCalculatedInternetZone);

        if(internetZone != null)
        {
            complianceNetworkZones.Remove(internetZone);
            complianceNetworkZones.Insert(0, internetZone);

            ComplianceNetworkZone? undefinedInternalZone = networkZoneService.NetworkZones.FirstOrDefault(zone => zone.IsAutoCalculatedUndefinedInternalZone);

            if(undefinedInternalZone != null)
            {
                complianceNetworkZones.Remove(undefinedInternalZone);
                complianceNetworkZones.Insert(1, undefinedInternalZone);
            }
        }



        return complianceNetworkZones;
    }
}
