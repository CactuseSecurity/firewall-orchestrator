@using FWO.Config.Api
@using FWO.Api.Client
@using FWO.Api.Client.Queries
@using FWO.Middleware.Client
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Services

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/monitoring/alerts"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Auditor}")]

<h3>@(userConfig.GetText("all_alerts"))</h3>
@(userConfig.GetText("U7101"))
<hr />

@if(InitComplete)
{
    <div class="vheight75">
        <PageSizeComponent PageSizeCallback="UpdatePageSize" PageSize="PageSize"></PageSizeComponent>
        <Table TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="Alert" Items="alertEntrys" PageSize="PageSize">
            <Column TableItem="Alert" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)"  Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.Timestamp)"  Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("source"))" Field="@(x => x.Source)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("code"))" Field="@(x => x.AlertCode)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("id"))" Field="@(x => x.ManagementId)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("management"))" Field="@(x => x.ManagementId)" Sortable="true">
                <Template>
                    @(managements.FirstOrDefault(x => x.Id == context.ManagementId)?.Name)
                </Template>
            </Column>
            <Column TableItem="Alert" Title="@(userConfig.GetText("description"))" Field="@(x => x.Description)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("acknowledged_by"))" Field="@(x => x.AcknowledgedBy)" Sortable="true">
                <Template>
                    @(uiUsers.FirstOrDefault(x => x.DbId == context.AcknowledgedBy)?.Name)
                </Template>
            </Column>
            <Column TableItem="Alert" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.AckTimestamp)" Sortable="true" Filterable="true"/>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </Table>
    </div>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private int PageSize { get; set; } = 10;

    private List<Alert> alertEntrys = [];
    private List<UiUser> uiUsers = [];
    private List<Management> managements = [];
    private bool InitComplete = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            alertEntrys = await apiConnection.SendQueryAsync<List<Alert>>(MonitorQueries.getAlerts);
            uiUsers = await apiConnection.SendQueryAsync<List<UiUser>>(AuthQueries.getUsers);
            managements = await apiConnection.SendQueryAsync<List<Management>>(DeviceQueries.getManagementNames);
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_alerts"), "", true);
        }
    }

    private void UpdatePageSize(int pageSize)
    {
        PageSize = pageSize;
    }
}
