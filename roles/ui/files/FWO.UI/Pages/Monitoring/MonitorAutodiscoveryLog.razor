@using FWO.Middleware.Client

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/monitoring/autodiscovery_logs"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Auditor}")]

<h3>@(userConfig.GetText("autodiscovery_logs"))</h3>
@(userConfig.GetText("U7401"))
<hr />

@if(InitComplete)
{
    <div class="vheight75">
        <PageSizeComponent PageSizeCallback="UpdatePageSize"></PageSizeComponent>
        <Table PageSize="PageSize" TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="LogEntry" Items="logEntrys">
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.Timestamp)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("found_by"))" Field="@(x => x.UserId)" Sortable="true">
                <Template>
                    @(uiUsers.FirstOrDefault(x => x.DbId == context.UserId)?.Name)
                </Template>
            </Column>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("title"))" Field="@(x => x.SuspectedCause)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("id"))" Field="@(x => x.ManagementId)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("management"))" Field="@(x => x.ManagementId)" Sortable="true">
                <Template>
                    @(managements.FirstOrDefault(x => x.Id == context.ManagementId)?.Name)
                </Template>
            </Column>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("description"))" Field="@(x => x.Description)" Sortable="true" Filterable="true"/>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </Table>
    </div>
}
else
{
    <Loading/>
}


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<LogEntry> logEntrys = [];
    private List<UiUser> uiUsers = [];
    private List<Management> managements = [];
    private bool InitComplete = false;

    private int PageSize { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            logEntrys = await apiConnection.SendQueryAsync<List<LogEntry>>(MonitorQueries.getAutodiscoveryLogEntrys);
            uiUsers = await apiConnection.SendQueryAsync<List<UiUser>>(AuthQueries.getUsers);
            managements = await apiConnection.SendQueryAsync<List<Management>>(DeviceQueries.getManagementNames);
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_log_entrys"), "", true);
        }
    }

    private void UpdatePageSize(int pageSize)
    {
        PageSize = pageSize;
    }
}
