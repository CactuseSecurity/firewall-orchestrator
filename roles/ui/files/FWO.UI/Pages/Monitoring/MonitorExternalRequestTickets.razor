@using BlazorTable
@using FWO.Basics
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Shared
@using FWO.Services

@page "/monitoring/external_request_tickets"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("ext_request_tickets"))</h3>
@(userConfig.GetText("U5119"))
<hr />

@* <button type="button" class="btn btn-info m-2" @onclick="Refresh">@(userConfig.GetText("refresh"))</button> *@

@if(InitComplete)
{
    <SelectOwner SelectedOwner="actOwner" SelectedOwnerChanged="FetchOwnerData" Apps="allOwners" />
    <div class="m-2 vheight75">
        <PageSizeComponent PageSizeCallback="UpdatePageSize" PageSize="PageSize"></PageSizeComponent>
        <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="OwnerTicket" Items="ownerTickets" PageSize="PageSize" ColumnReorder="true" TableRowClass="@(r => getTableRowClass(r))">
            <Column TableItem="OwnerTicket" Title="@(userConfig.GetText("actions"))" Field="(x => x.Ticket.Id)" Sortable="false" Filterable="false">
                <Template>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-secondary" @onclick="() => Details(context)">@(userConfig.GetText("details"))</button>
                    </div>
                </Template>
            </Column>
            <Column TableItem="OwnerTicket" Title="@(userConfig.GetText("owner"))" Field="@(x => x.Owner.Name)" Sortable="true" Filterable="true" />
            <Column TableItem="OwnerTicket" Title="@(userConfig.GetText("ticket"))" Field="@(x => x.Ticket.Id)" Sortable="true" Filterable="true" />
            <Column TableItem="OwnerTicket" Title="@(userConfig.GetText("state"))" Field="@(x => x.Ticket.StateId)" Sortable="true" Filterable="true" >
                <Template>
                    @(statesDict.Name[context.Ticket.StateId] ?? context.Ticket.StateId.ToString())
                </Template>
            </Column>
	        <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </Table>
    </div>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
    </div>
}

<PopUp Title="@(userConfig.GetText("ticket") + ": " + actOwnerTicket.Ticket.Id)" Show="@DetailsMode" Size=PopupSize.XLarge OnClose="() => DetailsMode = false">
    <Body>
        @if (DetailsMode)
        {
            <form>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("owner")):</label>
                    <label class="col-sm-8">@actOwnerTicket.Owner.Name</label>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ticket")):</label>
                    <label class="col-sm-8">@actOwnerTicket.Ticket.Id</label>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-8">@(statesDict.Name[actOwnerTicket.Ticket.StateId] ?? actOwnerTicket.Ticket.StateId.ToString())</label>
                </div>
                <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="WfReqTask" Items="actOwnerTicket.Ticket.Tasks.OrderBy(x => x.TaskNumber).ToList()" PageSize="PageSize" ColumnReorder="true">
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("number"))" Field="@(x => x.TaskNumber)" Sortable="true" Filterable="true" />
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="true" >
                        <Template>
                            @(statesDict.Name[context.StateId] ?? context.StateId.ToString())
                        </Template>
                    </Column>
	                <Pager ShowPageNumber="true" ShowTotalCount="true" />
                </Table>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => DetailsMode = false">@(userConfig.GetText("ok"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<FwoOwner> allOwners = [];
    private FwoOwner actOwner = new();
	private List<OwnerTicket> ownerTickets = [];
    private OwnerTicket actOwnerTicket = new();
    private WfStateDict statesDict = new ();

    private bool InitComplete = false;
    private bool DetailsMode = false;

    private int PageSize { get; set; } = 10;


    protected override async Task OnInitializedAsync()
    {
        await statesDict.Init(apiConnection);
        allOwners = await apiConnection.SendQueryAsync<List<FwoOwner>>(OwnerQueries.getOwnersWithConn);
        if(allOwners.Count > 0)
        {
            actOwner = allOwners.First();
            await FetchOwnerData(actOwner);
        }
        InitComplete = true;
    }

    private async Task FetchOwnerData(FwoOwner newOwner)
    {
        try
        {
            actOwner = newOwner;
            ownerTickets = (await apiConnection.SendQueryAsync<List<OwnerTicket>>(MonitorQueries.getOwnerTickets, new {ownerId = actOwner.Id})).OrderByDescending(x => x.Ticket.Id).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    @* private async Task Refresh()
    {
        await FetchOwnerData(actOwner);
    } *@

    private void Details(OwnerTicket ownerTicket)
    {
        actOwnerTicket = ownerTicket;
        DetailsMode = true;
    }

    @* private string ConvertQuotes(string textIn)
    {
        return textIn.Replace(@"\u0022", "\"");
    } *@

    private string getTableRowClass(OwnerTicket ownerTicket)
    {
        @* switch(ownerTicket.SortPrio)
        {
            case 1:
                return "background-upcoming";
            case 2:
                return "background-overdue";
            default: *@
                return "";
        //}
    }

    private void UpdatePageSize(int pageSize)
    {
        PageSize = pageSize;
    }
}
