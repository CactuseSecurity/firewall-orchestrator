@using FWO.Config.Api

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/monitoring/import_logs"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Auditor}")]

<h3>@(userConfig.GetText("import_logs"))</h3>
@(userConfig.GetText("U7201"))
<hr />

@if(InitComplete)
{
    <div class="vheight75">
        <Table TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="LogEntry" Items="logEntrys" PageSize="100">
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("severity"))" Field="@(x => x.Severity)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("description"))" Field="@(x => x.Description)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("import_id"))" Field="@(x => x.ImportId)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.Timestamp)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("suspected_cause"))" Field="@(x => x.SuspectedCause)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("management"))" Field="@(x => x.ManagementId)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("device"))" Field="@(x => x.DeviceId)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("rule_uid"))" Field="@(x => x.RuleUid)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("rule_id"))" Field="@(x => x.RuleId)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("object_type"))" Field="@(x => x.ObjectType)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("object_name"))" Field="@(x => x.ObjectName)" Sortable="true" Filterable="true"/>
            <Column TableItem="LogEntry" Title="@(userConfig.GetText("object_uid"))" Field="@(x => x.ObjectUid)" Sortable="true" Filterable="true"/>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </Table>
    </div>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<LogEntry> logEntrys = new List<LogEntry>();
    private bool InitComplete = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            logEntrys = await apiConnection.SendQueryAsync<List<LogEntry>>(MonitorQueries.getImportLogEntrys);
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_log_entrys"), "", true);
        }
    }
}
