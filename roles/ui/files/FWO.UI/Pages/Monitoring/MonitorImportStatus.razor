@using BlazorTable
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api

@page "/monitoring/import_status"
@attribute [Authorize(Roles = "admin, importer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("import_status"))</h3>
@(userConfig.GetText("U5113"))
<hr />

<button class="btn btn-info m-2" @onclick="Refresh">@(userConfig.GetText("refresh"))</button>

<div class="m-2">
    <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="ImportStatus" Items="sortedImportStati" PageSize="0" ColumnReorder="true" TableRowClass="@(stat => getTableRowClass(stat))">
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("actions"))" Field="(x => x.MgmId)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-secondary" @onclick="() => Details(context)">@(userConfig.GetText("details"))</button>
                </div>
            </Template>
        </Column>
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("id"))" Field="@(x => x.MgmId)" Sortable="true" Filterable="true" />
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("management"))" Field="@(x => x.MgmName)" Sortable="true" Filterable="true" />
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("type"))" Field="@(x => x.DeviceType.Id)" Sortable="true">
            <Template>
                @(context.DeviceType.NameVersion())
            </Template>
        </Column>
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("last_incomplete"))" Field="@(x => x.LastIncompleteImport)">
            <Template>
                @if (context.LastIncompleteImport != null && context.LastIncompleteImport.Length > 0)
                {
                    <div class="btn-group">
                        @if(context.LastIncompleteImport[0].StartTime < DateTime.Now.AddMinutes(-5))
                        {
                            <button class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => RequestRollback(context)">@(userConfig.GetText("rollback"))</button>
                        }
                        @(context.LastIncompleteImport[0].StartTime)
                    </div>
                }
            </Template>
        </Column>
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("last_success"))" Field="@(x => x.LastSuccessfulImport)">
            <Template>
                @if (context.LastSuccessfulImport != null && context.LastSuccessfulImport.Length > 0)
                {
                    @(context.LastSuccessfulImport[0].StopTime);
                }
            </Template>
        </Column>
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("last_import"))" Field="@(x => x.LastImport)">
            <Template>
                @if (context.LastImport != null && context.LastImport.Length > 0)
                {
                    @(context.LastImport[0].StopTime);
                }
            </Template>
        </Column>
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("success"))" Field="@(x => x.LastImport)">
            <Template>
                @if (context.LastImport != null && context.LastImport.Length > 0)
                {
                    @(GlobalConfig.ShowBool(context.LastImport[0].SuccessfulImport));
                }
            </Template>
        </Column>
        <Column TableItem="ImportStatus" Title="@(userConfig.GetText("errors"))" Field="@(x => x.LastImport)">
            <Template>
                @if (context.LastImport != null && context.LastImport.Length > 0)
                {
                    @(context.LastImport[0]?.ImportErrors);
                }
            </Template>
        </Column>
    </Table>
</div>

<ImportDetails ImportStatus="actStatus" @bind-DetailsMode="DetailsMode" Closing="async () => {DetailsMode = false; await Refresh();}"/>
<ImportRollback ManagementId="actStatus.MgmId" LastIncompleteImport="actStatus.LastIncompleteImport" @bind-RollbackMode="rollbackMode" Closing="async () => {rollbackMode = false; await fetchImportStati();}"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    private List<ImportStatus> importStati = new List<ImportStatus>();
    private List<ImportStatus> sortedImportStati = new List<ImportStatus>();
    private bool DetailsMode = false;
    private bool rollbackMode = false;
    private ImportStatus actStatus = new ImportStatus();

    protected override async Task OnInitializedAsync()
    {
        await fetchImportStati();
    }

    private async Task fetchImportStati()
    {
        try
        {
            importStati = await apiConnection.SendQueryAsync<List<ImportStatus>>(FWO.Api.Client.Queries.DeviceQueries.getImportStatus);
            countErrors();
            setSortPrio();
            sortedImportStati = importStati.OrderByDescending(stat=>stat.SortPrio).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_import_status"), "", true);
        }
    }

    private void Details(ImportStatus status)
    {
        actStatus = status;
        DetailsMode = true;
    }

    private void CloseDetails()
    {
        DetailsMode = false;
    }

    private void RequestRollback(ImportStatus status)
    {
        actStatus = status;
        rollbackMode = true;
    }

    private async Task Refresh()
    {
        await fetchImportStati();
    }

    private void countErrors()
    {
        foreach(ImportStatus impStat in importStati)
        {
            if(impStat.ErroneousImports != null && impStat.ErroneousImports.Length > 0)
            {
                long lastSuccess = (impStat.LastSuccessfulImport != null && impStat.LastSuccessfulImport.Length > 0 ? impStat.LastSuccessfulImport[0].ControlId : 0);
                foreach(ImportControl import in impStat.ErroneousImports)
                {
                    if(import.ControlId > lastSuccess)
                    {
                        impStat.ErrorCount++;
                    }
                }
            }
        }
    }

    private void setSortPrio()
    {
        foreach(ImportStatus imp in importStati)
        {
            // import running
            if(imp.LastIncompleteImport != null && imp.LastIncompleteImport.Length > 0)
            {
                imp.SortPrio = 1;
                // too long
                if (imp.LastIncompleteImport[0].StartTime < DateTime.Now.AddHours(-userConfig.MaxImportDuration))
                {
                    imp.SortPrio = 2;
                }
            }
            else if( 
                    // last import not successful
                    (imp.LastImport != null && imp.LastImport.Length > 0 && !imp.LastImport[0].SuccessfulImport)
                    // active, but no import at all
                    || (!imp.ImportDisabled && (imp.LastImport == null || imp.LastImport.Length == 0
                                            // or too long ago (not working for legacy devices as LastImportAttempt is not written)
                                            || imp.LastImportAttempt != null && imp.LastImportAttempt < DateTime.Now.AddHours(-userConfig.MaxImportInterval)))
                    )
            {
                imp.SortPrio = 2;
            }
        }
    }

    private string getTableRowClass(ImportStatus importStatus)
    {
        switch(importStatus.SortPrio)
        {
            case 1:
                return "background-upcoming";
            case 2:
                return "background-overdue";
            default:
                return "";
        }
    }
}
