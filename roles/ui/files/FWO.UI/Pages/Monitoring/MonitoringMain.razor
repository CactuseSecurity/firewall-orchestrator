@using FWO.Config.Api
@using FWO.Api.Data
@using System.Text.Json
@using System.Net
@using FWO.Middleware.Client
@using FWO.Middleware.RequestParameters
@using RestSharp

@page "/monitoring"
@page "/monitoring/main"
@attribute [Authorize(Roles = "admin, reporter, reporter-viewall, recertifier, workflow-user, workflow-admin, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<h3>@(userConfig.GetText("monitoring"))</h3>
@(userConfig.GetText("U7001"))
<hr />

<AuthorizeView Roles="admin, fw-admin, auditor">
    <h5>@(userConfig.GetText("open_alerts"))</h5>
    @if(alertEntrys.Count == 0)
    {
        @(userConfig.GetText("no_open_alerts"))
    }
    else
    {
        <Table TableClass="table table-bordered table-sm table-responsive vheight75 overflow-auto sticky-header" TableItem="Alert" Items="alertEntrys" PageSize="100">
            <Column Context="alert" TableItem="Alert" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)">
                <Template>
                    @if(alert.Source == GlobalConfig.kAutodiscovery && alert.AlertCode != AlertCode.AutoDiscoveryErrorUnspecific)
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowAutodiscDetails(alert)">@(userConfig.GetText("details"))</button>
                    }
                    else if(alert.AlertCode == AlertCode.NoImport || alert.AlertCode == AlertCode.SuccessfulImportOverdue)
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowImportDetails(alert)">@(userConfig.GetText("details"))</button>
                    }
                    else if(alert.AlertCode == AlertCode.ImportRunningTooLong)
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowImportRollback(alert)">@(userConfig.GetText("details"))</button>
                    }
                    else if(alert.AlertCode == AlertCode.SampleDataExisting)
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowRemoveSampleData(alert)">@(userConfig.GetText("details"))</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("details"))</button>
                    }
                    
                    <AuthorizeView Roles="admin, fw-admin">
                        <Authorized Context="ctx">
                            <button class="btn btn-sm btn-secondary" @onclick="() => Acknowledge(alert)">@(userConfig.GetText("acknowledge"))</button>
                        </Authorized>
                        <NotAuthorized Context="ctx">
                            <button class="btn btn-sm btn-secondary" disabled>@(userConfig.GetText("acknowledge"))</button>
                        </NotAuthorized> 
                    </AuthorizeView>
                </Template>
            </Column>
            <Column TableItem="Alert" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.Timestamp)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("source"))" Field="@(x => x.Source)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("code"))" Field="@(x => x.AlertCode)" Sortable="true" Filterable="true"/>
            <Column TableItem="Alert" Title="@(userConfig.GetText("id"))" Field="@(x => x.ManagementId)" Sortable="true" Filterable="true"/>
            <Column Context="alert" TableItem="Alert" Title="@(userConfig.GetText("management"))" Field="@(x => x.ManagementId)" Sortable="true">
                <Template>
                    @(managements.FirstOrDefault(x => x.Id == alert.ManagementId)?.Name)
                </Template>
            </Column>
            <Column TableItem="Alert" Title="@(userConfig.GetText("description"))" Field="@(x => x.Description)" Sortable="true" Filterable="true"/>
            <Pager ShowPageNumber="true" ShowTotalCount="true" />
        </Table>
    }
</AuthorizeView>

<AutoDiscovery Actions="actActions" @bind-Display="AutoDiscoverMode" Closing="async () => {AutoDiscoverMode = false; await Refresh();}"/>
<ImportDetails ImportStatus="actStatus" @bind-DetailsMode="DetailsMode" Closing="async () => {DetailsMode = false; await Refresh();}"/>
<ImportRollback ManagementId="actMgmtId" LastIncompleteImport="LastIncompleteImport" @bind-RollbackMode="RollbackMode" Closing="async () => {RollbackMode = false; await Refresh();}"/>

<PopUp Title="@(userConfig.GetText("remove_sample_data"))" Show="@RemoveSampleDataMode" OnClose="() => RemoveSampleDataMode = false">
    <Body>
        @if (RemoveSampleDataMode)
        {
            <p>@(userConfig.GetText("U7003"))</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveSampleData()">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("in_progress"))" Small="true" Show="@workInProgress">
    <Body>
        @if (workInProgress)
        {
            <div class="row">
                <div class="spinner-border mx-auto align-self-center" role="status"></div>
            </div>
        }
    </Body>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    private List<Alert> alertEntrys = new List<Alert>();
    private List<ActionItem> actActions = new List<ActionItem>();
    private List<Management> managements = new List<Management>();
    private bool AutoDiscoverMode = false;
    private int actMgmtId = 0;
    private ImportControl[]? LastIncompleteImport { get; set; }
    private bool RollbackMode = false;
    private ImportStatus actStatus = new ImportStatus();
    private bool DetailsMode = false;
    private bool RemoveSampleDataMode = false;
    private Alert actAlert = new Alert();
    private bool workInProgress = false;
 
    protected override async Task OnInitializedAsync()
    {
        managements = await apiConnection.SendQueryAsync<List<Management>>(FWO.Api.Client.Queries.DeviceQueries.getManagementsDetails);
        await Refresh();
    }

    private async Task Refresh()
    {
        try
        {
            alertEntrys = await apiConnection.SendQueryAsync<List<Alert>>(MonitorQueries.getOpenAlerts);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_log_entrys"), "", true);
        }
    }

    private async Task Acknowledge(Alert alert)
    {
        try
        {
            var Variables = new 
            { 
                id = alert.Id,
                ackUser = userConfig.User.DbId,
                ackTime = DateTime.Now
            };
            await apiConnection.SendQueryAsync<ReturnId>(MonitorQueries.acknowledgeAlert, Variables);
            alertEntrys.Remove(alert);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("acknowledge_alert"), "", true);
        }
    }

    private void ShowAutodiscDetails(Alert alert)
    {
        try
        {
            actActions = new List<ActionItem>() { new ActionItem(alert) }; 
            AutoDiscoverMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("handle_alert"), "", true);
        }
    }

    private void ShowImportRollback(Alert alert)
    {
        try
        {
            actMgmtId = alert.ManagementId ?? throw new Exception($"Missing ManagementId!");
            LastIncompleteImport = JsonSerializer.Deserialize<ImportControl[]?>((alert.JsonData ?? throw new Exception($"Missing Import Data!")).ToString());
            RollbackMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("handle_alert"), "", true);
        }
    }

    private void ShowImportDetails(Alert alert)
    {
        try
        {
            actStatus = JsonSerializer.Deserialize<ImportStatus>((alert.JsonData ?? throw new Exception($"Missing Import Data!")).ToString()) ?? throw new Exception($"Import Data not converted!");
            DetailsMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("handle_alert"), "", true);
        }
    }

    private void ShowRemoveSampleData(Alert alert)
    {
        RemoveSampleDataMode = true;
        actAlert = alert;
    }

    private async Task RemoveSampleData()
    {
        try
        {
            RemoveSampleDataMode = false;
            workInProgress = true;
            List<Management> managements = await apiConnection.SendQueryAsync<List<Management>>(FWO.Api.Client.Queries.DeviceQueries.getManagementsDetails);
            int deletedSampleManagements = 0;
            foreach (var management in managements)
            {
                if (management.Name.EndsWith("_demo"))
                {
                    if (await DeleteManagement(management))
                    {
                        deletedSampleManagements++;
                    }
                }
            }

            List<ImportCredential> credentials = await apiConnection.SendQueryAsync<List<ImportCredential>>(FWO.Api.Client.Queries.DeviceQueries.getCredentials);
            int deletedSampleCredentials = 0;
            foreach (var credential in credentials)
            {
                if (credential.Name.EndsWith("_demo"))
                {
                    if (await DeleteCredential(credential))
                    {
                        deletedSampleCredentials++;
                    }
                }
            }

            List<UiUser> users = await apiConnection.SendQueryAsync<List<UiUser>>(FWO.Api.Client.Queries.AuthQueries.getUsers);
            int deletedSampleUsers = 0;
            foreach (var user in users)
            {
                if (user.Name.EndsWith("_demo"))
                {
                    if (await DeleteUser(user))
                    {
                        deletedSampleUsers++;
                    }
                }
            }

            List<Tenant> tenants = await apiConnection.SendQueryAsync<List<Tenant>>(FWO.Api.Client.Queries.AuthQueries.getTenants);
            int deletedSampleTenants = 0;
            foreach (var tenant in tenants)
            {
                if (tenant.Name.EndsWith("_demo"))
                {
                    if (await DeleteTenant(tenant))
                    {
                        deletedSampleTenants++;
                    }
                }
            }

            int deletedSampleGroups = 0;
            RestResponse<List<GroupGetReturnParameters>> middlewareServerResponse = await middlewareClient.GetInternalGroups();
            if (middlewareServerResponse.StatusCode == HttpStatusCode.OK && middlewareServerResponse.Data != null)
            {
                foreach (var ldapUserGroup in middlewareServerResponse.Data)
                {
                    string groupName = (new DistName(ldapUserGroup.GroupDn)).Group;
                    if (groupName.EndsWith("_demo"))
                    {
                        if (await DeleteGroup(groupName))
                        {
                            deletedSampleGroups++;
                        }
                    }
                }
            }

            await Acknowledge(actAlert);

            string text = "";
            if(deletedSampleManagements > 0)
            {
                text += $"{deletedSampleManagements} " + userConfig.GetText("managements");
            }
            if(deletedSampleCredentials > 0)
            {
                text += $"{deletedSampleCredentials} " + userConfig.GetText("credential");
            }
            if(deletedSampleUsers > 0)
            {
                text += $" {deletedSampleUsers} " + userConfig.GetText("users");
            }
            if(deletedSampleTenants > 0)
            {
                text += $" {deletedSampleTenants} " + userConfig.GetText("tenants");
            }
            if(deletedSampleGroups > 0)
            {
                text += $" {deletedSampleGroups} " + userConfig.GetText("groups");
            }
            if(text == "")
            {
                text += userConfig.GetText("nothing");
            }
            text += " " + userConfig.GetText("deleted");
            workInProgress = false;
            DisplayMessageInUi!(null, userConfig.GetText("remove_sample_data"), text, false);
        }
        catch (Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi!(exception, userConfig.GetText("remove_sample_data"), "", true);
        }
    }
    
    private async Task<bool> DeleteManagement(Management management)
    {
        try
        {
            var Variables = new { id = management.Id };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.deleteManagement, Variables)).DeletedId;
            if (delId == management.Id)
            {
                return true;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("delete_management"), "", true);
        }
        return false;
    }

    private async Task<bool> DeleteCredential(ImportCredential credential)
    {
        try
        {
            var Variables = new { id = credential.Id };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.deleteCredential, Variables)).DeletedId;
            if (delId == credential.Id)
            {
                return true;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("delete_credential"), "", true);
        }
        return false;
    }

    private async Task<bool> DeleteUser(UiUser user)
    {
        try
        {
            UserDeleteParameters parameters = new UserDeleteParameters
            { 
                LdapId = user.LdapConnection.Id,
                UserId = user.DbId
            };
            RestResponse<bool> middlewareServerResponse = await middlewareClient.DeleteUser(parameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
            {
                DisplayMessageInUi!(null, userConfig.GetText("delete_user"), userConfig.GetText("E5216"), true);
            }
            else
            {
                return true;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("delete_user"), "", true);
        }
        return false;
    }

    private async Task<bool> DeleteTenant(Tenant tenant)
    {
        try
        {
            TenantDeleteParameters deleteTenantParameters = new TenantDeleteParameters { Name = tenant.Name, Id = tenant.Id};
            RestResponse<bool> middlewareServerResponse = await middlewareClient.DeleteTenant(deleteTenantParameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
            {
                DisplayMessageInUi!(null, userConfig.GetText("delete_tenant"), userConfig.GetText("E5282"), true);
            }
            else
            {
                return true;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("delete_tenant"), "", true);
        }
        return false;
    }

    private async Task<bool> DeleteGroup(string groupName)
    {
        try
        {
            GroupAddDeleteParameters groupDeleteParameters = new GroupAddDeleteParameters { GroupName = groupName };
            RestResponse<bool> middlewareServerResponse = await middlewareClient.DeleteGroup(groupDeleteParameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
            {
                DisplayMessageInUi!(null, userConfig.GetText("delete_group"), userConfig.GetText("E5239"), true);
            }
            else
            {
                return true;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("delete_group"), "", true);
        }
        return false;
    }

    private void Cancel()
    {
        RemoveSampleDataMode = false;
        DetailsMode = false;
        RollbackMode = false;
    }
}
