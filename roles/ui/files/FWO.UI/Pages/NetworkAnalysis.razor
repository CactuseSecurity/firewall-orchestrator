
@using NetTools
@using System.Net
@using FWO.Api.Client.Queries
@using FWO.Services
@using FWO.Basics
@using FWO.Api.Data

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/network_analysis"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Planner}, {Roles.Auditor}")]

<h3>@(userConfig.GetText("network_analysis"))</h3>

<form>
    <div class="form-group row">
        <label for="routingSource" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("source")):</label>
        <input id="routingSource" type="text" class="col-sm-9" @bind="routingSourceString">
    </div>
    <div class="form-group row mt-2">
        <label for="routingDestination" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("destination")):</label>
        <input id="routingDestination" type="text" class="col-sm-9" @bind="routingDestinationString">
    </div>
    <div class="form-group row mt-2">
        <label for="service" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("service")):</label>
        <input readonly id="service" type="text" class="col-sm-9" @bind="serviceString">
    </div>
    <div class="form-group row mt-2">
        <label for="gwsFound" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("gws_found")):</label>
        @if (gwsInPath == "")
        {
            <textarea readonly id="gwsFound" class="col-sm-9">@(userConfig.GetText("no_gws_found"))</textarea>
        }
        else
        {
            <textarea readonly id="gwsFound" class="col-sm-9" @bind="gwsInPath" />
        }
    </div>
</form>
<div class="btn-group mt-2">
    <button type="button" class="btn btn-primary" @onclick="@(async () => { gwsInPath = await AnalyzePath(routingSourceString,routingDestinationString); })">@(userConfig.GetText("search_route"))</button>
    <button type="button" disabled class="btn btn-primary" @onclick="@(async () => { })">@(userConfig.GetText("search_access"))</button>
    <button type="button" class="btn btn-secondary" @onclick="@(() => { routingSourceString = ""; routingDestinationString = ""; serviceString = ""; })">@(userConfig.GetText("clear_input"))</button>
</div>
<InProgress Display="workInProgress" />

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string routingSourceString = "";
    private string routingDestinationString = "";
    private string serviceString = "";
    private string gwsInPath = "";
    private bool workInProgress = false;

    protected override void OnInitialized()
    {
        try
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Admin, Roles.FwAdmin, Roles.Planner, Roles.Auditor ]);

            // archivedReports = (await apiConnection.SendQueryAsync<ReportFile[]>(ReportQueries.getGeneratedReports)).ToList();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("init_environment"), "", true);
        }
    }

    private async Task<string> AnalyzePath(string source, string destination)
    {
        workInProgress = true;
        string result = "";
        if (CheckIpAdresses(source, destination))
        {
            result = await PathAnalysis.GetDeviceNamesForSinglePath(source, destination, apiConnection);
        }
        workInProgress = false;
        return result;
    }

    private bool CheckIpAdresses(string source, string destination)
    {
        try
        {
            IPAddressRange.Parse(source);
            IPAddressRange.Parse(destination);
        }
        catch(Exception e)
        {
            DisplayMessageInUi(e, userConfig.GetText("wrong_ip_address"), "", true);
            return false;
        }
        return true;
    }
}
