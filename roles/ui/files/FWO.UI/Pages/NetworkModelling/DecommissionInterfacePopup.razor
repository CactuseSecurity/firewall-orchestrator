@using FWO.Middleware.Client

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject MiddlewareClient middlewareClient


<PopUp Title="@(userConfig.GetText("decomm_interface"))" Show="@Display" Size=PopupSize.Medium OnClose="Close">
    <Body>
        @if (Display && ConnHandler != null)
        {
            <div class="row mt-2 me-auto">
                <p>@((MarkupString)Message)</p>
                <Table TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="ModellingConnection" Items="ConnHandler.UsingConnections">
                    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" />
                    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("owner"))" Field="@(x => x.App.Name)" >
                        <Template>
                            @(context.App.Name)
                        </Template>
                    </Column>
                    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" />
                </Table>
            </div>
            <div class="row mt-2 me-auto">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("reason")):</label>
                <textarea rows="5" type="text" class="col-sm-9" @bind="Reason" />
            </div>
            <div class="row mt-2 me-auto">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("propose_alternative")):</label>
                <div class="col-sm-1">
                    <input type="checkbox" @bind="ProposeAlternative" />
                  </div>
                @if(ProposeAlternative)
                {
                    <div class="col-sm-8">
                        <Dropdown ElementType="ModellingConnection" @bind-SelectedElement="ProposedInterface" ElementToString="@(i => i.Name)" 
                            Elements="PossibleInterfaces.Where(i => i.Id != ConnHandler.ActConn.Id && i.IsPublished)">
                            <ElementTemplate Context="interf">
                                @(interf.Name)
                            </ElementTemplate>
                        </Dropdown>
                      </div>
                }
            </div>
        }
    </Body>
    <Footer>
        <AuthorizeView Roles="@Roles.Modeller">
            <Authorized>
                @if(!WorkInProgress)
                {
                    <button type="button" class="btn btn-sm btn-primary" @onclick="Decommission">@(DisplayService.DisplayButton(userConfig, "decommission", Icons.Delete))</button>
                }
                else
                {
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(DisplayService.DisplayButton(userConfig, "decommission", Icons.Delete))</button>
                }
            </Authorized>
            <NotAuthorized>
                <button type="button" class="btn btn-sm btn-primary" disabled>@(DisplayService.DisplayButton(userConfig, "decommission", Icons.Delete))</button>
            </NotAuthorized> 
        </AuthorizeView>
        <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(DisplayService.DisplayButton(userConfig, "cancel", Icons.Cancel))</button>
    </Footer>
</PopUp>
<InProgress Display="WorkInProgress"/>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter] 
    public ModellingConnectionHandler? ConnHandler { get; set; }

    [Parameter] 
    public List<ModellingConnection> PossibleInterfaces { get; set; } = [];

    [Parameter]
    public Func<Task> RefreshParent { get; set; } = DefaultInit.DoNothing;

    private string Reason { get; set; } = "";
    private string Message { get; set; } = "";
    private bool ProposeAlternative = false;
    private ModellingConnection? ProposedInterface;
    private List<FwoOwner> AppsToNotify = [];
    private bool WorkInProgress = false;
    private bool firstTry = true;


    protected override void OnParametersSet()
    {
        if (Display && firstTry && ConnHandler != null)
        {
            firstTry = false;
            Message = $"{userConfig.GetText("U9035")} {ConnHandler.ActConn.Name}?<br>{userConfig.GetText("U9032")}";
        }
    }

    private async Task Decommission()
    {
        if(ConnHandler != null)
        {
            WorkInProgress = true;
            try
            {
                ConnHandler.ActConn.Removed = true;
                ConnHandler.ActConn.Reason += $"<br>{DateTime.Now.ToString("dd.MM.yyyy")} {userConfig.User.Name}: {userConfig.GetText("decomm_interface")}: {Reason}";
                await ConnHandler.Save(true, true);
                await ConnHandler.RemoveFromAllSelections();
                if(userConfig.ModDecommEmailReceiver != EmailRecipientOption.None)
                {
                    AppsToNotify = ConnHandler.UsingConnections.Where(c => c.AppId != null && c.AppId != ConnHandler.ActConn.AppId).Select(c => c.App).Distinct().ToList();
                    await NotifyUsers();
                }
                await AddToSelections();
                await RefreshParent();
                Close();
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("decomm_interface"), "", true);
            }
            WorkInProgress = false;
        }
    }

    private async Task NotifyUsers()
    {
        try
        {
            EmailHelper emailHelper = new(apiConnection, middlewareClient, userConfig, DisplayMessageInUi);         
            await emailHelper.Init();

            string subject = userConfig.ModDecommEmailSubject.Replace(Placeholder.INTERFACE_NAME, ConnHandler?.ActConn.Name);

            int successCount = 0;
            int failCount = 0;
            foreach (var app in AppsToNotify)
            {
                if(await emailHelper.SendEmailToOwnerResponsibles(app, subject, ConstructBody(app), userConfig.ModDecommEmailReceiver))
                {
                    successCount++;
                }
                else
                {
                    failCount++;
                }
            }
            if(successCount > 0)
            {
                string msgText = userConfig.GetText("U9033").Replace(Placeholder.OK_NUMBER, successCount.ToString());
                DisplayMessageInUi(null, userConfig.GetText("send_email"), msgText, false);
            }
            if(failCount > 0)
            {
                string msgText = userConfig.GetText("E9019").Replace(Placeholder.FAIL_NUMBER, failCount.ToString());
                DisplayMessageInUi(null, userConfig.GetText("send_email"), msgText, true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("notification"), "", true);
        }
    }

    private string ConstructBody(FwoOwner app)
    {
        string interfaceUrl = $"{userConfig.UiHostName}/networkmodelling/{ProposedInterface?.App.ExtAppId}/{ProposedInterface?.Id}";
        string interfacelink = $"<a target=\"_blank\" href=\"{interfaceUrl}\">{userConfig.GetText("interface")}: {ProposedInterface?.Name}</a><br>";
        string body = userConfig.ModDecommEmailBody
            .Replace(Placeholder.INTERFACE_NAME, $"<b>{ConnHandler?.ActConn.Name}</b>")
            .Replace(Placeholder.NEW_INTERFACE_NAME, $"<b>{ProposedInterface?.Name}</b>")
            .Replace(Placeholder.NEW_INTERFACE_LINK, $"<b>{interfacelink}</b>")
            .Replace(Placeholder.REASON, $"<b>{Reason}</b>")
            .Replace(Placeholder.USER_NAME, $"<b>{userConfig.User.Name}</b>");
       string ConnList = string.Join("<br>", ConnHandler!.UsingConnections.Where(c => c.AppId != null && c.AppId == app.Id).Select(a => a.Name));
       return $"{body}<br><b>{ConnList}</b>";
    }

    private async Task AddToSelections()
    {
        if(ConnHandler != null && ProposeAlternative && ProposedInterface != null)
        {
            foreach (var app in AppsToNotify)
            {
                try
                {
                    var Variables = new
                    {
                        appId = app.Id,
                        connectionId = ProposedInterface.Id
                    };
                    await apiConnection.SendQueryAsync<ReturnIdWrapper>(ModellingQueries.addSelectedConnection, Variables);
                }
                catch (Exception)
                {
                    Log.WriteDebug(userConfig.GetText("add_interface"), "Interface was already selected");
                }
            }
        }
    }

    private void Close()
    {
        Display = false;
        firstTry = true;
        DisplayChanged.InvokeAsync(Display);
    }
}
