@using FWO.Config.Api
@using FWO.Services
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<div class="ms-2">
    <h3>@(userConfig.GetText("library"))</h3>
</div>
<div class="col-sm-12  border rounded m-2 p-2">
    <div class="col-sm-12">
        <h5>@(userConfig.GetText("app_server"))</h5>
        @if(AppRoleHandler != null)
        {
            <div class="bg-secondary">
                <div id="app-role-library-ordered-draggable-list" class="col-sm-12 ">
                    <div class="d-flex align-items-center">
                        <OrderByDropdown CssClass="@(orderByDropdownWidthClass)" @ref="orderByDropdown" TCollectionItem="ModellingAppServer" Collection="AppRoleHandler.AppServersInArea" CollectionReordered="OnCollectionReordered" ElementProperties="orderByDropdownProperties"/>
                        @if(selectedAppServers.Count > 0)
                        {
                            <div class="col-sm-2 p-2">
                                <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() =>
                                    {AppRoleHandler.AppServerToAppRole(selectedAppServers); selectedAppServers = [];
                                    AppRoleHandlerChanged.InvokeAsync(AppRoleHandler);}">@(AppRoleHandler.DisplayButton("to_app_role", Icons.Use))</button>
                            </div>
                        }
                    </div>
                    <DraggableList AllElements="selectableAppServers" @bind-SelectedElements="selectedAppServers" 
                        HandleDragStart="HandleDragStart" Display="@(x => x.DisplayWithIcon())" MaxHeight="50"/>
                </div>

            </div>
        }
    </div>
</div>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter] 
    public ModellingDnDContainer Container { get; set; } = new();

    [Parameter]
    public EventCallback<ModellingDnDContainer> ContainerChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public ModellingAppRoleHandler? AppRoleHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingAppRoleHandler> AppRoleHandlerChanged { get; set; }

    private List<ModellingAppServer> selectedAppServers = [];
    private int sidebarLeftWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width);}}

    /// <summary>
    /// The app servers which are available for adding (i.e. which are not already in the AppServerToAdd collection).
    /// </summary>
    private List<ModellingAppServer> selectableAppServers => AppRoleHandler?.AppServersInArea.Except(AppRoleHandler.AppServerToAdd).ToList() ?? [];

    /// <summary>
    /// Reference to the order by component.
    /// </summary>
    private OrderByDropdown<ModellingAppServer>? orderByDropdown;
        
    /// <summary>
    /// Properties to sort the app server's visual elements by.
    /// </summary>
    private List<string> orderByDropdownProperties => new List<string> {"Ip", "Name"};

        private string orderByDropdownWidthClass => selectedAppServers.Count > 0 ? "col-sm-10" : "col-sm-12";


    private bool HandleDragStart(DragEventArgs e, ModellingAppServer appServer)
    {
        if(!selectedAppServers.Contains(appServer))
        {
            selectedAppServers.Add(appServer);
        }
        Container.Clear();
        Container.AppServerElements = selectedAppServers;
        selectedAppServers = new();
        return true;
    }

    /// <summary>
    /// Updates the app server's visual elements after reordering the collection.
    /// </summary>
    private void OnCollectionReordered(List<ModellingAppServer> orderedCollection)
    {
        if (AppRoleHandler != null && orderedCollection != null)
        {
            AppRoleHandler.AppServersInArea = orderedCollection;
        }
        
        InvokeAsync(StateHasChanged);
    }
}
