@using FWO.Config.Api

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(AddMode ? userConfig.GetText("add_app_server") : userConfig.GetText("edit_app_server"))" Size=PopupSize.Small Show="@Display" OnClose="Cancel">
    <Body>
        @if (Display)
        {
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                <input type="text" class="col-sm-9" @bind="AppServerHandler.ActAppServer.Name" />
            </div>
            <div class="form-group row mt-2">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("ip"))*:</label>
                <input type="text" class="col-sm-9" @bind="AppServerHandler.ActAppServer.Ip" />
            </div>
            @* claculated area *@
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@Roles.Admin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="async () => {if(await AppServerHandler.Save()) Close();}">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public ModellingAppServerHandler AppServerHandler { get; set; }

    [Parameter]
    public bool AddMode { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private void Cancel()
    {
        AppServerHandler.Reset();
        Close();
    }

    private void Close()
    {
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
