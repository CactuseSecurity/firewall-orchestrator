@using FWO.Config.Api
@using FWO.Ui.Display
@using FWO.Middleware.Client
@using FWO.Ui.Pages.Request

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject NavigationManager NavigationManager
@inject MiddlewareClient middlewareClient

@if (Display)
{
    @if(!ConnHandler.ReadOnly)
    {
        <EditConnLeftSide @bind-Container="Container" @bind-Width="sidebarLeftWidth" @bind-ConnHandler="ConnHandler"/>
    }
    <div style="margin-left: @($"{(ConnHandler.ReadOnly ? 0 : sidebarLeftWidth) + 10}px");">
        <h3>@GetTitle()</h3>
        @if(ConnHandler.ActConn.UsedInterfaceId != null && !PopupMode)
        {
            <div class="col-sm-12 me-auto">
                <div class="d-flex flex-row">
                    <label class="">@(userConfig.GetText("used_interface")): </label>
                    <h5 class="ml-13">@ConnHandler.InterfaceName</h5>
                    <button type="button" class="btn btn-sm btn-primary ml-13" @onclick="async () =>
                        {await ConnHandler.DisplaySelectedInterface(await ConnHandler.GetUsedInterface(ConnHandler.ActConn) ?? new());
                        await ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                        @(ConnHandler.DisplayButton("display_interface", Icons.Display))</button>
                </div>
            </div>
        }
        <div class="col-sm-11 border rounded m-2 p-2">
            <div class="form-group row me-auto">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                @if(ConnHandler.ReadOnly)
                {
                    <label class="col-sm-9">@ConnHandler.ActConn.Name</label>
                }
                else
                {
                    <input type="text" class="col-sm-9" data-toggle="@(ConnHandler.ActConn.IsRequested ? "tooltip" : "")"
                        title="@(ConnHandler.ActConn.IsRequested ? userConfig.PureLine("U9012") : "")" @bind="ConnHandler.ActConn.Name" />
                }
            </div>
            <div class="form-group row mt-2 me-auto">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(ConnHandler.ActConn.IsInterface ? userConfig.GetText("interface_description") : userConfig.GetText("func_reason"))*:</label>
                @if(ConnHandler.ReadOnly)
                {
                    <label class="col-sm-9">@ConnHandler.ActConn.Reason</label>
                }
                else
                {
                    <textarea rows="3" type="text" class="col-sm-9" data-toggle="@(ConnHandler.ActConn.IsRequested ? "tooltip" : "")"
                        title="@(ConnHandler.ActConn.IsRequested ? userConfig.PureLine("U9012") : "")" @bind="ConnHandler.ActConn.Reason" />
                }
            </div>
            @if(ConnHandler.ActConn.IsInterface)
            {
                <div class="form-group row mt-2 me-auto" data-toggle="tooltip" title="@(userConfig.PureLine("C9009"))">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("publish")):</label>
                    <div class="col-sm-1">
                        @if(ConnHandler.ReadOnly)
                        {
                            <input type="checkbox" class="w-100" disabled @bind="ConnHandler.ActConn.IsPublished">
                        }
                        else
                        {
                            <input type="checkbox" class="w-100" @bind="ConnHandler.ActConn.IsPublished">
                        }
                    </div>
                </div>
            }
            <br>
            <div class="form-group row">
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("source"))</h6>
                    @if(ConnHandler.ReadOnly || ConnHandler.SrcReadOnly)
                    {
                        @if((ConnHandler.ActConn.InterfaceIsRequested && ConnHandler.ActConn.SrcFromInterface) || (ConnHandler.ActConn.IsRequested && ConnHandler.ActConn.SourceFilled()))
                        {
                            @((MarkupString)ModellingHandlerBase.DisplayReqInt(userConfig, ConnHandler.ActConn.TicketId, ConnHandler.ActConn.InterfaceIsRequested,
                                ConnHandler.ActConn.GetBoolProperty(ConState.InterfaceRejected.ToString()) || ConnHandler.ActConn.GetBoolProperty(ConState.Rejected.ToString())))
                        }
                        else
                        {
                            foreach(var src in ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.SourceNwGroups))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)src.DisplayWithIcon(ConnHandler.ActConn.SrcFromInterface))</div>
                                </div>
                            }
                            foreach(var src in ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.SourceAppRoles))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)src.DisplayWithIcon(ConnHandler.ActConn.SrcFromInterface))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayAppRole(src); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_app_role", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            foreach(var src in ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.SourceAppServers))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)src.DisplayWithIcon(ConnHandler.ActConn.SrcFromInterface))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayAppServer(src); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_app_server", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else 
                    {
                        <div class="@SrcClass()" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleSrcDrop">
                            <EditList ElementType="ModellingNwGroup" Elements="ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.SourceNwGroups)"
                                    ElementsToAdd="ConnHandler.SrcNwGroupsToAdd" ElementsToDelete="ConnHandler.SrcNwGroupsToDelete" StdLayout="false" 
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="ModellingAppRole" Elements="ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.SourceAppRoles.Where(x => x.Content.Id != ConnHandler.DummyAppRole.Id).ToList())"
                                    ElementsToAdd="ConnHandler.SrcAppRolesToAdd" ElementsToDelete="ConnHandler.SrcAppRolesToDelete" StdLayout="false"
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="ModellingAppServer" Elements="ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.SourceAppServers)"
                                    ElementsToAdd="ConnHandler.SrcAppServerToAdd" ElementsToDelete="ConnHandler.SrcAppServerToDelete" StdLayout="false"
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("service"))</h6>
                    @if(ConnHandler.ReadOnly || ConnHandler.SvcReadOnly)
                    {
                        @if(ConnHandler.ActConn.InterfaceIsRequested || ConnHandler.ActConn.IsRequested)
                        {
                            @((MarkupString)ModellingHandlerBase.DisplayReqInt(userConfig, ConnHandler.ActConn.TicketId, ConnHandler.ActConn.InterfaceIsRequested,
                                ConnHandler.ActConn.GetBoolProperty(ConState.InterfaceRejected.ToString()) || ConnHandler.ActConn.GetBoolProperty(ConState.Rejected.ToString())))
                        }
                        else
                        {
                            foreach(var grp in ModellingServiceGroupWrapper.Resolve(ConnHandler.ActConn.ServiceGroups))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)grp.DisplayWithIcon(ConnHandler.ActConn.UsedInterfaceId != null))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayServiceGroup(grp); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_service_group", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            foreach(var svc in ModellingServiceWrapper.Resolve(ConnHandler.ActConn.Services))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)svc.DisplayWithIcon(ConnHandler.ActConn.UsedInterfaceId != null))</div>
                                </div>
                            }
                        }
                    }
                    else 
                    {
                        <div class="@dropzoneClass" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleSvcDrop">
                            <EditList ElementType="ModellingServiceGroup" Elements="ModellingServiceGroupWrapper.Resolve(ConnHandler.ActConn.ServiceGroups)"
                                    ElementsToAdd="ConnHandler.SvcGrpToAdd" ElementsToDelete="ConnHandler.SvcGrpToDelete" StdLayout="false" 
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="ModellingService" Elements="ModellingServiceWrapper.Resolve(ConnHandler.ActConn.Services)"
                                    ElementsToAdd="ConnHandler.SvcToAdd" ElementsToDelete="ConnHandler.SvcToDelete" StdLayout="false"
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("destination"))</h6>
                    @if(ConnHandler.ReadOnly || ConnHandler.DstReadOnly)
                    {
                        @if((ConnHandler.ActConn.InterfaceIsRequested && ConnHandler.ActConn.DstFromInterface) || (ConnHandler.ActConn.IsRequested && ConnHandler.ActConn.DestinationFilled()))
                        {
                            @((MarkupString)ModellingHandlerBase.DisplayReqInt(userConfig, ConnHandler.ActConn.TicketId, ConnHandler.ActConn.InterfaceIsRequested,
                                ConnHandler.ActConn.GetBoolProperty(ConState.InterfaceRejected.ToString()) || ConnHandler.ActConn.GetBoolProperty(ConState.Rejected.ToString())))
                        }
                        else
                        {
                            foreach(var dst in ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.DestinationNwGroups))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)dst.DisplayWithIcon(ConnHandler.ActConn.DstFromInterface))</div>
                                </div>
                            }
                            foreach(var dst in ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.DestinationAppRoles))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)dst.DisplayWithIcon(ConnHandler.ActConn.DstFromInterface))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayAppRole(dst); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_app_role", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            foreach(var dst in ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.DestinationAppServers))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)dst.DisplayWithIcon(ConnHandler.ActConn.DstFromInterface))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayAppServer(dst); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_app_server", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="@DestClass()" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleDstDrop">
                            <EditList ElementType="ModellingNwGroup" Elements="ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.DestinationNwGroups)" 
                                    ElementsToAdd="ConnHandler.DstNwGroupsToAdd" ElementsToDelete="ConnHandler.DstNwGroupsToDelete" StdLayout="false"
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="ModellingAppRole" Elements="ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.DestinationAppRoles.Where(x => x.Content.Id != ConnHandler.DummyAppRole.Id).ToList())"
                                    ElementsToAdd="ConnHandler.DstAppRolesToAdd" ElementsToDelete="ConnHandler.DstAppRolesToDelete" StdLayout="false"
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="ModellingAppServer" Elements="ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.DestinationAppServers)"
                                    ElementsToAdd="ConnHandler.DstAppServerToAdd" ElementsToDelete="ConnHandler.DstAppServerToDelete" StdLayout="false"
                                    AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                <Display>
                                    <div class="row">
                                        <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
            </div>
            @if(!ConnHandler.AddMode)
            {
                <br>
                <label class="col-sm-12 small">@CreationInfo()</label>
            }
        </div>
        <div class="ml-13 btn-group">
            @if(!PopupMode)
            {
                @if(ConnHandler.ActConn.IsRequested)
                {
                    <button type="button" class="btn btn-sm btn-dark" @onclick="DisplayTicket">@(ConnHandler.DisplayButton("display_ticket", Icons.Display, userConfig.GetText("ticket")))</button>
                    @if(!ConnHandler.ReadOnly)
                    {
                        <button type="button" class="btn btn-sm btn-dark" @onclick="GotoTicket">@(ConnHandler.DisplayButton("edit_ticket", Icons.Edit, userConfig.GetText("ticket")))</button>
                    }
                }
                if(ConnHandler.ReadOnly)
                {
                    <button type="button" class="btn btn-sm btn-primary" @onclick="Cancel">@(userConfig.GetText("ok"))</button>
                }
                else
                {
                    @if((ConnHandler.IsOwner || ConnHandler.ActConn.IsRequested) && !ConnHandler.ActConn.GetBoolProperty(ConState.Rejected.ToString()))
                    {
                        <button type="button" class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    }
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
                    @if(ConnHandler.ActConn.UsedInterfaceId != null)
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => ConnHandler.RemoveInterf()">@(ConnHandler.DisplayButton("remove_interface", Icons.Unuse, "interface"))</button>
                    }
                    @if(ConnHandler.ActConn.IsRequested && !ConnHandler.ActConn.GetBoolProperty(ConState.Rejected.ToString()))
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="Reject">@(userConfig.GetText("reject"))</button>
                    }
                }
            }
        </div>
    </div>
    <InProgress Display="workInProgress"/>
    <EditServiceGroup @bind-Display="ConnHandler.EditSvcGrpMode" @bind-SvcGroupHandler="ConnHandler.SvcGrpHandler"/>
    <EditAppRole @bind-Display="ConnHandler.DisplayAppRoleMode" @bind-AppRoleHandler="ConnHandler.AppRoleHandler"/>
    <EditAppServer @bind-Display="ConnHandler.DisplayAppServerMode" AppServerHandler="ConnHandler.AppServerHandler"/>
    <EditConnPopup @bind-Display="ConnHandler.DisplaySelectedInterfaceMode" ConnHandler="ConnHandler.IntConnHandler"
        ReplaceMode="ConnHandler.ReplaceMode" Replace="ReplaceInterface"/>
    <DisplayImplementationTask WfHandler="wfHandler" States="states" IncludePopups="false"/>
    <RejectInterfacePopup @bind-Display="RejectInterfaceMode" ConnHandler="ConnHandler" RefreshParent="async () => {await ConnHandler.ReInit(); Close();}"/>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public bool Display { get; set; } = false;
        
    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter] 
    public ModellingConnectionHandler ConnHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingConnectionHandler> ConnHandlerChanged { get; set; }

    [Parameter]
    public Func<bool> ClosingAction { get; set; } = DefaultInit.DoNothingSync;

    [Parameter]
    public bool PopupMode { get; set; } = false;


    private ModellingDnDContainer Container { get; set; } = new();
    private int sidebarInitWidth = GlobalConst.kGlobLibraryWidth;
    private int sidebarLeftWidth;
    
    private List<ModellingService> services = new();
    private List<ModellingServiceGroup> serviceGroups = new();

    private static string dropzoneClass = "minheight-dropzone bg-secondary dropzone";
    private static string forbiddenDropzoneClass = "minheight-dropzone bg-white";
    private bool workInProgress = false;

    private WfHandler wfHandler = new ();
    private WfStateDict states = new ();
    private List<int> OwnerIds = new ();
    private ModellingConnection unchangedConn = new();
    private bool RejectInterfaceMode = false;

    protected override void OnInitialized()
    {
        sidebarLeftWidth = sidebarInitWidth;
    }

    protected override void OnParametersSet()
    {
        if(Display)
        {
            ConnHandler.CalcVisibility();
            unchangedConn = new(ConnHandler.ActConn);
        }
    }

    private async Task HandleSrcDrop()
    {
        if(Container.ConnElement != null)
        {
            if(ConnHandler.ActConn.IsInterface)
            {
                await ConnHandler.RequestReplaceInterface(Container.ConnElement);
            }
            else
            {
                ConnHandler.InterfaceToConn(Container.ConnElement);
            }  
        }
        else if(!ConnHandler.SrcDropForbidden())
        {
            if(Container.AppRoleElements.Count > 0)
            {
                ConnHandler.AppRolesToSource(Container.AppRoleElements);
            }
            if(Container.NwGroupElements.Count > 0)
            {
                ConnHandler.NwGroupToSource(Container.NwGroupElements);
            }
            if(Container.AppServerElements.Count > 0)
            {
                ConnHandler.AppServerToSource(Container.AppServerElements);
            }
        }
        Container.Clear();
    }

    private async Task HandleDstDrop()
    {
        if(Container.ConnElement != null)
        {
            if(ConnHandler.ActConn.IsInterface)
            {
                await ConnHandler.RequestReplaceInterface(Container.ConnElement);
            }
            else
            {
                ConnHandler.InterfaceToConn(Container.ConnElement);
            }
        }
        else if(!ConnHandler.DstDropForbidden())
        {
            if(Container.AppRoleElements.Count > 0)
            {
                ConnHandler.AppRolesToDestination(Container.AppRoleElements);
            }
            if(Container.NwGroupElements.Count > 0)
            {
                ConnHandler.NwGroupToDestination(Container.NwGroupElements);
            }
            if(Container.AppServerElements.Count > 0)
            {
                ConnHandler.AppServerToDestination(Container.AppServerElements);
            }
        }
        Container.Clear();
    }

    private async Task HandleSvcDrop()
    {
        if(Container.ConnElement != null)
        {
            if(ConnHandler.ActConn.IsInterface)
            {
                await ConnHandler.RequestReplaceInterface(Container.ConnElement);
            }
            else
            {
                ConnHandler.InterfaceToConn(Container.ConnElement);
            }
        }
        else 
        {
            if(Container.SvcElements.Count > 0)
            {
                ConnHandler.ServicesToConn(Container.SvcElements);
            }
            if(Container.SvcGrpElements.Count > 0)
            {
                ConnHandler.ServiceGrpsToConn(Container.SvcGrpElements);
            }
        }
        Container.Clear();
    }

    private async Task<bool> Save()
    {
        workInProgress = true;
        ModellingConnection connBeforeSave = new(ConnHandler.ActConn);

        bool publishRequested = ConnHandler.ActConn.IsRequested && ConnHandler.ActConn.IsPublished;
        if(publishRequested)
        {
            ConnHandler.ActConn.Creator = userConfig.User.Name;
            ConnHandler.ActConn.IsRequested = false;
            if(ConnHandler.ActConn.AppId == null)
            {
                ConnHandler.ActConn.AppId = ConnHandler.ActConn.ProposedAppId;
                ConnHandler.ActConn.ProposedAppId = null;
            }
        }
        if(await ConnHandler.Save())
        {
            unchangedConn = new(ConnHandler.ActConn);
            if(publishRequested)
            {
                await PromoteTicketToDone();
            }
            Close();
            return true;
        }
        else
        {
            ConnHandler.ActConn = connBeforeSave;
            workInProgress = false;
            return false;
        }
    }

    private async Task ReplaceInterface()
    {
        await ConnHandler.ReplaceInterface(authenticationStateTask, middlewareClient);
        Close();
    }

    private void Reject()
    {
        RejectInterfaceMode = true;
    }

    private async Task PromoteTicketToDone()
    {
        if(ConnHandler.ActConn.TicketId != null)
        {
            try
            {
                apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Implementer, Roles.Requester, Roles.Admin, Roles.Auditor ]);
                TicketCreator ticketCreator = new (apiConnection, userConfig, authenticationStateTask!.Result.User, middlewareClient, WorkflowPhases.implementation);
                if(await ticketCreator.PromoteNewInterfaceImplTask(ConnHandler.Application, (long)(ConnHandler.ActConn.TicketId), ExtStates.Done))
                {
                    DisplayMessageInUi(null, userConfig.GetText("publish"), userConfig.GetText("U9013"), false);
                }
                apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Modeller, Roles.Admin, Roles.Auditor ]);
            }
            catch(Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("publish"), "", true);
            }
        }
    }

    private void GotoTicket()
    {
        if(UnsavedChangesMade())
        {
            DisplayMessageInUi(null, userConfig.GetText("E9014"), "", false);
        }
        else
        {
            NavigationManager.NavigateTo($"/request/tickets/{ConnHandler.ActConn.TicketId}");
        }
    }

    private bool UnsavedChangesMade()
    {
        return unchangedConn.Name != ConnHandler.ActConn.Name
            || unchangedConn.Reason != ConnHandler.ActConn.Reason 
            || unchangedConn.IsPublished != ConnHandler.ActConn.IsPublished
            || ConnHandler.SrcAppServerToAdd.Count > 0
            || ConnHandler.SrcAppServerToDelete.Count > 0
            || ConnHandler.DstAppServerToAdd.Count > 0
            || ConnHandler.DstAppServerToDelete.Count > 0
            || ConnHandler.SrcAppRolesToAdd.Count > 0
            || ConnHandler.SrcAppRolesToDelete.Count > 0
            || ConnHandler.DstAppRolesToAdd.Count > 0
            || ConnHandler.DstAppRolesToDelete.Count > 0
            || ConnHandler.SrcNwGroupsToAdd.Count > 0
            || ConnHandler.SrcNwGroupsToDelete.Count > 0
            || ConnHandler.DstNwGroupsToAdd.Count > 0
            || ConnHandler.DstNwGroupsToDelete.Count > 0
            || ConnHandler.SvcToAdd.Count > 0
            || ConnHandler.SvcToDelete.Count > 0
            || ConnHandler.SvcGrpToAdd.Count > 0
            || ConnHandler.SvcGrpToDelete.Count > 0;
    }

    private async Task DisplayTicket()
    {
        if(ConnHandler.ActConn.TicketId != null)
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Implementer, Roles.Requester, Roles.Admin, Roles.Auditor });
            await states.Init(apiConnection);
            OwnerIds = (await apiConnection.SendQueryAsync<List<FwoOwner>>(OwnerQueries.getOwners)).ConvertAll(x => x.Id);
            wfHandler = new (DisplayMessageInUi, userConfig, authenticationStateTask!.Result.User, apiConnection, middlewareClient, WorkflowPhases.request){};
            wfHandler.ReadOnlyMode = true;
            await wfHandler.Init(OwnerIds, true, true);
            WfTicket? ticket = await wfHandler.ResolveTicket((long)ConnHandler.ActConn.TicketId);
            if(ticket != null)
            {
                wfHandler.SetTicketEnv(ticket);
                WfReqTask? reqTask = ticket.Tasks.FirstOrDefault(x => x.TaskType == TaskType.new_interface.ToString());
                if(reqTask != null)
                {
                    wfHandler.SetReqTaskEnv(reqTask);
                    WfImplTask? implTask = reqTask.ImplementationTasks.FirstOrDefault(x => x.ReqTaskId == reqTask.Id);
                    if(implTask != null)
                    {
                        wfHandler.SelectImplTask(implTask, ObjAction.display);
                    }
                }
            }
            StateHasChanged();
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Modeller, Roles.Admin, Roles.Auditor });
        }
    }

    private void Cancel()
    {
        ConnHandler.Reset();
        Close();
    }

    private void Close()
    {
        ConnHandler.Close();
        ClosingAction();
        workInProgress = false;
        RejectInterfaceMode = false;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
    
    private string SrcClass()
    {
        if(ConnHandler.SrcDropForbidden())
        {
            return forbiddenDropzoneClass;
        }
        return dropzoneClass;
    }

    private string DestClass()
    {
        if(ConnHandler.DstDropForbidden())
        {
            return forbiddenDropzoneClass;
        }
        return dropzoneClass;
    }

    private string GetTitle()
    {
        string title = userConfig.GetText("connection");
        if(ConnHandler.ActConn.IsCommonService)
        {
            title = userConfig.GetText("common_service");
        }
        else if (ConnHandler.ActConn.IsRequested)
        {
            title = userConfig.GetText("requested_interface");
        }
        else if (ConnHandler.ActConn.IsInterface)
        {
            title = userConfig.GetText("interface");
        }
        return title;
    }

    private string CreationInfo()
    {
        return $"{(ConnHandler.ActConn.IsRequested ? userConfig.GetText("requested_by") : userConfig.GetText("created_by"))}: {ConnHandler.ActConn.Creator}, " +
            $"{userConfig.GetText("creation_date")}: {ConnHandler.ActConn.CreationDate}";
    }
}
