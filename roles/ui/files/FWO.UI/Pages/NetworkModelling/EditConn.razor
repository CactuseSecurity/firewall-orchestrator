@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if (Display)
{
    @if(!ConnHandler.ReadOnly)
    {
        <EditConnLeftSide @bind-Container="Container" @bind-Width="sidebarLeftWidth" @bind-ConnHandler="ConnHandler"/>
    }
    <div style="margin-left: @($"{(ConnHandler.ReadOnly ? 0 : sidebarLeftWidth) + 10}px");">
        <h3>@(ConnHandler.ActConn.IsInterface ? userConfig.GetText("interface") : (ConnHandler.ActConn.IsCommonService ? userConfig.GetText("common_service") : userConfig.GetText("connection")))</h3>
            @if(ConnHandler.ActConn.UsedInterfaceId != null && !PopupMode)
            {
                <div class="col-sm-12 me-auto">
                    <div class="d-flex flex-row">
                        <label class="">@(userConfig.GetText("used_interface")): </label>
                        <h5 class="ml-13">@ConnHandler.InterfaceName</h5>
                        <button type="button" class="btn btn-sm btn-primary ml-13" @onclick="async () =>
                            {await ConnHandler.DisplaySelectedInterface(await ConnHandler.GetUsedInterface(ConnHandler.ActConn) ?? new());
                            await ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                            @(ConnHandler.DisplayButton("display_interface", Icons.Display))</button>
                    </div>
                </div>
            }
            <div class="col-sm-11 border rounded m-2 p-2">
                <div class="form-group row me-auto">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                    @if(ConnHandler.ReadOnly)
                    {
                        <label class="col-sm-9">@ConnHandler.ActConn.Name</label>
                    }
                    else
                    {
                        <input type="text" class="col-sm-9" @bind="ConnHandler.ActConn.Name" />
                    }
                </div>
                <div class="form-group row mt-2 me-auto">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("func_reason"))*:</label>
                    @if(ConnHandler.ReadOnly)
                    {
                        <label class="col-sm-9">@ConnHandler.ActConn.Reason</label>
                    }
                    else
                    {
                        <textarea rows="3" type="text" class="col-sm-9" @bind="ConnHandler.ActConn.Reason" />
                    }
                </div>
                <br>
                <div class="form-group row">
                    <div class="col-sm-4">
                        <h6>@(userConfig.GetText("source"))</h6>
                        @if(ConnHandler.ReadOnly || ConnHandler.srcReadOnly)
                        {
                            foreach(var src in ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.SourceNwGroups))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)src.DisplayWithIcon(ConnHandler.ActConn.SrcFromInterface))</div>
                                </div>
                            }
                            foreach(var src in ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.SourceAppRoles))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)src.DisplayWithIcon(ConnHandler.ActConn.SrcFromInterface))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayAppRole(src); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_app_role", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            foreach(var src in ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.SourceAppServers))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)src.DisplayWithIcon(ConnHandler.ActConn.SrcFromInterface))</div>
                                </div>
                            }
                        }
                        else 
                        {
                            <div class="@SrcClass()" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="HandleSrcDrop">
                                <EditList ElementType="ModellingNwGroup" Elements="ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.SourceNwGroups)"
                                        ElementsToAdd="ConnHandler.SrcNwGroupsToAdd" ElementsToDelete="ConnHandler.SrcNwGroupsToDelete" StdLayout="false" 
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                                <EditList ElementType="ModellingAppRole" Elements="ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.SourceAppRoles)"
                                        ElementsToAdd="ConnHandler.SrcAppRolesToAdd" ElementsToDelete="ConnHandler.SrcAppRolesToDelete" StdLayout="false"
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                                <EditList ElementType="ModellingAppServer" Elements="ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.SourceAppServers)"
                                        ElementsToAdd="ConnHandler.SrcAppServerToAdd" ElementsToDelete="ConnHandler.SrcAppServerToDelete" StdLayout="false"
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                            </div>
                        }
                    </div>
                    <div class="col-sm-4">
                        <h6>@(userConfig.GetText("service"))</h6>
                        @if(ConnHandler.ReadOnly || ConnHandler.svcReadOnly)
                        {
                            foreach(var grp in ModellingServiceGroupWrapper.Resolve(ConnHandler.ActConn.ServiceGroups))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)grp.DisplayWithIcon(ConnHandler.ActConn.UsedInterfaceId != null))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayServiceGroup(grp); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_service_group", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            foreach(var svc in ModellingServiceWrapper.Resolve(ConnHandler.ActConn.Services))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)svc.DisplayWithIcon(ConnHandler.ActConn.UsedInterfaceId != null))</div>
                                </div>
                            }
                        }
                        else 
                        {
                            <div class="@dropzoneClass" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="HandleSvcDrop">
                                <EditList ElementType="ModellingServiceGroup" Elements="ModellingServiceGroupWrapper.Resolve(ConnHandler.ActConn.ServiceGroups)"
                                        ElementsToAdd="ConnHandler.SvcGrpToAdd" ElementsToDelete="ConnHandler.SvcGrpToDelete" StdLayout="false" 
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                                <EditList ElementType="ModellingService" Elements="ModellingServiceWrapper.Resolve(ConnHandler.ActConn.Services)"
                                        ElementsToAdd="ConnHandler.SvcToAdd" ElementsToDelete="ConnHandler.SvcToDelete" StdLayout="false"
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                            </div>
                        }
                    </div>
                    <div class="col-sm-4">
                        <h6>@(userConfig.GetText("destination"))</h6>
                        @if(ConnHandler.ReadOnly || ConnHandler.dstReadOnly)
                        {
                            foreach(var dst in ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.DestinationNwGroups))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)dst.DisplayWithIcon(ConnHandler.ActConn.DstFromInterface))</div>
                                </div>
                            }
                            foreach(var dst in ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.DestinationAppRoles))
                            {
                                <div class="col-sm-12 me-auto">
                                    <div class="row">
                                        <div class="col-sm-10">
                                            <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)dst.DisplayWithIcon(ConnHandler.ActConn.DstFromInterface))</div>
                                        </div>
                                        <div class="col-sm-1">
                                            <button type="button" class="btn btn-sm btn-primary" @onclick="() => {ConnHandler.DisplayAppRole(dst); ConnHandlerChanged.InvokeAsync(ConnHandler);}">
                                                @(ConnHandler.DisplayButton("display_app_role", Icons.Display))</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            foreach(var dst in ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.DestinationAppServers))
                            {
                                <div class="col-sm-10">
                                    <div class="ml-13 border form-control form-control-sm bg-transparent">@((MarkupString)dst.DisplayWithIcon(ConnHandler.ActConn.DstFromInterface))</div>
                                </div>
                            }
                        }
                        else 
                        {
                            <div class="@DestClass()" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="HandleDstDrop">
                                <EditList ElementType="ModellingNwGroup" Elements="ModellingNwGroupWrapper.Resolve(ConnHandler.ActConn.DestinationNwGroups)" 
                                        ElementsToAdd="ConnHandler.DstNwGroupsToAdd" ElementsToDelete="ConnHandler.DstNwGroupsToDelete" StdLayout="false"
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                                <EditList ElementType="ModellingAppRole" Elements="ModellingAppRoleWrapper.Resolve(ConnHandler.ActConn.DestinationAppRoles)"
                                        ElementsToAdd="ConnHandler.DstAppRolesToAdd" ElementsToDelete="ConnHandler.DstAppRolesToDelete" StdLayout="false"
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                                <EditList ElementType="ModellingAppServer" Elements="ModellingAppServerWrapper.Resolve(ConnHandler.ActConn.DestinationAppServers)"
                                        ElementsToAdd="ConnHandler.DstAppServerToAdd" ElementsToDelete="ConnHandler.DstAppServerToDelete" StdLayout="false"
                                        AfterRemoveAction="() => {ConnHandler.CalcVisibility(); StateHasChanged(); return true;}">
                                    <Display>
                                        <div class="row">
                                            <div class="ml-13 col-sm-12 border form-control form-control-sm bg-transparent">@((MarkupString)context.DisplayWithIcon())</div>
                                        </div>
                                    </Display>
                                </EditList>
                            </div>
                        }
                    </div>
                </div>
                @if(!ConnHandler.AddMode)
                {
                    <br>
                    <label class="col-sm-12 small">@(userConfig.GetText("created_by")): @(ConnHandler.ActConn.Creator), @(userConfig.GetText("creation_date")): @(ConnHandler.ActConn.CreationDate)</label>
                }
            </div>
            <div class="ml-13 btn-group">
                @if(PopupMode)
                {}
                else if(ConnHandler.ReadOnly)
                {
                    <button type="button" class="btn btn-sm btn-primary" @onclick="Cancel">@(userConfig.GetText("ok"))</button>
                }
                else
                {
                    @if(ConnHandler.IsOwner)
                    {
                        <button type="button" class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    }
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
                    @if(ConnHandler.ActConn.UsedInterfaceId != null)
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => ConnHandler.RemoveInterf()">@(ConnHandler.DisplayButton("remove_interface", Icons.Unuse, "interface"))</button>
                    }
                }
            </div>
    </div>
    <InProgress Display="workInProgress"/>
    <EditServiceGroup @bind-Display="ConnHandler.EditSvcGrpMode" @bind-SvcGroupHandler="ConnHandler.SvcGrpHandler" AddMode="false"/>
    <EditAppRole @bind-Display="ConnHandler.DisplayAppRoleMode" @bind-AppRoleHandler="ConnHandler.AppRoleHandler" AddMode="false"/>
    <EditConnPopup @bind-Display="ConnHandler.DisplaySelectedInterfaceMode" ConnHandler="ConnHandler.IntConnHandler"/>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;
        
    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter] 
    public ModellingConnectionHandler ConnHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingConnectionHandler> ConnHandlerChanged { get; set; }

    [Parameter]
    public Func<bool> ClosingAction { get; set; } = DefaultInit.DoNothingSync;

    [Parameter]
    public bool PopupMode { get; set; } = false;


    private ModellingDnDContainer Container { get; set; } = new();
    private int sidebarInitWidth = GlobalConst.kSidebarLeftWidth + 300;
    private int sidebarLeftWidth;
    
    private List<ModellingService> services = new();
    private List<ModellingServiceGroup> serviceGroups = new();

    private static string dropzoneClass = "minheight-dropzone bg-secondary dropzone";
    private static string forbiddenDropzoneClass = "minheight-dropzone bg-white";
    private bool workInProgress = false;

    protected override void OnInitialized()
    {
        sidebarLeftWidth = sidebarInitWidth;
    }

    protected override void OnParametersSet()
    {
        if(Display)
        {
            ConnHandler.CalcVisibility();
        }
    }

    private void HandleSrcDrop()
    {
        if(Container.ConnElement != null)
        {
            ConnHandler.InterfaceToConn(Container.ConnElement);
        }
        else if(!ConnHandler.SrcDropForbidden())
        {
            if(Container.AppRoleElements.Count > 0)
            {
                ConnHandler.AppRolesToSource(Container.AppRoleElements);
            }
            if(Container.NwGroupElements.Count > 0)
            {
                ConnHandler.NwGroupToSource(Container.NwGroupElements);
            }
            if(Container.AppServerElements.Count > 0)
            {
                ConnHandler.AppServerToSource(Container.AppServerElements);
            }
        }
        Container.Clear();
    }

    private void HandleDstDrop()
    {
        if(Container.ConnElement != null)
        {
            ConnHandler.InterfaceToConn(Container.ConnElement);
        }
        else if(!ConnHandler.DstDropForbidden())
        {
            if(Container.AppRoleElements.Count > 0)
            {
                ConnHandler.AppRolesToDestination(Container.AppRoleElements);
            }
            if(Container.NwGroupElements.Count > 0)
            {
                ConnHandler.NwGroupToDestination(Container.NwGroupElements);
            }
            if(Container.AppServerElements.Count > 0)
            {
                ConnHandler.AppServerToDestination(Container.AppServerElements);
            }
        }
        Container.Clear();
    }

    private void HandleSvcDrop()
    {
        if(Container.ConnElement != null)
        {
            ConnHandler.InterfaceToConn(Container.ConnElement);
        }
        else 
        {
            if(Container.SvcElements.Count > 0)
            {
                ConnHandler.ServicesToConn(Container.SvcElements);
            }
            if(Container.SvcGrpElements.Count > 0)
            {
                ConnHandler.ServiceGrpsToConn(Container.SvcGrpElements);
            }
        }
        Container.Clear();
    }

    private async Task Save()
    {
        workInProgress = true;
        if(await ConnHandler.Save())
        {
            Close();
        }
        else
        {
            workInProgress = false;
        }
    }

    private void Cancel()
    {
        sidebarLeftWidth = sidebarInitWidth;
        ConnHandler.Reset();
        Close();
    }

    private void Close()
    {
        ConnHandler.Close();
        ClosingAction();
        workInProgress = false;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
    
    private string SrcClass()
    {
        if(ConnHandler.SrcDropForbidden())
        {
            return forbiddenDropzoneClass;
        }
        return dropzoneClass;
    }

    private string DestClass()
    {
        if(ConnHandler.DstDropForbidden())
        {
            return forbiddenDropzoneClass;
        }
        return dropzoneClass;
    }
}
