@using FWO.Config.Api

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(ReplaceMode ? userConfig.GetText("U9015") : ConnHandler?.Application.Name)" Show="@Display" Size=PopupSize.XLarge OnClose="Close">
    <Body>
        @if (Display)
        {
            <EditConn Display="true" ConnHandler="ConnHandler" PopupMode="true"/>
        }
    </Body>
    <Footer>
        @if(ReplaceMode)
        {
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        }
        else
        {
            <button type="button" class="btn btn-sm btn-primary" @onclick="Close">@(userConfig.GetText("ok"))</button>
        }
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public ModellingConnectionHandler ConnHandler { get; set; }

    [Parameter]
    public bool ReplaceMode { get; set; } = false;

    [Parameter]
    public Func<Task> Replace { get; set; } = DefaultInit.DoNothing;


    private async Task Save()
    {
        await Replace();
        Close();
    }

    private void Close()
    {
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
