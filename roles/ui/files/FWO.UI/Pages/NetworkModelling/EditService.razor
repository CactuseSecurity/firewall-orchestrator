@using FWO.Config.Api

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}, {Roles.Modeller}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if(Display && InitComplete && ServiceHandler != null)
{
    <PopUp Title="@(ServiceHandler.AddMode ? userConfig.GetText("add_service") : userConfig.GetText("edit_service"))" Size=PopupSize.Large Show="@Display" OnClose="Cancel">
        <Body>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                <input type="text" class="col-sm-8" @bind="ServiceHandler.ActService.Name" />
            </div>
            <div class="form-group row mt-2">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("protocol"))*:</label>
                <div class="col-sm-3">
                    <Dropdown ElementType="NetworkProtocol" @bind-SelectedElement="ServiceHandler.ActService.Protocol" ElementToString="@(p => p.Name)" Elements="ipProtos" Nullable="false">
                        <ElementTemplate Context="proto">
                            @proto.Name
                        </ElementTemplate>
                    </Dropdown>
                </div>
                @if(!(bool)ServiceHandler.ActService.Protocol?.Name.ToLower().StartsWith("esp"))
                {
                    <div class="form-group row col-sm-6">
                        <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                        <input type="number" min="1" max="65535" class="col-sm-4" @bind="ServiceHandler.ActService.Port" />
                        <label class="col-sm-1 col-form-label col-form-label-sm"> - </label>
                        <input type="number" min="1" max="65535" class=" col-sm-4" @bind="ServiceHandler.ActService.PortEnd" />
                    </div>
                }
            </div>
        </Body>
        <Footer>
            <div class="btn-group">
                @if(ServiceHandler.IsOwner)
                {
                    <AuthorizeView Roles="@(AsAdmin? Roles.Admin : Roles.Modeller)">
                        <Authorized>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="Save">@(userConfig.GetText("save"))</button>
                        </Authorized>
                        <NotAuthorized>
                            <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("save"))</button>
                        </NotAuthorized> 
                    </AuthorizeView>
                }
                else
                {
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("save"))</button>
                }
                <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>
    <InProgress Display="!InitComplete"/>
}


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public ModellingServiceHandler? ServiceHandler { get; set; }

    [Parameter]
    public bool AsAdmin { get; set; } = false;

    [Parameter]
    public Func<Task> RefreshParent { get; set; } = DefaultInit.DoNothing;


    private List<NetworkProtocol> ipProtos = new ();
    private bool InitComplete = false;
    private bool firstTry = true;
    private ModellingService unchangedService = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            List<IpProtocol> ipProtosOrig = await apiConnection.SendQueryAsync<List<IpProtocol>>(FWO.Api.Client.Queries.StmQueries.getIpProtocols);
            ipProtos = CustomSort(ipProtosOrig);
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override void OnParametersSet()
    {
        if(Display && firstTry && ServiceHandler != null)
        {
            try
            {
                firstTry = false;
                unchangedService = new(ServiceHandler.ActService);
                if(ServiceHandler.AddMode && (ServiceHandler.ActService.Protocol == null || ServiceHandler.ActService.Protocol.Id == 0) && ipProtos.Count > 0)
                {
                    ServiceHandler.ActService.Protocol = ipProtos.First();
                }
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
            }
        }
    }

    private async Task Save()
    {
        if(await ServiceHandler.Save())
        {
            if(unchangedService.Name != ServiceHandler.ActService.Name
                || unchangedService.Port != ServiceHandler.ActService.Port
                || unchangedService.PortEnd != ServiceHandler.ActService.PortEnd
                || unchangedService.ProtoId != ServiceHandler.ActService.ProtoId)
            {
                await RefreshParent();
            }
            unchangedService = new(ServiceHandler.ActService);
            Close();
        }
    }

    private void Cancel()
    {
        ServiceHandler?.Reset();
        Close();
    }

    private void Close()
    {
        firstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }

    private List<NetworkProtocol> CustomSort(List<IpProtocol> ListIn)
    {
        List<NetworkProtocol> ListOut = new List<NetworkProtocol>();
        IpProtocol? tcp = ListIn.Find(x => x.Name.ToLower() == "tcp");
        if(tcp != null)
        {
            ListOut.Add(new NetworkProtocol(tcp));
            ListIn.Remove(tcp);
        }
        IpProtocol? udp = ListIn.Find(x => x.Name.ToLower() == "udp");
        if(udp != null)
        {
            ListOut.Add(new NetworkProtocol(udp));
            ListIn.Remove(udp);
        }
        IpProtocol? icmp = ListIn.Find(x => x.Name.ToLower() == "icmp");
        if(icmp != null)
        {
            ListOut.Add(new NetworkProtocol(icmp));
            ListIn.Remove(icmp);
        }
        IpProtocol? esp = ListIn.Find(x => x.Name.ToLower() == "esp");
        if(esp != null)
        {
            ListOut.Add(new NetworkProtocol(esp));
            ListIn.Remove(esp);
        }
        if(!userConfig.ReducedProtocolSet)
        {
            foreach(var proto in ListIn.OrderBy(x => x.Name).ToList())
            {
                if (proto.Name.ToLower() != "unassigned")
                {
                    ListOut.Add(new NetworkProtocol(proto));
                }
            }
        }
        return ListOut;
    }
}
