@using FWO.Data.Workflow
@using FWO.Middleware.Client
@using FWO.ExternalSystems
@using FWO.Ui.Display
@using RestSharp
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization

@implements IDisposable

@page "/networkmodelling/{appId?}/{connId?}"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Modeller}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject MiddlewareClient middlewareClient
@inject NavigationManager NavigationManager
@inject GlobalConfig globalConfig

@if (InitDone)
{
    @if (!appHandler?.EditConnMode ?? true)
    {
        @if(appHandler != null && appHandler.OverviewConnHandler != null && appSelected)
        {
            <EditConnLeftSide @bind-Width="sidebarLeftWidth" @bind-ConnHandler="appHandler.OverviewConnHandler" OverviewMode="true"/>
            <RequestFwChangePopup @bind-Display="showFwChange" SelectedApp="@selectedApp" Connections="appHandler.GetConnectionsToRequest()"
                RefreshParent="SubscribeAndSetStatusFromTicket" ChangeStatus="@ChangeStatus" LastRequestDate="@LastRequestDate"/>
            <RequestRecertPopup @bind-Display="showRecert" AppHandler="@appHandler" RefreshParent="UpdateRecertStatus"/>
        }
        <div style="margin-left: @($"{sidebarLeftWidth + 10}px");">
            <div class="input-group">
                <h3>@(userConfig.GetText("network_modelling"))</h3>
                <HelpLink Page="modelling" />
            </div>
            <hr />
            <div class="form-group row">
                <div class="col-sm-4">
                    <SelectOwner SelectedOwner="selectedApp" SelectedOwnerChanged="ReInitApp" Apps="apps" />
                </div>
                <div class="col-sm-6">
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-primary" @onclick="Report">
                            @(DisplayService.DisplayButton(userConfig, "generate_report", Icons.GenerateReport))
                        </button>
                        <button type="button" class="btn btn-sm btn-dark" @onclick="ShowHistory">
                            @(DisplayService.DisplayButton(userConfig, "show_history", Icons.ShowHistory))
                        </button>
                        @if(userConfig.ModRolloutActive)
                        {
                            <AuthorizeView Roles="@($"{Roles.Modeller}, {Roles.Requester}, {Roles.Implementer}, {Roles.Admin}, {Roles.Auditor}")">
                                <Authorized>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="RequestFwChange">
                                        @(DisplayService.DisplayButtonWithTooltip(userConfig, "request_fw_change", Icons.RequestFwChange, UserConfig.PureLineStat(ChangeStatus)))
                                    </button>
                                </Authorized>
                                <NotAuthorized>
                                    <div data-toggle="tooltip" title="@(userConfig.PureLine("C9012"))">
                                        <button type="button" class="btn btn-sm btn-primary" disabled>
                                            @(DisplayService.DisplayButton(userConfig, "request_fw_change", Icons.RequestFwChange))
                                        </button>
                                    </div>
                                </NotAuthorized>
                            </AuthorizeView>
                        }
                        @if(userConfig.ModRecertActive && appSelected && selectedApp.ConnectionCount.Aggregate.Count > 0)
                        {
                            <AuthorizeView Roles="@($"{Roles.Modeller}, {Roles.Admin}, {Roles.Auditor}")">
                                <Authorized>
                                    <button type="button" class="btn btn-sm btn-success" @onclick="Recertify">
                                        @(DisplayService.DisplayButtonWithTooltip(userConfig, "recertify", Icons.Recertify, UserConfig.PureLineStat(RecertStatus)))
                                    </button>
                                </Authorized>
                                <NotAuthorized>
                                    <div data-toggle="tooltip" title="@(userConfig.PureLine("C9012"))">
                                        <button type="button" class="btn btn-sm btn-success" disabled>
                                            @(DisplayService.DisplayButton(userConfig, "recertify", Icons.Recertify))
                                        </button>
                                    </div>
                                </NotAuthorized>
                            </AuthorizeView>
                        }
                    </div>
                </div>
            </div>
            <hr />
            @if (appSelected)
            {
                <div class="form-group row m-2">
                    <h5>@(userConfig.GetText("comm_profile"))&nbsp;
                    @if (appActive)
                    {
                        <div class="btn-group ms-5">
                            <button type="button" class="btn btn-sm btn-dark" @onclick="ShareLink">
                                @(DisplayService.DisplayButton(userConfig, "share_link", Icons.Share))
                            </button>
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}")">
                                <Authorized>
                                    <button type="button" class="btn btn-sm btn-warning" @onclick="ManualAppServer">
                                        @(DisplayService.DisplayButton(userConfig, "edit_app_server", Icons.Edit, "", Icons.Host))
                                    </button>
                                </Authorized>
                            </AuthorizeView>
                            @if(userConfig.VarianceAnalysisRefresh)
                            {
                                <button type="button" class="btn btn-sm btn-primary" @onclick="RefreshState">
                                    @(DisplayService.DisplayButton(userConfig, "refresh_state", Icons.Refresh))
                                </button>
                            }
                        </div>
                    }
                    </h5>
                </div>
                <div class="mx-2 mt-2">
                    <TabSet WholeWidth="false" DarkMode="false" KeepPanelsAlive="false" @ref="appHandler!.Tabset">
                        <Tab Title="@(userConfig.GetText("connections"))" Position=0>
                            <button type="button" class="btn btn-sm btn-success" @onclick="appHandler!.AddConnection">
                                @(DisplayService.DisplayButton(userConfig, "add_connection", Icons.Add))
                            </button>                            
                            <ConnectionTable UseResponsiveTable="true" ShowPageSizeInput="true" Connections="@appHandler!.GetRegularConnections()" @bind-AppHandler="appHandler" AppActive="appActive" ShowModellingState="true" ShowProductionState="true" />
                        </Tab>
                        <Tab Title="@(userConfig.GetText("provided_interfaces"))" Position=1>
                            <div class="d-flex justify-content-between">
                                <div>
                                    <button type="button" class="btn btn-sm btn-success" @onclick="appHandler!.AddInterface">
                                        @(DisplayService.DisplayButton(userConfig, "add_interface", Icons.Add))
                                    </button>
                                </div>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}")">
                                    <Authorized>
                                        <div>
                                            <input id="cbx_show_rejected" type="checkbox" @bind="showRejected">
                                            <label for="cbx_show_rejected" class="col-form-label">@(userConfig.GetText("displayRejected"))</label>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                            <ConnectionTable UseResponsiveTable="true" ShowPageSizeInput="true" Connections="@appHandler!.GetInterfaces(showRejected)" @bind-AppHandler="appHandler" AppActive="appActive" ShowModellingState="true" />
                        </Tab>
                        @if (selectedApp.CommSvcPossible)
                        {
                            <Tab Title="@(userConfig.GetText("common_services"))" Position=2>
                                <button type="button" class="btn btn-sm btn-success"
                                    @onclick="appHandler!.AddCommonService">@(DisplayService.DisplayButton(userConfig, "add_common_service", Icons.Add))
                                </button>
                                <ConnectionTable UseResponsiveTable="true" ShowPageSizeInput="true" Connections="@appHandler!.GetCommonServices()" @bind-AppHandler="appHandler" AppActive="appActive" ShowModellingState="true" ShowProductionState="true" />
                            </Tab>
                        }
                    </TabSet>
                </div>
                <ConfirmDelete @bind-Display="appHandler!.DeleteConnMode"
                    PerformAction="async () => {await appHandler!.DeleteConnection(); appHandler!.RestoreTab(); StateHasChanged();}"
                    Title="@userConfig.GetText(appHandler!.ConnToDelete.IsInterface ? "delete_interface" : "delete_connection")"
                    DeleteMessage="@appHandler!.Message" DeleteAllowed="appHandler!.DeleteAllowed" AllowedRoles="@Roles.Modeller" />
                <DecommissionInterfacePopup @bind-Display="appHandler.DecommissionInterfaceMode" ConnHandler="appHandler.ConnHandler"
                    PossibleInterfaces="appHandler.GetInterfaces()" RefreshParent="async () => {await DefaultInit.DoNothing();}" />
                <InterfaceUsersPopup @bind-Display="appHandler.ShowUsingConnectionsMode" InterfaceName="@(appHandler.InterfaceName)" UsingConnections="appHandler.UsingConnections"/>
            }
        </div>
    }
    else if(appHandler != null)
    {
        <EditConn @bind-Display="appHandler.EditConnMode" ConnHandler="appHandler.ConnHandler" ClosingAction="PrepareRestore" />
    }
}
else
{
    <Loading/>
}
<ManualAppServer @bind-Display="manualAppServer" Application="@selectedApp" />
<ShowHistory @bind-Display="showHistory" Applications="apps" SelectedApp="selectedApp" />
<ShareLink @bind-Display="shareLink" Application="selectedApp" />
<InProgress Display="workInProgress"/>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public string? AppId { get; set; }

    [Parameter]
    public string? ConnId { get; set; }

    private bool tabSelected = false;
    private bool restoreTab = false;
    private ModellingConnection? lastConn;
    private ModellingAppHandler? appHandler;
    private List<FwoOwner> apps = new();
    private FwoOwner selectedApp = new();
    private bool appSelected = false;
    private bool manualAppServer = false;
    private bool showRejected = false;

    private bool appActive = false;
    private bool showHistory = false;
    private bool shareLink = false;
    private bool showFwChange = false;
    private bool showRecert = false;
    private int sidebarLeftWidth = GlobalConst.kGlobLibraryWidth;
    private bool firstInit = true;
    private string ChangeStatus = "";
    private string LastRequestDate = "";
    private string RecertStatus = "";
    private GraphQlApiSubscription<List<WfTicket>>? actTicketSubscription;
    private ExtStateHandler? extStateHandler;
    private WfStateDict states = new();
    private bool firstErrorMessage = true;
    private bool workInProgress = false;
    private bool InitDone = false;


    protected override async Task OnInitializedAsync()
    {
        // if use has modeller role, choose it before all others for this menu
        apiConnection.SetBestRole(authenticationStateTask!.Result.User, [ Roles.Modeller, Roles.Admin, Roles.Auditor ]);
        extStateHandler = new(apiConnection);
        await states.Init(apiConnection);
        await InitAppList();
        InitDone = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (appSelected && appHandler != null)
        {
            if (!tabSelected)
            {
                tabSelected = true;
                appHandler.InitActiveTab();
            }
            else if (restoreTab)
            {
                restoreTab = false;
                appHandler.RestoreTab(lastConn);
            }
        }
    }

    private bool PrepareRestore()
    {
        lastConn = appHandler?.ConnHandler?.ActConn;
        restoreTab = true;
        sidebarLeftWidth = appHandler?.OverviewConnHandler?.LastWidth ?? GlobalConst.kGlobLibraryWidth;
        return true;
    }

    private async Task InitAppList()
    {
        try
        {
            apps = await ModellingHandlerBase.GetOwnApps(authenticationStateTask!, userConfig, apiConnection, DisplayMessageInUi,
            true);
            if (apps.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("fetch_data"), userConfig.GetText("E9001"), true);
            }
            else
            {
                if (AppId != null)
                {
                    HandleLink();
                }
                else
                {
                    selectedApp = apps.First();
                }
                await InitApp(selectedApp);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private void HandleLink()
    {
        FwoOwner? existingApp = apps.FirstOrDefault(a => a.ExtAppId == AppId);
        if (existingApp != null)
        {
            selectedApp = existingApp;
        }
        else
        {
            selectedApp = apps.First();
        }
    }

    private async Task ReInitApp(FwoOwner newApp)
    {
        if(newApp.Id != selectedApp.Id)
        {
            await InitApp(newApp);
        }
    }

    private async Task InitApp(FwoOwner newApp)
    {
        workInProgress = true;
        try
        {
            appSelected = false;
            selectedApp = newApp;
            bool isOwner = authenticationStateTask!.Result.User.IsInRole(Roles.Modeller) &&
                userConfig.User.Ownerships.Contains(selectedApp.Id);
            if (isOwner)
            {
                apiConnection.SetRole(Roles.Modeller);
            }
            else
            {
                apiConnection.SetBestRole(authenticationStateTask!.Result.User, new List<string> { Roles.Admin, Roles.Auditor, Roles.Modeller });
            }
            appHandler = new ModellingAppHandler(apiConnection, userConfig, selectedApp, DisplayMessageInUi, isOwner)
            {
                ActWidth = sidebarLeftWidth,
                StartCollapsed = firstInit
            };
            firstInit = false;
            await appHandler.Init();
            appActive = selectedApp.Active;
            appSelected = true;
            tabSelected = false;
            await SetChangeStatus();
            SetRecertStatus();
            await InitConn();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
        workInProgress = false;
    }

    private async Task InitConn()
    {
        if (appHandler != null && ConnId != null && int.TryParse(ConnId, out int connectionId))
        {
            ModellingConnection? selectedConn = appHandler?.Connections.FirstOrDefault(c => c.Id == connectionId);
            if (selectedConn != null)
            {
                tabSelected = true;
                appHandler?.InitActiveTab(selectedConn);
                await appHandler!.EditConn(selectedConn);
            }
        }
    }

    private void ManualAppServer()
    {
        manualAppServer = true;
    }

    private void ShareLink()
    {
        shareLink = true;
    }

    private void ShowHistory()
    {
        showHistory = true;
    }

    private void Report()
    {
        NavigationManager.NavigateTo($"/{PageName.ReportGeneration}/{selectedApp.Id}");
    }

    private void RequestFwChange()
    {
        showFwChange = true;
    }

    private void Recertify()
    {
        showRecert = true;
    }

    private async Task RefreshState()
    {
        if (appHandler != null)
        {
            try
            {
                workInProgress = true;
                await appHandler.AnalyseStatus(appHandler.Connections);
                workInProgress = false;
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("refresh_state"), "", true);
            }
        }
    }

    private async Task SetChangeStatus()
    {
        if(userConfig.ModRolloutActive)
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Modeller, Roles.Admin, Roles.Auditor ]);
            List<TicketId> ticketIds = await apiConnection.SendQueryAsync<List<TicketId>>(ExtRequestQueries.getLatestTicketIds, new{ownerId = selectedApp.Id});
            if(ticketIds.Count == 0)
            {
                ChangeStatus = userConfig.GetText("never_requested");
                LastRequestDate = "-";
            }
            else
            {
                WfTicket? intTicket = await apiConnection.SendQueryAsync<WfTicket>(RequestQueries.getTicketById, new { ticketIds.First().Id });
                apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Modeller, Roles.Admin, Roles.Auditor ]);
                if(intTicket != null)
                {
                    await SubscribeAndSetStatusFromTicket(intTicket);
                }
            }
        }
    }

    private async Task SubscribeAndSetStatusFromTicket(WfTicket intTicket)
    {
        await SetStatusFromTicket(intTicket);
        actTicketSubscription = apiConnection.GetSubscription<List<WfTicket>>(HandleSubscriptionError, OnTicketUpdate, RequestQueries.subscribeTicketStateChanges, new {intTicket.Id});
    }

    private async Task SetStatusFromTicket(WfTicket intTicket)
    {
        try
        {
            if(extStateHandler!= null && intTicket.Id > 0)
            {
                LastRequestDate = intTicket.CreationDate.Date.ToString("dd.MM.yyyy");
                if(extStateHandler.IsDone(intTicket.StateId))
                {
                    ChangeStatus = $"{userConfig.GetText("last_successful")}: {intTicket.CreationDate.ToString("yyyy-MM-dd HH:mm:ss")}, {userConfig.GetText("implemented")}: {intTicket.CompletionDate?.ToString("yyyy-MM-dd HH:mm:ss")}, {intTicket.Requester?.Name}";
                }
                else
                {
                    string? lastResponse = await GetLastResponse(intTicket);
                    if(extStateHandler.IsInProgress(intTicket.StateId))
                    {
                        if(lastResponse != null && IsTempError(lastResponse))
                        {
                            string errorText = userConfig.GetText("temp_error_extended") + ": " + lastResponse;
                            ChangeStatus = $"{userConfig.GetText("temp_error")}: {errorText}";
                        }
                        else
                        {
                            ChangeStatus = userConfig.GetText("in_process");
                        }
                    }
                    else
                    {
                        if(lastResponse != null)
                        {
                            string errorText = states.Name[intTicket.StateId] + ": " + lastResponse;
                            ChangeStatus = $"{userConfig.GetText("implementation_error")}: {errorText}";
                        }
                        else
                        {
                            ChangeStatus = userConfig.GetText("implementation_error");
                        }
                        await InvokeAsync(StateHasChanged);
                        if(firstErrorMessage)
                        {
                            firstErrorMessage = false;
                            DisplayMessageInUi(null, userConfig.GetText("implementation_error"), userConfig.ModRolloutErrorText, true);
                        }
                    }
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("refresh_state"), "", true);
        }
    }

    private async Task<string?> GetLastResponse(WfTicket intTicket)
    {
        try
        {
            List<ExternalRequest> lastRequests = await apiConnection.SendQueryAsync<List<ExternalRequest>>(ExtRequestQueries.getLastRequest, new { ticketId = intTicket.Id });
            if (lastRequests != null && lastRequests.Count > 0)
            {
                bool shortened = false;
                return (!string.IsNullOrEmpty(lastRequests.First().LastProcessingResponse) ? lastRequests.First().LastProcessingResponse : lastRequests.First().LastCreationResponse).SanitizeCommentOpt(ref shortened);
            }
        }
        catch (Exception exc)
        {
            Log.WriteError("Get Last Response", exc.Message);
        }
        return null;
    }
    
    private bool IsTempError(string lastResponse)
    {
        return lastResponse.Contains("ACCESS_DENIED_ERROR");
    }

    private async void HandleSubscriptionError(Exception exception)
    {
        await InvokeAsync(() => DisplayMessageInUi(exception, userConfig.GetText("ticket"), userConfig.GetText("update_subscription_error"), true));
    }

    public void Dispose()
    {
        actTicketSubscription?.Dispose();
    }

    private async void OnTicketUpdate(List<WfTicket> tickets)
    {
        if(tickets.Count > 0)
        {
            await SetStatusFromTicket(tickets.First());
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool UpdateRecertStatus(FwoOwner owner)
    {
        selectedApp.LastRecertified = owner.LastRecertified;
        selectedApp.LastRecertifierDn= owner.LastRecertifierDn;
        selectedApp.NextRecertDate= owner.NextRecertDate;
        SetRecertStatus();
        return true;
    }

    private void SetRecertStatus()
    {
        if(userConfig.ModRecertActive)
        {
            RecertStatus = $"{userConfig.GetText("last_recertified")}: {selectedApp.LastRecertified?.ToString("dd.MM.yyyy") ?? "-"}, " +
                $"{userConfig.GetText("last_recertifier")}: {new DistName(selectedApp.LastRecertifierDn).UserName}, " +
                $"{userConfig.GetText("next_recertification")}: {selectedApp.NextRecertDate?.ToString("dd.MM.yyyy") ?? "-"}";
        }
    }
}
