@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Ui.Display
@using FWO.Tufin.SecureChange
@using FWO.Rest.Client
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net
@using RestSharp

@page "/networkmodelling/{appId?}/{connId?}"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Modeller}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject NavigationManager NavigationManager
@inject GlobalConfig globalConfig

@if (!appHandler?.EditConnMode ?? true)
{
    @if(appHandler != null && appHandler.overviewConnHandler != null && appSelected)
    {
        <EditConnLeftSide @bind-Width="sidebarLeftWidth" @bind-ConnHandler="appHandler.overviewConnHandler" OverviewMode="true"/>
    }
    <div style="margin-left: @($"{sidebarLeftWidth + 10}px");">
        <div class="input-group">
            <h3>@(userConfig.GetText("network_modelling"))</h3>
            <HelpLink Page="modelling" />
        </div>
        <hr />
        <div class="form-group row">
            <div class="col-sm-4">
                <SelectOwner SelectedOwner="selectedApp" SelectedOwnerChanged="InitApp" Apps="apps" />
            </div>
            <div class="col-sm-6">
                <div class="btn-group">
                    <button type="button" class="ms-5 btn btn-sm btn-primary" @onclick="Report">
                        @(userConfig.GetText("generate_report"))
                    </button>
                    <button type="button" class="btn btn-sm btn-dark" @onclick="ShowHistory">
                        @(userConfig.GetText("show_history"))
                    </button>
                    <button type="button" class="ms-5 btn btn-sm btn-primary" @onclick="RequestFwChange">
                        @(userConfig.GetText("request_fw_change"))
                    </button>
                </div>
            </div>
        </div>
        <hr />
        @if (appSelected)
        {
            <div class="form-group row m-2">
                <h5>@(userConfig.GetText("comm_profile"))&nbsp;
                @if (appActive)
                {
                    <div class="btn-group ms-5">
                        <button type="button" class="btn btn-sm btn-dark" @onclick="ShareLink">
                            @(appHandler.DisplayButton("share_link", Icons.Share))
                        </button>&nbsp;
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}")">
                            <Authorized>
                                <button type="button" class="btn btn-sm btn-dark" @onclick="ManualAppServer">
                                    @(appHandler.DisplayButton("edit_app_server", Icons.Edit, "app_server"))
                                </button>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                }
                </h5>
            </div>
            <div class="m-2 vheight75">
                <TabSet WholeWidth="false" DarkMode="false" KeepPanelsAlive="false" @ref="appHandler.tabset">
                    <Tab Title="@(userConfig.GetText("connections"))" Position=0>
                        <button type="button" class="btn btn-sm btn-success mb-2" @onclick="appHandler.AddConnection">
                            @(appHandler.DisplayButton("add_connection", Icons.Add))
                        </button>
                        <ConnectionTable Connections="@appHandler.GetRegularConnections()" @bind-AppHandler="appHandler" AppActive="appActive" />
                    </Tab>
                    <Tab Title="@(userConfig.GetText("provided_interfaces"))" Position=1>
                        <div class="d-flex justify-content-between">
                            <div>
                                <button type="button" class="btn btn-sm btn-success mb-2" @onclick="appHandler.AddInterface">
                                    @(appHandler.DisplayButton("add_interface", Icons.Add))
                                </button>
                            </div>
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}")">
                                <Authorized>
                                    <div>
                                        <input type="checkbox" @bind="showRejected">
                                        <label class="col-form-label">@(userConfig.GetText("displayRejected")):</label>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                        <ConnectionTable Connections="@appHandler.GetInterfaces(showRejected)" @bind-AppHandler="appHandler" AppActive="appActive" />
                    </Tab>
                    @if (selectedApp.CommSvcPossible)
                    {
                        <Tab Title="@(userConfig.GetText("common_services"))" Position=2>
                            <button type="button" class="btn btn-sm btn-success mb-2"
                                @onclick="appHandler.AddCommonService">@(appHandler.DisplayButton("add_common_service", Icons.Add))
                            </button>
                            <ConnectionTable Connections="@appHandler.GetCommonServices()" @bind-AppHandler="appHandler" AppActive="appActive" />
                        </Tab>
                    }
                </TabSet>
            </div>
            <ConfirmDelete @bind-Display="appHandler.DeleteConnMode"
                PerformAction="async () => {await appHandler.DeleteConnection(); appHandler.RestoreTab(); StateHasChanged();}"
                Title="@userConfig.GetText(appHandler.ConnToDelete.IsInterface ? "delete_interface" : "delete_connection")"
                DeleteMessage="@appHandler.Message" DeleteAllowed="appHandler.DeleteAllowed" AllowedRoles="@Roles.Modeller" />
        }
    </div>
}
else
{
    <EditConn @bind-Display="appHandler.EditConnMode" ConnHandler="appHandler.connHandler" ClosingAction="PrepareRestore" />
}
<ManualAppServer @bind-Display="manualAppServer" Application="@selectedApp" />
<ShowHistory @bind-Display="showHistory" Applications="apps" SelectedApp="selectedApp" />
<ShareLink @bind-Display="shareLink" Application="selectedApp" />

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public string? AppId { get; set; }

    [Parameter]
    public string? ConnId { get; set; }

    private bool tabSelected = false;
    private bool restoreTab = false;
    private ModellingConnection? lastConn;
    private ModellingAppHandler? appHandler;
    private List<FwoOwner> apps = new();
    private FwoOwner selectedApp = new();
    private bool appSelected = false;
    private bool manualAppServer = false;
    private bool showRejected = false;

    private bool appActive = false;
    private bool showHistory = false;
    private bool shareLink = false;
    private int sidebarLeftWidth = GlobalConst.kGlobLibraryWidth;
    private bool firstInit = true;
    
    protected override async Task OnInitializedAsync()
    {
        // if use has modeller role, choose it before all others for this menu
        apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Modeller, Roles.Admin, Roles.Auditor ]);
        await InitAppList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (appSelected && appHandler != null)
        {
            if (!tabSelected)
            {
                tabSelected = true;
                appHandler.InitActiveTab();
            }
            else if (restoreTab)
            {
                restoreTab = false;
                appHandler.RestoreTab(lastConn);
            }
        }
    }

    private bool PrepareRestore()
    {
        lastConn = appHandler?.connHandler?.ActConn;
        restoreTab = true;
        sidebarLeftWidth = appHandler?.overviewConnHandler?.LastWidth ?? GlobalConst.kGlobLibraryWidth;
        return true;
    }

    private async Task InitAppList()
    {
        try
        {
            apps = await ModellingHandlerBase.GetOwnApps(authenticationStateTask, userConfig, apiConnection, DisplayMessageInUi,
            true);
            if (apps.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("fetch_data"), userConfig.GetText("E9001"), true);
            }
            else
            {
                if (AppId != null)
                {
                    await HandleLink();
                }
                else
                {
                    selectedApp = apps.First();
                }
                await InitApp(selectedApp);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private async Task HandleLink()
    {
        FwoOwner? existingApp = apps.FirstOrDefault(a => a.ExtAppId == AppId);
        if (existingApp != null)
        {
            selectedApp = existingApp;
        }
        else
        {
            selectedApp = apps.First();
        }
    }

    private async Task InitApp(FwoOwner newApp)
    {
        try
        {
            appSelected = false;
            selectedApp = newApp;
            bool isOwner = authenticationStateTask!.Result.User.IsInRole(Roles.Modeller) &&
            userConfig.User.Ownerships.Contains(selectedApp.Id);
            appHandler = new ModellingAppHandler(apiConnection, userConfig, selectedApp, DisplayMessageInUi, isOwner)
            {
                ActWidth = sidebarLeftWidth,
                StartCollapsed = firstInit
            };
            firstInit = false;
            await appHandler.Init();
            appActive = selectedApp.Active;
            if (isOwner)
            {
                apiConnection.SetRole(Roles.Modeller);
            }
            else
            {
                apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Admin, Roles.Auditor });
            }
            appSelected = true;
            tabSelected = false;
            await InitConn();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private async Task InitConn()
    {
        if (ConnId != null && int.TryParse(ConnId, out int connectionId))
        {
            ModellingConnection? selectedConn = appHandler?.Connections.FirstOrDefault(c => c.Id == connectionId);
            if (selectedConn != null)
            {
                tabSelected = true;
                appHandler?.InitActiveTab(selectedConn);
                await appHandler?.EditConn(selectedConn);
            }
        }
    }

    private void ManualAppServer()
    {
        manualAppServer = true;
    }

    private void ShareLink()
    {
        shareLink = true;
    }

    private void ShowHistory()
    {
        showHistory = true;
    }

    private async Task Report()
    {
        NavigationManager.NavigateTo($"/{PageName.ReportGeneration}/{selectedApp.Id}");
    }

    private async Task RequestFwChange()
    {

        DisplayMessageInUi(null, "Coming soon", "...", true);
        return;

        // read external ticketing system information from config
        List<ExternalTicketSystem> extTicketSystems = [];

        try
        {
            extTicketSystems = System.Text.Json.JsonSerializer.Deserialize<List<ExternalTicketSystem>>(userConfig.ExtTicketSystems) ?? new();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }

        // build ticket
        SCTicket ticket = new(appHandler.Connections, "test ticket 1", TicketPriority.High);

        // create external ticket
        if (extTicketSystems.Count() > 0)
        {
            try
            {
                RestResponse<int> ticketIdResponse = await ticket.CreateTicketInTufin(extTicketSystems.First());
                if (ticketIdResponse.StatusCode != HttpStatusCode.OK)
                {
                    DisplayMessageInUi(null, userConfig.GetText("ext_ticket_fail"), "Error Message: " + ticketIdResponse.StatusDescription + ", " + ticketIdResponse.ErrorMessage, true);
                }
                else
                {
                    DisplayMessageInUi(null, userConfig.GetText("ext_ticket_success"), userConfig.GetText("ext_ticket_number") + ": " + ticketIdResponse.Data, true);                    
                }
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("ext_ticket_fail"), userConfig.GetText("E9101"), false);
            }
        }

        // TODO: 
        // create object tickets
        // prevent Admins from requesting tickets
        // hide button fore requesting tickets?
        // store ticketNumber 
        // in MW: create scheduler to check each ticket if they have been closed
        // ceate internal ticket for each ext ticket
        // mark closed tickets as "implemented" in internal tickets

    }
}
