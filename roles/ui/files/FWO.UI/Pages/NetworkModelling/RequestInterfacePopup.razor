@using FWO.Config.Api
@using FWO.Middleware.Client

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject MiddlewareClient middlewareClient


<PopUp Title="@(userConfig.GetText("request_interface"))" Show="@Display" Size=PopupSize.Large OnClose="Close">
    <Body>
        @if (Display)
        {
            <div data-toggle="tooltip" title="@(userConfig.PureLine("C9005"))">
                <SelectOwner @bind-SelectedOwner="SelectedOwner" Apps="Apps" />
            </div>
            <div class="row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("C9006"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("as_source")):</label>
                <div class="col-sm-1">
                    <input type="checkbox" class="w-100" @bind="AsSource">
                </div>
            </div>
            <div class="row mt-2 me-auto">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                <input type="text" class="col-sm-8" @bind="InterfaceName" />
            </div>
            <div class="row mt-2 me-auto">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("reason"))*:</label>
                <textarea rows="5" type="text" class="col-sm-9" @bind="Reason" />
            </div>
        }
    </Body>
    <Footer>
        <AuthorizeView Roles="@Roles.Modeller">
            <Authorized>
                @if(SelectedOwner.Id > 0 && !WorkInProgress)
                {
                    <button type="button" class="btn btn-sm btn-primary" @onclick="SendRequest">@(userConfig.GetText("request_interface"))</button>
                }
                else
                {
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("request_interface"))</button>
                }
            </Authorized>
            <NotAuthorized>
                <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("request_interface"))</button>
            </NotAuthorized> 
        </AuthorizeView>
        <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>
<InProgress Display="WorkInProgress"/>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public List<FwoOwner> Apps { get; set; } = new ();

    [Parameter]
    public FwoOwner RequestingOwner { get; set; } = new ();

    [Parameter]
    public Func<Task> RefreshParent { get; set; } = DefaultInit.DoNothing;

    private FwoOwner SelectedOwner { get; set; } = new ();
    private bool AsSource { get; set; } = false;
    private string InterfaceName { get; set; } = "";
    private string Reason { get; set; } = "";
    private bool WorkInProgress = false;


    protected override async Task OnInitializedAsync()
    {
        if(Apps.Count > 0)
        {
            SelectedOwner = Apps.First();
        }
        InterfaceName = userConfig.ModReqInterfaceName;
    }

    private async Task SendRequest()
    {
        WorkInProgress = true;
        try
        {
            if(CheckInput())
            {
                apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Requester, Roles.Admin });
                TicketCreator ticketCreator = new (apiConnection, userConfig, authenticationStateTask!.Result.User, middlewareClient);
                long ticketId = await ticketCreator.CreateRequestNewInterfaceTicket(SelectedOwner, RequestingOwner, Reason);
                apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Modeller });

                if(ticketId > 0)
                {
                    ModellingConnectionHandler ConnHandler = new (apiConnection, userConfig, SelectedOwner, 
                        new(), new(), true, false, DisplayMessageInUi, DefaultInit.DoNothing, false);
                    await ConnHandler.PartialInit();
                    ConnHandler.RequesterId = RequestingOwner.Id;
                    long connId = await ConnHandler.CreateNewRequestedInterface(ticketId, AsSource, InterfaceName, Reason);
                    await SendEmail(connId);
                    
                    apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Requester, Roles.Admin });
                    await ticketCreator.SetInterfaceId(ticketId, connId, SelectedOwner);
                    apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Modeller });
                }
                await RefreshParent();
                Close();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_new_request"), "", true);
        }
        WorkInProgress = false;
    }

    private bool CheckInput()
    {
        if(Reason == "" || InterfaceName == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("add_new_request"), userConfig.GetText("E5102"), true);
            return false;
        }
        if(SelectedOwner.Id == RequestingOwner.Id)
        {
            DisplayMessageInUi(null, userConfig.GetText("add_new_request"), userConfig.GetText("E9012"), true);
            return false;
        }
        return true;
    }

    private async Task SendEmail(long connId)
    {
        try
        {
            EmailHelper emailHelper = new(apiConnection, middlewareClient, userConfig, DisplayMessageInUi);
            await emailHelper.Init();
            string interfaceUrl = $"{userConfig.UiHostName}/networkmodelling/{SelectedOwner.ExtAppId}/{connId}";
            string subject = userConfig.ModReqEmailSubject;
            string body = $"{RequestingOwner.Name} {userConfig.ModReqEmailBody} {SelectedOwner.Name} <br>" +
                $"<a target=\"_blank\" href=\"{interfaceUrl}\">{userConfig.GetText("interface")}: {InterfaceName}</a><br>"; 
            if(await emailHelper.SendEmailToOwnerResponsibles(SelectedOwner, subject, body))
            {
                DisplayMessageInUi(null, userConfig.GetText("send_email"), userConfig.GetText("U9011"), false);
            }
            else
            {
                DisplayMessageInUi(null, userConfig.GetText("send_email"), userConfig.GetText("E9011"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("send_email"), "", true);
        }
    }

    private void Close()
    {
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
