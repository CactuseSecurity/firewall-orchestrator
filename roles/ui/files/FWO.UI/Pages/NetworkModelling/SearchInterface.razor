@using FWO.Config.Api
@using FWO.Services

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}, {Roles.Modeller}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<PopUp PageSize="PageSize" Title="@(userConfig.GetText("search_interface"))" Size="PopupSize.FullScreenWidth" Show="@Display" OnClose="Close">
    <Body>
        @if (Display && InitComplete)
        {
            <ConnectionTable  PageSizeCallback="UpdatePageSize" ShowPageSizeInput="true" ShowSelectionColumn="true" SelectionType="SelectionType.Multiple" Connections="@selectableInterfaces" SelectInterfaceView="true" ShowAppName="true" @bind-SelectedConns="SelectedInterfaces" />
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (SelectedInterfaces.Count > 0)
            {
                <AuthorizeView Roles="@Roles.Modeller">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-success" @onclick="SelectInterface">@(userConfig.GetText("select"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-success" disabled>@(userConfig.GetText("select"))</button>
                    </NotAuthorized>
                </AuthorizeView>
            }
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public List<ModellingConnection>? PreselectedInterfaces { get; set; }

    [Parameter]
    public EventCallback<List<ModellingConnection>> PreselectedInterfacesChanged { get; set; }

    // [Parameter]
    // public Func <ModellingConnection, bool>? SelectAction { get; set; }

    [Parameter]
    public FwoOwner Application { get; set; } = new();

    private List<ModellingConnection> selectableInterfaces { get; set; } = new();
    private List<ModellingConnection> allPublishedInterfaces { get; set; } = new();
    private List<ModellingConnection> SelectedInterfaces { get; set; } = [];
    private bool FirstTry = true;
    private bool InitComplete = false;

    private int PageSize { get; set; }

    private void UpdatePageSize(int pageSize)
    {
        PageSize = pageSize;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Display && FirstTry)
        {
            try
            {
                FirstTry = false;
                allPublishedInterfaces = await apiConnection.SendQueryAsync<List<ModellingConnection>>(ModellingQueries.getPublishedInterfaces);
                RefreshSelectionList();
                InitComplete = true;
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
            }
        }
    }

    private void RefreshSelectionList()
    {
        selectableInterfaces = new();
        if (allPublishedInterfaces != null && allPublishedInterfaces.Count > 0)
        {
            selectableInterfaces = PreselectedInterfaces != null && PreselectedInterfaces.Count > 0 ?
                allPublishedInterfaces.Where(i => PreselectedInterfaces.FirstOrDefault(sel => sel.Id == i.Id) == null)?.ToList() ?? new() : allPublishedInterfaces;
        }
    }

    private async Task SelectInterface()
    {
        await AddInterfaces();
        // SelectAction(selectedInterface);
        Close();
    }

    private async Task AddInterfaces()
    {
        try
        {
            if (SelectedInterfaces.Count > 0)
            {
                if (PreselectedInterfaces == null)
                {
                    PreselectedInterfaces = new();
                }

                foreach (ModellingConnection @interface in SelectedInterfaces)
                {
                    var Variables = new
                    {
                        appId = Application.Id,
                        connectionId = @interface.Id
                    };

                    await apiConnection.SendQueryAsync<NewReturning>(ModellingQueries.addSelectedConnection, Variables);
                    PreselectedInterfaces.Add(@interface ?? throw new Exception("No Interface selected."));
                }

                RefreshSelectionList();
                await PreselectedInterfacesChanged.InvokeAsync(PreselectedInterfaces);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("search_interface"), "", true);
        }
    }

    private void Close()
    {
        SelectedInterfaces = [];
        FirstTry = true;
        InitComplete = false;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
