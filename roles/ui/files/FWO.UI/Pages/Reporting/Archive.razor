@using System.Text
@using FWO.Config.Api

@inject APIConnection apiConnection
@inject UserConfig userConfig

@page "/archive"

<h3>@(userConfig.GetText("archive"))</h3>

<Table TableClass="table table-bordered table-sm table-responsive" TableItem="ReportFile" Items="archivedReports" PageSize="0">
    <Column TableItem="ReportFile" Title="@(userConfig.GetText("action"))">
        <Template>
            <div class="btn-group">
                <button class="btn btn-sm btn-info" @onclick="async () => { await GetGeneratedReportContent(context.Id); ShowDownloadReportFileDialog = true; }">@(userConfig.GetText("download"))</button>
                @if (context.Owner.DbId == userConfig.User.DbId || authenticationStateTask.Result.User.IsInRole("admin"))
                {
                    <button class="btn btn-sm btn-danger" @onclick="() => { reportFileContext = context; ShowDeleteReportFileDialog = true; }">@(userConfig.GetText("delete"))</button>
                }
            </div>
        </Template>
    </Column>
    <Column TableItem="ReportFile" Title="@(userConfig.GetText("name"))" Field="@(reportFile => reportFile.Name)" />
    <Column TableItem="ReportFile" Title="@(userConfig.GetText("generation_date"))" Field="@(reportFile => reportFile.GenerationDateStart)" />
    @*<Column TableItem="ReportFile" Title="Output Format" Field="@(reportFile => reportFile.Type)" /> TODO: ADD TYPE*@
    @*<Column TableItem="ReportFile" Title="Template" Field="@(reportFile => reportFile.Template.Name)" /> TODO: Template (is not always defined - report export)*@
    <Column TableItem="ReportFile" Title="@(userConfig.GetText("owner"))" Field="@(reportFile => reportFile.Owner.Name)" />
</Table>

<PopUp Show="ShowDeleteReportFileDialog" Title="@(userConfig.GetText("generated_report"))">
    <Body>
        <p>@(userConfig.GetText("U3002")) "@reportFileContext.Name" ?</p>
    </Body>
    <Footer>
        <button class="btn btn-sm btn-danger" @onclick="DeleteGeneratedReport">@(userConfig.GetText("delete"))</button>
        <button class="btn btn-sm btn-secondary" @onclick="() => ShowDeleteReportFileDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

<PopUp Show="ShowDownloadReportFileDialog" Title="@(userConfig.GetText("generated_report"))">
    <Body>
        <div class="d-flex flex-column align">
            @if (reportFileContext?.Csv != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(Convert.ToBase64String(Encoding.UTF8.GetBytes(reportFileContext.Csv)))"
                   target="_blank" download="@(reportFileContext.Name).@("csv")">@(userConfig.GetText("download_as_csv"))</a>
            }
            @if (reportFileContext?.Pdf != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(reportFileContext.Pdf)"
                   target="_blank" download="@(reportFileContext.Name).@("pdf")">@(userConfig.GetText("download_as_pdf"))</a>
            }
            @if (reportFileContext?.Html != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(Convert.ToBase64String(Encoding.UTF8.GetBytes(reportFileContext.Html)))"
                   target="_blank" download="@(reportFileContext.Name).@("html")">@(userConfig.GetText("download_as_html"))</a>
            }
            @if (reportFileContext?.Json != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(Convert.ToBase64String(Encoding.UTF8.GetBytes(reportFileContext.Json)))"
                   target="_blank" download="@(reportFileContext.Name).@("json")">@(userConfig.GetText("download_as_json"))</a>
            }
        </div>
    </Body>
    <Footer>
        <button class="btn btn-secondary" @onclick="() => ShowDownloadReportFileDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<ReportFile> archivedReports = new List<ReportFile>();

    private ReportFile reportFileContext;
    private bool ShowDeleteReportFileDialog = false;
    private bool ShowDownloadReportFileDialog = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            archivedReports = (await apiConnection.SendQueryAsync<ReportFile[]>(ReportQueries.getGeneratedReports)).ToList();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("archive_fetch"), "", true);
        }
    }

    private async Task GetGeneratedReportContent(int reportId)
    {
        try
        {
            var queryVariables = new
            {
                report_id = reportId
            };

            reportFileContext = (await apiConnection.SendQueryAsync<ReportFile[]>(ReportQueries.getGeneratedReport, queryVariables))[0];
        }
        catch (Exception exception)
        {
            Log.WriteError("Fetch downloads of generated report", "Unclassified error.", exception);
            DisplayMessageInUi(exception, userConfig.GetText("fetch_report"), "", false);
        }
    }

    private async Task DeleteGeneratedReport()
    {
        try
        {
            var queryVariables = new
            {
                report_id = reportFileContext.Id
            };

            await apiConnection.SendQueryAsync<object>(ReportQueries.deleteGeneratedReport, queryVariables);

            archivedReports.Remove(reportFileContext);

            ShowDeleteReportFileDialog = false;
        }
        catch (Exception exception)
        {
            Log.WriteError("Delete generated report", "Unclassified error.", exception);
            DisplayMessageInUi(exception, userConfig.GetText("delete_report"), "", false);
        }
    }
}
