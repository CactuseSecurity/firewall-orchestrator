@using FWO.Config.Api
@using FWO.Report
@using FWO.Report.Filter
@using FWO.Report.Filter.Exceptions
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Ui.Data
@using FWO.Ui.Pages.Reporting.Reports
@using System.Diagnostics

@page "/report/generation/{appId?}"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Reporter}, {Roles.ReporterViewAll}, {Roles.Auditor}, {Roles.Modeller}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if(InitDone)
{
    @* ==== LEFT SIDEBAR ==== *@
    <Sidebar @ref="deviceSelectionSidebar" Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth" >
        <div class="p-3 mt-2">
            <h5 class="text-left">@(userConfig.GetText("report_type"))</h5>
            <Dropdown ElementType="ReportType" ElementToString="@(r => userConfig.GetText(r.ToString()))" SelectedElement="actReportFilters.ReportType"
                SelectedElementChanged="ReportTypeChanged" Elements="CustomSortReportType(Enum.GetValues(typeof(ReportType)).Cast<ReportType>().ToList())">
                <ElementTemplate Context="reportType">
                    @userConfig.GetText(reportType.ToString())
                </ElementTemplate>
            </Dropdown>
        </div>
        @if (actReportFilters.ReportType==ReportType.Recertification)
        {
            <ReportRecertParamSelection @bind-FilterInput="filterInput" @bind-RecertFilter="actReportFilters.RecertFilter"/>
        }
        else if (actReportFilters.ReportType.IsModellingReport())
        {
            <ReportModellingParamSelection @bind-ModellingFilter="actReportFilters.ModellingFilter" InjectedAppId="injectedAppId"/>
        }
        else if(actReportFilters.ReportType==ReportType.UnusedRules)
        {
            <div class="p-3">
                <h5 class="text-left">@(userConfig.GetText("unused_days"))</h5>
                <input type="number" min="1" max="5000" step="1" class="form-control form-control-sm" @bind="actReportFilters.UnusedDays" />
            </div>
        }
        else
        {
            <div class="p-3">
                <h5 class="text-left">@(userConfig.GetText("report_time"))</h5>
                <div class="input-group">
                    <input type="text" class="form-control form-control-sm" value="@actReportFilters.DisplayedTimeSelection" />
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="SelectTime">@(userConfig.GetText("change"))</button>
                </div>
            </div>
        }

        @if (actReportFilters.ReportType.IsDeviceRelatedReport())
        {
            @if (actReportFilters.ReportType != ReportType.Statistics)
            {
                <ReportTenantSelection SelectedTenant="actReportFilters.SelectedTenant" SelectedTenantChanged="TenantViewChanged" TenantFilteringAllowed="tenantFilteringAllowed"/>
            }
            <DeviceSelection @bind-DeviceFilter="actReportFilters.DeviceFilter" @bind-CollapseAll="actReportFilters.CollapseDevices" @bind-SelectAll="actReportFilters.SelectAll"></DeviceSelection>
        }
    </Sidebar>

    @* ==== Middle div ==== *@
    <div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
        <ReportTabset/>

        @* ==== Filter line ==== *@
        <form class="m-1" @onsubmit="GenerateReport">
            <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off"
                    class="form-control" spellcheck="false" placeholder="Filter" @oninput="TryFilter" @bind="filterInput" />
            <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off"
                    class="form-control position-absolute whitespace-div" spellcheck="false">
                <span>@filterFeedbackStart</span><span class="error-underline">@filterFeedbackError</span><span>@filterFeedbackEnd</span>
            </div>
        </form>
        <div class="btn-group m-1 sticky-marker-60" style="z-index: 16;">
            @if (processing == false)
            {
                <button type="button" class="btn btn-sm btn-primary" @onclick="GenerateReport">@(userConfig.GetText("generate_report"))</button>
            }
            else
            {
                <button type="button" class="btn btn-sm btn-danger" @onclick="() => CancelGeneration()">@(userConfig.GetText("stop_fetching"))</button>
            }
            <ReportExport ReportToExport="currentReport" />
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => { reportTemplateControl.NewTemplate(ConstructReportTemplate()); }">@(userConfig.GetText("save_as_template"))</button>
            @if(currentReport != null && currentReport.ReportType == ReportType.UnusedRules && selectedItemsRuleReportTable.Count > 0 
                && (authenticationStateTask!.Result.User.IsInRole(Roles.Admin) || authenticationStateTask!.Result.User.IsInRole(Roles.Requester) || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor)))
            {
                <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ShowCreateTicketDialog = true;}">@(userConfig.GetText("create_delete_ticket"))</button>
            }
        </div>

        <hr />

        @* ==== Templates ==== *@
        <ReportTemplateComponent OnTemplateLoad="async template => { SyncFiltersFromTemplate(template); StateHasChanged(); }" @ref="reportTemplateControl" />

        @* ==== Report main div ==== *@
        <div class="card me-1 ms-1 mb-1 shadow">
            <div class="card-body">
                @if (currentReport != null)
                {
                    @switch (currentReport.ReportType)
                    {
                        case ReportType.Rules:
                        case ReportType.ResolvedRules:
                        case ReportType.ResolvedRulesTech:
                        case ReportType.Recertification:
                        case ReportType.UnusedRules:
                        case ReportType.NatRules:
                            <RulesReport Managements="currentReport.ReportData.ManagementData" SelectedReportType="actReportFilters.ReportType" RulesPerPage="rulesPerPage" 
                                @bind-SelectedRules="selectedItemsRuleReportTable" />
                            break;

                        case ReportType.Changes:
                        case ReportType.ResolvedChanges:
                        case ReportType.ResolvedChangesTech:
                            <ChangesReport Managements="currentReport.ReportData.ManagementData" SelectedReportType="actReportFilters.ReportType" RulesPerPage="rulesPerPage"
                                @bind-SelectedRuleChanges="selectedItemsChangeReportTable" />
                            break;

                        case ReportType.Statistics:
                            <StatisticsReport Managements="currentReport.ReportData.ManagementData" GlobalStats="currentReport.ReportData.GlobalStats"/>
                            break;

                        case ReportType.Connections:
                            <ConnectionsReport AppHandlers="appHandlers" AllCommonServices="currentReport.ReportData.GlobalComSvc"/>
                            break;

                        default:
                            break;
                    }
                }
            </div>
        </div>
        @if (currentReport != null && reportGenerationDuration != 0)
        {
            if (reportGenerationDuration < 600)
            {
                <small>@(userConfig.GetText("report_duration")) @reportGenerationDuration.ToString("0.00") @(userConfig.GetText("seconds")).</small>
            }
            else
            {
                <small> @(userConfig.GetText("report_duration")) @((reportGenerationDuration/60.0).ToString("0.00")) @(userConfig.GetText("minutes")).</small>
            }
        }
    </div>

    @* ==== RIGHT SIDEBAR ==== *@
    <RightSidebar @bind-Width="sidebarRightWidth" Tabset="rsbTabset" AnchorNavToRSB="anchorNavToRSB" CurrentReport="currentReport"
        @bind-SelectedRules="selectedItemsRuleReportTable" 
        AllTabVisible="(tenantFilteringAllowed && actReportFilters.SelectedTenant == null)"
        SelectedReportType = "actReportFilters.ReportType"/>
    <AnchorNavToRSB @ref="anchorNavToRSB" TabSet="rsbTabset" />
}

@* ==== POPUPS ==== *@
<ReportSelectTime @bind-Display="ShowSelectTimeDialog" SelectedReportType="actReportFilters.ReportType"@bind-ActTimeFilter="actReportFilters.TimeFilter"
    @bind-SavedTimeFilter="actReportFilters.SavedTimeFilter" DisplayTime="actReportFilters.SetDisplayedTimeSelection"/>
<ReportCreateTicket @bind-Display="ShowCreateTicketDialog" SelectedRules="selectedItemsRuleReportTable"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public string? AppId { get; set; }

    public double reportGenerationDuration;
    private bool processing = false;
    private CancellationTokenSource tokenSource = new CancellationTokenSource();

    private List<Rule> selectedItemsRuleReportTable = new List<Rule>();
    private List<RuleChange> selectedItemsChangeReportTable = new List<RuleChange>();

    private List<ModellingAppHandler> appHandlers = new();
    List<int> relevantManagementIds = new ();
    
    private ReportFilters actReportFilters = new ();
    private bool InitDone = false;
    private int? injectedAppId = null;
    private bool autoGenerateReport = false;

    private List<string> unsupportedList = new List<string>();
    private bool ShowSelectTimeDialog = false;
    private bool ShowCreateTicketDialog = false;

    private int rulesPerPage = 0;   // todo: remove - no pagination implemented?

    private int sidebarLeftWidth = GlobalConst.kSidebarLeftWidth;
    private int sidebarRightWidth = GlobalConst.kSidebarRightWidth;

    private ReportTemplateComponent reportTemplateControl = new ReportTemplateComponent();

    private ReportBase? currentReport;

    private FWO.Ui.Shared.TabSet rsbTabset;
    private Sidebar? deviceSelectionSidebar;
    private FWO.Ui.Shared.AnchorNavToRSB anchorNavToRSB;

    private string filterFeedbackStart = "";
    private string filterFeedbackError = "";
    private string filterFeedbackEnd = "";
    private string filterInput = "";

    private bool tenantFilteringAllowed => authenticationStateTask!.Result.User.IsInRole(Roles.ReporterViewAll) || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin) || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);

    private bool showRuleRelatedReports => authenticationStateTask!.Result.User.IsInRole(Roles.Reporter)
        || authenticationStateTask!.Result.User.IsInRole(Roles.ReporterViewAll)
        || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);
    private bool showModellingReports => authenticationStateTask!.Result.User.IsInRole(Roles.Modeller)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);


    protected override async Task OnInitializedAsync()
    {
        try
        {
            actReportFilters.DeviceFilter.Managements = await apiConnection.SendQueryAsync<List<ManagementSelect>>(DeviceQueries.getDevicesByManagement);
            if(int.TryParse(AppId, out int appId))
            {
                actReportFilters.Init(userConfig, false);
                injectedAppId = appId;
                if(showModellingReports)
                {
                    List<FwoOwner> owners = await apiConnection.SendQueryAsync<List<FwoOwner>>(Api.Client.Queries.OwnerQueries.getEditableOwners, new { appIds = appId });
                    if(owners.Count > 0)
                    {
                        actReportFilters.ModellingFilter.SelectedOwner = owners.First();
                        autoGenerateReport = true;
                    }
                }
            }
            else
            {
                actReportFilters.Init(userConfig, showRuleRelatedReports);
            }
            InitDone = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(autoGenerateReport)
        {
            autoGenerateReport = false;
            await GenerateReport();
        }
    }

    private void ReportTypeChanged(ReportType newReportType)
    {
        actReportFilters.ReportType = newReportType;
        actReportFilters.SetDisplayedTimeSelection();
        ResetReport();
        StateHasChanged();
    }

    private void ResetReport()
    {
        // clear report data when switching reportType as we would be missing src/dst/svc information in some cases
        if (currentReport != null)
        {
            currentReport.ReportData = new ();
        }
        appHandlers = new();
        reportGenerationDuration = 0;
    }

    private async Task TenantViewChanged(Tenant? newTenantView)
    {
        actReportFilters.TenantViewChanged(newTenantView);
        ResetReport();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SyncFiltersFromTemplate(ReportTemplate template)
    {
        filterInput = template.Filter;
        Tenant? tenantFromTemplate = null;
        if (template.ReportParams.TenantFilter.IsActive)
        {
            tenantFromTemplate = await Tenant.getSingleTenant(apiConnection, template.ReportParams.TenantFilter.TenantId);
        }
        await TenantViewChanged(tenantFromTemplate);
        actReportFilters.SyncFiltersFromTemplate(template);
        StateHasChanged();
    }

    private void SelectTime()
    {
        ShowSelectTimeDialog = true;
    }

    private async Task GenerateReport()
    {
        Stopwatch watch = new System.Diagnostics.Stopwatch();
        watch.Start();
        tokenSource = new CancellationTokenSource();
        var token = tokenSource.Token;

        // save original report for exception case
        ReportData reportOrig = currentReport?.ReportData ?? new();

        try
        {
            if (actReportFilters.ReportType.IsDeviceRelatedReport() && !actReportFilters.DeviceFilter.isAnyDeviceFilterSet())
            {
                DisplayMessageInUi(null, userConfig.GetText("no_device_selected"), userConfig.GetText("E1001"), true);
                return;
            }
            processing = true;
            await PrepareReportGeneration();

            try
            {
                if(currentReport.ReportType.IsModellingReport())
                {
                    await GenerateConnectionsReport(token);
                }
                else if(currentReport.ReportType == ReportType.Statistics)
                {
                    await GenerateStatisticsReport(token);
                }
                else
                {
                    await currentReport.Generate(userConfig.ElementsPerFetch, apiConnection,
                    managementsReportIntermediate =>
                    {
                        currentReport.ReportData.ManagementData = managementsReportIntermediate.ManagementData;
                        setRelevantManagements();
                        return InvokeAsync(StateHasChanged);
                    }, token);
                    if (currentReport.ReportType == ReportType.Recertification)
                    {
                        PrepareMetadata(currentReport.ReportData.ManagementData);
                    }
                }
            }
            catch (OperationCanceledException e)
            {
                Log.WriteDebug("Generate Report", $"Cancelled: {e.Message}");
            }

            processing = false;
            PostProcess();
        }
        catch (Exception exception)
        {
            processing = false;
            if(currentReport != null)
            {
                currentReport.ReportData = reportOrig;
            }
            reportTemplateControl.Uncollapse();
            await InvokeAsync(StateHasChanged);
            DisplayMessageInUi(exception, userConfig.GetText("generate_report"), "", true);
        }
        watch.Stop();
        reportGenerationDuration = watch.ElapsedMilliseconds/1000.0;
        await InvokeAsync(StateHasChanged);
        Log.WriteDebug("Report Generation", $"Generation Time: {reportGenerationDuration} s.");
    }

    private async Task PrepareReportGeneration()
    {
        // check for unsupported devices
        if(actReportFilters.ReportType == ReportType.UnusedRules)
        {
            var result = await ReportDevicesBase.GetUsageDataUnsupportedDevices(apiConnection, actReportFilters.DeviceFilter);
            actReportFilters.ReducedDeviceFilter = result.reducedDeviceFilter;
            unsupportedList = result.unsupportedList;
            if(unsupportedList.Count > 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4004") + string.Join(", ", unsupportedList), true);
            }
        }

        currentReport = ReportBase.ConstructReport(ConstructReportTemplate(), userConfig);

        // clear selected rules
        selectedItemsRuleReportTable.Clear();
        selectedItemsChangeReportTable.Clear();

        // save selected managements before resetting
        relevantManagementIds = actReportFilters.DeviceFilter.getSelectedManagements();

         // reset report data when switching between reports
        ResetReport();
    }

    private async Task GenerateConnectionsReport(CancellationToken token)
    {
        foreach(var selectedOwner in actReportFilters.ModellingFilter.SelectedOwners)
        {
            OwnerReport actOwnerData = new(){ Name = selectedOwner.Name };
            currentReport.ReportData.OwnerData.Add(actOwnerData);
            await currentReport.Generate(userConfig.ElementsPerFetch, apiConnection,
            connIntermediate =>
            {
                actOwnerData.Connections = connIntermediate.OwnerData.First().Connections;
                return InvokeAsync(StateHasChanged);
            }, token);

            await PrepareReportData(selectedOwner, actOwnerData);
        }
        currentReport.ReportData.GlobalComSvc = await apiConnection.SendQueryAsync<List<ModellingConnection>>(ModellingQueries.getCommonServices);
    }

    async Task PrepareReportData(FwoOwner selectedOwner, OwnerReport ownerData)
    {
        ModellingAppHandler appHandler = new (apiConnection, userConfig, selectedOwner, DisplayMessageInUi);
        await appHandler.Init(ownerData.Connections);
        ownerData.RegularConnections = appHandler.GetRegularConnections();
        ownerData.Interfaces = appHandler.GetInterfaces();
        ownerData.CommonServices = appHandler.GetCommonServices();
        appHandlers.Add(appHandler);
    }

    private async Task GenerateStatisticsReport(CancellationToken token)
    {
        currentReport.ReportData.GlobalStats = new ();
        await currentReport.Generate(0, apiConnection,
            managementsReportIntermediate =>
            {
                currentReport.ReportData.ManagementData = managementsReportIntermediate.ManagementData;
                setRelevantManagements();
                return InvokeAsync(() =>
                {
                    foreach (var mgm in currentReport.ReportData.ManagementData.Where(mgt => !mgt.Ignore))
                    {
                        currentReport.ReportData.GlobalStats.RuleStatistics.ObjectAggregate.ObjectCount += mgm.RuleStatistics.ObjectAggregate.ObjectCount;
                        currentReport.ReportData.GlobalStats.NetworkObjectStatistics.ObjectAggregate.ObjectCount += mgm.NetworkObjectStatistics.ObjectAggregate.ObjectCount;
                        currentReport.ReportData.GlobalStats.ServiceObjectStatistics.ObjectAggregate.ObjectCount += mgm.ServiceObjectStatistics.ObjectAggregate.ObjectCount;
                        currentReport.ReportData.GlobalStats.UserObjectStatistics.ObjectAggregate.ObjectCount += mgm.UserObjectStatistics.ObjectAggregate.ObjectCount;
                    }
                    StateHasChanged();
                });
            }, token);
    }

    private bool PrepareMetadata(List<ManagementReport> ManagementReports)
    {
        bool rulesFound = false;
        foreach (var managementReport in ManagementReports)
        {
            foreach (var device in managementReport.Devices)
            {
                if (device.ContainsRules())
                {
                    rulesFound = true;
                    foreach (var rule in device.Rules!)
                    {
                        rule.Metadata.UpdateRecertPeriods(userConfig.RecertificationPeriod, userConfig.RecertificationNoticePeriod);
                    }
                }
            }
        }
        return rulesFound;
    }

    private void PostProcess()
    {
        reportTemplateControl.Collapse();

        if(actReportFilters.ReportType.IsDeviceRelatedReport() && currentReport.NoRuleFound())
        {
            if(currentReport is ReportRules || currentReport is ReportNatRules)
            {
                DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4002"), true);
            }
            else if (actReportFilters.ReportType.IsChangeReport())
            {
                DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4003"), true);
            }
        }
    }

    private void CancelGeneration()
    {
        tokenSource.Cancel();
        DisplayMessageInUi(null, userConfig.GetText("report_data_fetch"), userConfig.GetText("E1003"), true);
    }

    private void setRelevantManagements()
    {
        foreach (var mgm in currentReport.ReportData.ManagementData)
        {
            mgm.Ignore = !relevantManagementIds.Contains(mgm.Id);
        }
    }

    private ReportTemplate ConstructReportTemplate()
    {
        return new ReportTemplate(filterInput, actReportFilters.ToReportParams());
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        string input = (changeArgs.Value ?? "").ToString() ?? "";
        try
        {
            DynGraphqlQuery query = Compiler.Compile(ConstructReportTemplate());

            filterFeedbackStart = input;
            filterFeedbackError = "";
            filterFeedbackEnd = "";
        }
        catch (FilterException filterError)
        {
            int errorStart = filterError.ErrorPosition.Start.Value;
            int errorEnd = filterError.ErrorPosition.End.Value;

            filterFeedbackStart = input[..errorStart];
            filterFeedbackError = input[errorStart..errorEnd];
            filterFeedbackEnd = input[errorEnd..];
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            DisplayMessageInUi(unexpectedError, userConfig.GetText("filter"), "", false);
#endif
        }
    }

    private List<ReportType> CustomSortReportType(List<ReportType> ListIn)
    {
        List<ReportType> ListOut = new List<ReportType>();
        List<ReportType> orderedReportTypeList = new List<ReportType>()
        {
            ReportType.Rules, ReportType.ResolvedRules, ReportType.ResolvedRulesTech, ReportType.UnusedRules, ReportType.NatRules,
            ReportType.Recertification,
            ReportType.Changes, ReportType.ResolvedChanges, ReportType.ResolvedChangesTech, 
            ReportType.Statistics,
            ReportType.Connections
        };
        foreach (var reportType in orderedReportTypeList)
        {
            ReportType? foundType = ListIn.Find(x => x == reportType);
            if (foundType != null)
            {
                if(showRuleRelatedReports && reportType.IsDeviceRelatedReport() || showModellingReports && reportType.IsModellingReport())
                {
                    ListOut.Add(reportType);
                }
                ListIn.Remove(reportType);
            }
        }
        // finally add remaining report types
        ListOut.AddRange(ListIn);
        return ListOut;
    }
}
