@using FWO.Data.Modelling
@using FWO.Report
@using FWO.Report.Filter
@using FWO.Report.Filter.FilterTypes
@using FWO.Report.Filter.Exceptions
@using FWO.Ui.Data
@using FWO.Ui.Pages.Reporting.Reports
@using System.Diagnostics
@using System.Text.Json

@page "/report/generation/{appId?}"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Reporter}, {Roles.ReporterViewAll}, {Roles.Auditor}, {Roles.Modeller}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject NavigationManager NavigationManager

@if(InitDone)
{
    @* ==== LEFT SIDEBAR ==== *@
    <Sidebar @ref="deviceSelectionSidebar" Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth" >
        <div class="p-3 mt-2">
            <h5 class="text-left">@(userConfig.GetText("report_type"))</h5>
            <Dropdown ElementType="ReportType" ElementToString="@(r => userConfig.GetText(r.ToString()))" SelectedElement="actReportFilters.ReportType"
                SelectedElementChanged="ReportTypeChanged" Elements="availableReportTypes">
                <ElementTemplate Context="reportType">
                    @userConfig.GetText(reportType.ToString())
                </ElementTemplate>
            </Dropdown>
        </div>
        @if (actReportFilters.ReportType.IsModellingReport())
        {
            <ReportModellingParamSelection @bind-ModellingFilter="actReportFilters.ModellingFilter" @bind-TimeFilter="actReportFilters.TimeFilter" InjectedAppId="injectedAppId" ReportType="actReportFilters.ReportType"/>
        }
        @if (actReportFilters.ReportType == ReportType.Recertification || actReportFilters.ReportType == ReportType.OwnerRecertification)
        {
            <ReportRecertParamSelection @bind-FilterInput="filterInput" @bind-RecertFilter="actReportFilters.RecertFilter" ReportType="actReportFilters.ReportType"/>
        }
        @if(actReportFilters.ReportType == ReportType.UnusedRules)
        {
            <div class="p-3">
                <h5 class="text-left">@(userConfig.GetText("unused_days"))</h5>
                <input type="number" min="1" max="5000" step="1" class="form-control form-control-sm" @bind="actReportFilters.UnusedDays" />
            </div>
        }
        @if(actReportFilters.ReportType.HasTimeFilter())
        {
            <div class="p-3">
                <h5 class="text-left">@(userConfig.GetText("report_time"))</h5>
                <div class="input-group">
                    <input type="text" class="form-control form-control-sm" value="@actReportFilters.DisplayedTimeSelection" disabled />
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="SelectTime">@(DisplayService.DisplayButton(userConfig, "change", Icons.Edit))</button>
                </div>
            </div>
        }
        @if (actReportFilters.ReportType.IsDeviceRelatedReport() && actReportFilters.ReportType != ReportType.RecertEventReport)
        {
            @if (actReportFilters.ReportType != ReportType.Statistics && actReportFilters.ReportType != ReportType.AppRules)
            {
                <ReportTenantSelection SelectedTenant="actReportFilters.SelectedTenant" SelectedTenantChanged="TenantViewChanged" TenantFilteringAllowed="tenantFilteringAllowed"/>
            }
            <DeviceSelection @bind-DeviceFilter="actReportFilters.DeviceFilter" @bind-CollapseAll="actReportFilters.CollapseDevices" @bind-SelectAll="actReportFilters.SelectAll"/>
        }
    </Sidebar>

    @* ==== Middle div ==== *@
    <div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
        <ReportTabset/>

        @* ==== Filter line ==== *@
        <form class="m-1" @onsubmit="GenerateReport">
            <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off"
                    class="form-control" spellcheck="false" placeholder="@(PlaceholderFilter())" @oninput="TryFilter" @bind="filterInput" />
            <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off"
                    class="form-control position-absolute whitespace-div" spellcheck="false">
                <span>@filterFeedbackStart</span><span class="error-underline">@filterFeedbackError</span><span>@filterFeedbackEnd</span>
            </div>
        </form>
        <div class="btn-group m-1 sticky-marker-60" style="z-index: 16;">
            @if (processing == false)
            {
                <button type="button" class="btn btn-sm btn-primary" @onclick="GenerateReport">@(DisplayService.DisplayButton(userConfig, "generate_report", Icons.GenerateReport))</button>
            }
            else
            {
                <button type="button" class="btn btn-sm btn-danger" @onclick="() => CancelGeneration()">@(DisplayService.DisplayButton(userConfig, "stop_fetching", Icons.Cancel))</button>
            }
            <ReportExport ReportToExport="currentReport" />
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => { reportTemplateControl.NewTemplate(ConstructReportTemplate()); }">@(DisplayService.DisplayButton(userConfig, "save_as_template", Icons.Template))</button>
            @if(currentReport != null && currentReport.ReportType == ReportType.UnusedRules && selectedItemsRuleReportTable.Count > 0
                && (authenticationStateTask!.Result.User.IsInRole(Roles.Admin) || authenticationStateTask!.Result.User.IsInRole(Roles.Requester) || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor)))
            {
                <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ShowCreateTicketDialog = true;}">@(DisplayService.DisplayButton(userConfig, "create_delete_ticket", Icons.Workflow))</button>
            }
        </div>

        <hr />

        @* ==== Templates ==== *@
        <ReportTemplateComponent OnTemplateLoad="async template => { await SyncFiltersFromTemplate(template); }" @ref="reportTemplateControl" />

        @* ==== Report main div ==== *@
        <div class="card me-1 ms-1 mb-1 shadow">
            @if(processing)
            {
                <div class="m-auto mt-2"><Loading Size="SpinnerSize.Medium" /></div>
            }
            else
            {
                <div class="card-body">
                    @if(currentReport != null)
                    {
                        @switch(currentReport.ReportType)
                        {
                            case ReportType.Rules:
                            case ReportType.ResolvedRules:
                            case ReportType.ResolvedRulesTech:
                            case ReportType.Recertification:
                            case ReportType.UnusedRules:
                            case ReportType.NatRules:
                            case ReportType.AppRules:
                                <RulesReport Managements="currentReport.ReportData.ManagementData" SelectedReportType="actReportFilters.ReportType" RulesPerPage="rulesPerPage"
                                             @bind-SelectedRules="selectedItemsRuleReportTable" />
                                break;

                            case ReportType.Changes:
                            case ReportType.ResolvedChanges:
                            case ReportType.ResolvedChangesTech:
                                <ChangesReport Managements="currentReport.ReportData.ManagementData" SelectedReportType="actReportFilters.ReportType" RulesPerPage="rulesPerPage"
                                               @bind-SelectedRuleChanges="selectedItemsChangeReportTable" />
                                break;

                            case ReportType.Statistics:
                                <StatisticsReport Managements="currentReport.ReportData.ManagementData" GlobalStats="currentReport.ReportData.GlobalStats" />
                                break;

                            case ReportType.Connections:
                                <ConnectionsReport OwnerData="currentReport.ReportData.OwnerData" AllCommonServices="currentReport.ReportData.GlobalComSvc?.FirstOrDefault()?.GlobalComSvcs" />
                                break;

                            case ReportType.VarianceAnalysis:
                                <VariancesReport OwnerData="currentReport.ReportData.OwnerData" />
                                break;

                            case ReportType.OwnerRecertification:
                                <OwnerRecertReport OwnerData="currentReport.ReportData.OwnerData" RecertificationDisplayPeriod="currentReport.ReportData.RecertificationDisplayPeriod" />
                                break;

                            case ReportType.RecertEventReport:
                                <RecertEventReport OwnerData="currentReport.ReportData.OwnerData" Managements="currentReport.ReportData.ManagementData" RulesPerPage="rulesPerPage"
                                                   @bind-SelectedRules="selectedItemsRuleReportTable" />
                                break;

                            default:
                                break;
                        }
                    }
                </div>
            }
        </div>
        @if (currentReport != null && reportGenerationDuration != 0)
        {
            if (reportGenerationDuration < 600)
            {
                <small>@(userConfig.GetText("report_duration")) @reportGenerationDuration.ToString("0.00") @(userConfig.GetText("seconds")).</small>
            }
            else
            {
                <small> @(userConfig.GetText("report_duration")) @((reportGenerationDuration/60.0).ToString("0.00")) @(userConfig.GetText("minutes")).</small>
            }
        }
    </div>

    @* ==== RIGHT SIDEBAR ==== *@
    <RightSidebar @bind-Width="sidebarRightWidth" CurrentReport="currentReport"
        @bind-SelectedRules="selectedItemsRuleReportTable"
        AllTabVisible="(tenantFilteringAllowed && actReportFilters.SelectedTenant == null)"
        SelectedReportType="actReportFilters.ReportType"
        LSBTime="actReportFilters.TimeFilter"/>
}

@* ==== POPUPS ==== *@
<ReportSelectTime @bind-Display="ShowSelectTimeDialog" SelectedReportType="actReportFilters.ReportType"@bind-ActTimeFilter="actReportFilters.TimeFilter"
    @bind-SavedTimeFilter="actReportFilters.SavedTimeFilter" DisplayTime="actReportFilters.SetDisplayedTimeSelection"/>
<ReportCreateTicket @bind-Display="ShowCreateTicketDialog" SelectedRules="selectedItemsRuleReportTable"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public string? AppId { get; set; }

    public double reportGenerationDuration;
    private bool processing = false;
    private CancellationTokenSource tokenSource = new();

    private List<Rule> selectedItemsRuleReportTable = [];
    private List<RuleChange> selectedItemsChangeReportTable = [];

    private List<ReportType> availableReportTypes { get; set; } = [];
    private ReportFilters actReportFilters = new();
    List<FwoOwner> owners = [];
    private bool InitDone = false;
    private int? injectedAppId = null;
    private bool autoGenerateReport = false;

    private bool ShowSelectTimeDialog = false;
    private bool ShowCreateTicketDialog = false;

    private int rulesPerPage = 0;   // todo: remove - no pagination implemented?

    private int sidebarLeftWidth = GlobalConst.kSidebarLeftWidth;
    private int sidebarRightWidth = GlobalConst.kSidebarRightWidth;

    private ReportTemplateComponent reportTemplateControl = new();

    private ReportBase? currentReport;

    private Sidebar? deviceSelectionSidebar;

    private string filterFeedbackStart = "";
    private string filterFeedbackError = "";
    private string filterFeedbackEnd = "";
    private string filterInput = "";

    private bool resetToEmptyDevFilter = false;

    private bool tenantFilteringAllowed => authenticationStateTask!.Result.User.IsInRole(Roles.ReporterViewAll) || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin) || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);

    private bool showRuleRelatedReports => authenticationStateTask!.Result.User.IsInRole(Roles.Reporter)
        || authenticationStateTask!.Result.User.IsInRole(Roles.ReporterViewAll)
        || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);
    private bool showModellingReports => authenticationStateTask!.Result.User.IsInRole(Roles.Modeller)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);


    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableReportTypes = ReportTypeGroups.CustomSortReportType(
                JsonSerializer.Deserialize<List<ReportType>>(string.IsNullOrEmpty(userConfig.AvailableReportTypes) ? "[]" : userConfig.AvailableReportTypes)
                ?? throw new JsonException("Config data could not be parsed."), showRuleRelatedReports, showModellingReports);
            SetProperRoleForReport();
            actReportFilters.DeviceFilter.Managements = await apiConnection.SendQueryAsync<List<ManagementSelect>>(DeviceQueries.getDevicesByManagement);
            if(int.TryParse(AppId, out int appId))
            {
                actReportFilters.Init(userConfig, false);
                injectedAppId = appId;
                if(showModellingReports)
                {
                    owners = await apiConnection.SendQueryAsync<List<FwoOwner>>(OwnerQueries.getEditableOwners, new { appIds = appId });
                    if(owners.Count > 0)
                    {
                        actReportFilters.ModellingFilter.SelectedOwner = owners.First();
                        autoGenerateReport = true;
                    }
                }
            }
            else
            {
                actReportFilters.Init(userConfig, showRuleRelatedReports);
            }
            InitDone = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(autoGenerateReport)
        {
            autoGenerateReport = false;
            await GenerateReport();
        }
    }

    private void ReportTypeChanged(ReportType newReportType)
    {
        if(injectedAppId != null)
        {
            injectedAppId = null;
            CleanUri();
        }
        actReportFilters.ReportType = newReportType;
        SetProperRoleForReport();
        actReportFilters.SetDisplayedTimeSelection();
        AdjustDeviceSelection();
        ResetReport();
        StateHasChanged();
    }

    public void CleanUri()
    {
        var index = NavigationManager.Uri.IndexOf(PageName.ReportGeneration, StringComparison.Ordinal);
        if (index > 0)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri.Substring(0, index + PageName.ReportGeneration.Length));
        }
    }

    private void SetProperRoleForReport()
    {
        if(actReportFilters.ReportType.IsModellingReport())
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Admin, Roles.Modeller, Roles.Auditor ]);
        }
        else
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, [ Roles.Admin, Roles.FwAdmin, Roles.ReporterViewAll, Roles.Reporter, Roles.Modeller, Roles.Auditor ]);
        }
    }

    private void AdjustDeviceSelection()
    {
        if(actReportFilters.ReportType == ReportType.AppRules || actReportFilters.ReportType == ReportType.RecertEventReport)
        {
            if(!actReportFilters.DeviceFilter.IsAnyDeviceFilterSet())
            {
                resetToEmptyDevFilter = true;
                actReportFilters.DeviceFilter.ApplyFullDeviceSelection(true);
                actReportFilters.SelectAll = false;
            }
        }
        else if(resetToEmptyDevFilter && actReportFilters.DeviceFilter.AreAllDevicesSelected())
        {
            resetToEmptyDevFilter = false;
            actReportFilters.DeviceFilter.ApplyFullDeviceSelection(false);
            actReportFilters.SelectAll = true;
        }
    }

    private void ResetReport()
    {
        // clear report data when switching reportType as we would be missing src/dst/svc information in some cases
        if (currentReport != null)
        {
            currentReport.ReportData = new ();
        }
        reportGenerationDuration = 0;
    }

    private async Task TenantViewChanged(Tenant? newTenantView)
    {
        actReportFilters.TenantViewChanged(newTenantView);
        ResetReport();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SyncFiltersFromTemplate(ReportTemplate template)
    {
        if (template.ReportParams.ReportType == (int)ReportType.OwnerRecertification)
        {
            template.ReportParams.ModellingFilter.SelectedOwners = owners;
        }
        else
        {
            template.ReportParams.ModellingFilter.SelectedOwner = template.ReportParams.ModellingFilter.SelectedTemplateOwner;
        }
        filterInput = template.Filter;
        Tenant? tenantFromTemplate = null;
        if (template.ReportParams.TenantFilter.IsActive)
        {
            tenantFromTemplate = await FWO.Ui.Auth.AuthStateProvider.GetSingleTenant(apiConnection, template.ReportParams.TenantFilter.TenantId);
        }
        await TenantViewChanged(tenantFromTemplate);
        actReportFilters.SyncFiltersFromTemplate(template);
        StateHasChanged();
    }

    private void SelectTime()
    {
        ShowSelectTimeDialog = true;
    }

    private async Task GenerateReport()
    {
        processing = true;

        if (actReportFilters.ReportType.IsDeviceRelatedReport() && !actReportFilters.DeviceFilter.IsAnyDeviceFilterSet())
        {
            DisplayMessageInUi(null, userConfig.GetText("no_device_selected"), userConfig.GetText("E1001"), true);
            return;
        }
        Stopwatch watch = new System.Diagnostics.Stopwatch();
        watch.Start();
        tokenSource = new CancellationTokenSource();
        var token = tokenSource.Token;

        await ProcessReportGeneration(token);

        watch.Stop();
        reportGenerationDuration = watch.ElapsedMilliseconds / 1000.0;

        processing = false;

        await InvokeAsync(StateHasChanged);
        Log.WriteDebug("Report Generation", $"Generation Time: {reportGenerationDuration} s.");
    }

    private async Task ProcessReportGeneration(CancellationToken token)
    {
        // save original report for exception case
        ReportData reportOrig = currentReport?.ReportData ?? new();

        try
        {
            processing = true;
            SetProperRoleForReport();
            await PrepareReportGeneration();
            currentReport = await ReportGenerator.GenerateFromTemplate(ConstructReportTemplate(), apiConnection, userConfig, DisplayMessageInUi, token);
            processing = false;
            PostProcess();
        }
        catch (Exception exception)
        {
            processing = false;
            if(currentReport != null)
            {
                currentReport.ReportData = reportOrig;
            }
            reportTemplateControl.Uncollapse();
            await InvokeAsync(StateHasChanged);
            DisplayMessageInUi(exception, userConfig.GetText("generate_report"), "", true);
        }
    }

    private async Task PrepareReportGeneration()
    {
        // check for unsupported devices
        if(actReportFilters.ReportType == ReportType.UnusedRules)
        {
            var result = await ReportDevicesBase.GetUsageDataUnsupportedDevices(apiConnection, actReportFilters.DeviceFilter);
            actReportFilters.ReducedDeviceFilter = result.reducedDeviceFilter;
            if(result.unsupportedList.Count > 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4004") + string.Join(", ", result.unsupportedList), true);
            }
        }

        // clear selected rules
        selectedItemsRuleReportTable.Clear();
        selectedItemsChangeReportTable.Clear();

        // reset report data when switching between reports
        ResetReport();
    }

    private void PostProcess()
    {
        if(currentReport != null)
        {
            reportTemplateControl.Collapse();

            if(actReportFilters.ReportType.IsDeviceRelatedReport() && currentReport.NoRuleFound())
            {
                if(currentReport is ReportRules || currentReport is ReportNatRules)
                {
                    DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4002"), true);
                }
                else if (actReportFilters.ReportType.IsChangeReport())
                {
                    DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4003"), true);
                }
            }
        }
    }

    private void CancelGeneration()
    {
        tokenSource.Cancel();
        DisplayMessageInUi(null, userConfig.GetText("report_data_fetch"), userConfig.GetText("E1003"), true);
    }

    private ReportTemplate ConstructReportTemplate(string? tempFilter = null)
    {
        return new ReportTemplate(tempFilter ?? filterInput, actReportFilters.ToReportParams());
    }

    private string PlaceholderFilter()
    {
        return userConfig.GetText(actReportFilters.ReportType == ReportType.VarianceAnalysis ? "U1001" : "filter");
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        try
        {
            string input = (changeArgs.Value ?? "").ToString() ?? "";
            try
            {
                DynGraphqlQuery query = Compiler.Compile(ConstructReportTemplate(input));

                filterFeedbackStart = input;
                filterFeedbackError = "";
                filterFeedbackEnd = "";
            }
            catch (FilterException filterError)
            {
                int errorStart = filterError.ErrorPosition.Start.Value;
                int errorEnd = filterError.ErrorPosition.End.Value;

                filterFeedbackStart = input[..errorStart];
                filterFeedbackError = input[errorStart..errorEnd];
                filterFeedbackEnd = input[errorEnd..];
            }
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            DisplayMessageInUi(unexpectedError, userConfig.GetText("filter"), "", false);
#endif
        }
    }
}
