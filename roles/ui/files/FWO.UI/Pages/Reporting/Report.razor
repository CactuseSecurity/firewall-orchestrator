@using FWO.Config.Api
@using FWO.Report
@using FWO.Report.Filter
@using FWO.Report.Filter.Exceptions
@using System
@using FWO.Ui.Data
@using FWO.Ui.Pages.Reporting.Reports

@* @page "/" *@
@page "/report"

@inject APIConnection Connection
@inject UserConfig userConfig

@* ==== LEFT SIDEBAR ==== *@
<Sidebar @ref="deviceSelectionSidebar" Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth" >
   <DeviceSelection Managements="managementsReport" @bind-FilterInput="filterInput" @bind-SelectAll="selectAll"></DeviceSelection>
</Sidebar>

@* ==== Middle div ==== *@
<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
<h3>@(userConfig.GetText("reporting"))</h3>

@* ==== Filter line ==== *@
    <form class="m-1 position-relative" @onsubmit="GenerateReport">
        <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off"
               class="form-control" spellcheck="false" placeholder="Filter" @oninput="TryFilter" @bind="filterInput" />
        <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off"
             class="form-control position-absolute whitespace-div" spellcheck="false">
            <span>@filterFeedbackStart</span><span class="error-underline">@filterFeedbackError</span><span>@filterFeedbackEnd</span>
        </div>
    </form>

    <div class="btn-group mr-1 ml-1 mb-1">
        <button class="btn btn-sm btn-primary" @onclick="GenerateReport">@(userConfig.GetText("generate_report"))</button>
        <ReportExport ReportToExport="currentReport"></ReportExport>
        <button class="btn btn-sm btn-secondary" @onclick="() => { reportTemplateControl.NewTemplate(filterInput); }">@(userConfig.GetText("save_as_template"))</button>
    </div>

    <hr />

@* ==== Templates ==== *@
    <ReportTemplateComponent OnTemplateLoad="
        template => {
            filterInput = template.Filter;
            DeviceFilter.syncFilterLineToLSBFilter(filterInput, managementsReport);
            if (DeviceFilter.isAnyDeviceFilterSet(filterInput) || DeviceFilter.areAllDevicesSelected(managementsReport))
                selectAll = false;
            else
                selectAll = true;
            StateHasChanged();
        }"
    @ref="reportTemplateControl"></ReportTemplateComponent>

@* ==== Report main div ==== *@
    <div class="card mr-1 ml-1 mb-1 shadow">
        <div class="card-body">

            @if (currentReport != null)
            {
                @switch (currentReport)
                {
                    case ReportRules rulesReport:
                        <RulesReport Managements="managementsReport" RulesPerPage="rulesPerPage" @bind-SelectedRules="selectedItemsRuleReportTable"></RulesReport>
                        break;

                    case ReportNatRules natRulesReport:
                        <RulesReport NatRules="true" Managements="managementsReport" RulesPerPage="rulesPerPage" @bind-SelectedRules="selectedItemsRuleReportTable"></RulesReport>
                        break;

                    case ReportChanges changesReport:
                        <ChangesReport Managements="managementsReport" RulesPerPage="rulesPerPage" @bind-SelectedRuleChanges="selectedItemsChangeReportTable"></ChangesReport>
                        break;

                    case ReportStatistics statisticsReport:
                        @if (globalStats != null)
                        {
                            <h5>@(userConfig.GetText("glob_no_obj"))</h5>
                            <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {globalStats}">
                                <Column TableItem="Management" Title="@(userConfig.GetText("network_objects"))" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="@(userConfig.GetText("service_objects"))" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="@(userConfig.GetText("user_objects"))" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="@(userConfig.GetText("rules"))" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                            </Table>
                        }
                        @foreach (Management management in managementsReport.Where(mgt => !mgt.Ignore))
                        {
                            <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">
                                <h6>@(userConfig.GetText("total_no_obj_mgt"))</h6>
                                <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {management}">
                                    <Column TableItem="Management" Title="@(userConfig.GetText("network_objects"))" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="@(userConfig.GetText("service_objects"))" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="@(userConfig.GetText("user_objects"))" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="@(userConfig.GetText("rules"))" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                                </Table>

                                <h6>@(userConfig.GetText("no_rules_gtw"))</h6>
                                <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Device" Items="management.Devices">
                                    <Column TableItem="Device" Title="@(userConfig.GetText("gateway"))" Field="@(Device => Device.Name)" />
                                    <Column TableItem="Device" Title="@(userConfig.GetText("no_of_rules"))" Field="@(Device => Device.RuleStatistics.ObjectAggregate.ObjectCount)" />
                                </Table>
                            </Collapse>
                        }
                        break;

                    default:
                        break;
                }
            }
        </div>
    </div>
</div>

@* ==== RIGHT SIDEBAR ==== *@
<Sidebar Collapsible="true" Resizeable="true" PositionLeft="false" @bind-Width="sidebarRightWidth">
    <div class="p-3">
        <h5 class="text-center">@(userConfig.GetText("objects"))</h5>
        <TabSet KeepPanelsAlive="true" @ref="rsbTabset">
            <Tab Title="@(userConfig.GetText("all"))">
                <div class="d-md-flex justify-content-md-end">
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseSidebarAll.CollapseAll())">@(userConfig.GetText("collapse_all"))</div>
                </div>
                <CascadingValue Value="collapseSidebarAll">
                    <ObjectGroupCollection FetchObjects="FetchContent" Type="10" InputDataType="Management" Data="managementsAllObjects" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                                           NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
                </CascadingValue>
            </Tab>
            <Tab Title="Report">
                <div class="d-md-flex justify-content-md-end">
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseSidebarReport.CollapseAll())">@(userConfig.GetText("collapse_all"))</div>
                </div>
                <CascadingValue Value="collapseSidebarReport">
                    <ObjectGroupCollection FetchObjects="FetchContent" Type="20" InputDataType="Management" Data="managementsReport.Where(m => (m.Devices.Where(d => d.Rules != null && d.Rules.Count() > 0).Count() > 0))" NameExtractor="man => man.Name"
                                           NetworkObjectExtractor="man => man.ReportObjects?.Select(ro => ro.Content).ToArray()"
                                           NetworkServiceExtractor="man => man.ReportServices?.Select(rs => rs.Content).ToArray()"
                                           NetworkUserExtractor="man => man.ReportUsers?.Select(ru => ru.Content).ToArray()" />
                </CascadingValue>
            </Tab>
            <Tab Title="@(userConfig.GetText("rule"))">
                <div class="d-md-flex justify-content-md-between">
                    <div class="btn btn-dark btn-sm mb-2" @onclick="@(() => selectedItemsRuleReportTable.Clear())">@(userConfig.GetText("clear_all"))</div>
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseSidebarRule.CollapseAll())">@(userConfig.GetText("collapse_all"))</div>
                </div>
                <CascadingValue Value="collapseSidebarRule">
                    <ObjectGroupCollection FetchObjects="FetchContent" Type="30" StartContentDetailed="true" StartCollapsed="false" InputDataType="Rule" Data="selectedItemsRuleReportTable"
                                           NameExtractor=@(rule => $"{rule.DeviceName} - Rule {rule.Id} {rule.Name}")
                                           NetworkObjectExtractor="rule => rule.Froms.Select(nl => nl.Object).Union(rule.Tos.Select(nl => nl.Object)).ToArray()"
                                           NetworkServiceExtractor="rule => Array.ConvertAll(rule.Services, wrapper => wrapper.Content)"
                                           NetworkUserExtractor="rule => Array.FindAll(rule.Froms.Select(nl => nl.User).Distinct().ToArray(), user => user != null)" />
                </CascadingValue>
            </Tab>
        </TabSet>
    </div>
</Sidebar>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Rule> selectedItemsRuleReportTable = new List<Rule>();
    private List<RuleChange> selectedItemsChangeReportTable = new List<RuleChange>();

    private Management[] managementsDevFilter = new Management[0];
    private Management[] managementsReport = new Management[0];
    private Management[] managementsAllObjects = new Management[0];
    private Management globalStats = null;

    private ScheduledReport[] scheduledReports = new ScheduledReport[0];

    private int elementsPerFetch = 100;
    private int rulesPerPage = 0;   // todo: remove - no pagination implemented?

    // private bool ShowNoDeviceSelectedWarning = false;

    private bool autoFillRightSidebar = false;
    private int maxInitFetchRightSidebar = 10;
    private int sidebarLeftWidth = 300;
    private int sidebarRightWidth = 300;

    private ReportTemplateComponent reportTemplateControl;

    private ReportBase currentReport;

    private TabSet rsbTabset;
    private Sidebar deviceSelectionSidebar;

    private string filterFeedbackStart = "";
    private string filterFeedbackError = "";
    private string filterFeedbackEnd = "";
    private string filterInput = "";
    private bool selectAll = true;
    private string reportGenerationTimeLine = "";
    private CollapseState collapseSidebarAll = new CollapseState();
    private CollapseState collapseSidebarReport = new CollapseState();
    private CollapseState collapseSidebarRule = new CollapseState();

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            try
            {
                GetSettings();

                managementsReport = await Connection.SendQueryAsync<Management[]>(DeviceQueries.getDevicesByManagements);
                await InvokeAsync(StateHasChanged);

                PaginationVariables paginationVariables = new PaginationVariables() { Limit = 0, Offset = 0 };
                managementsAllObjects = await Connection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), null, true);
            }
        });
    }

    public async Task FetchContent(byte contentType, Func<Management[], Task> callback, long id = 0)
    {
        const byte all = 10, report = 20, rule = 30, all_nobj = 11, all_nsrv = 12, all_user = 13, report_nobj = 21, report_nsrv = 22, report_user = 23;

        Log.WriteDebug("Fetching Content..", "");

        Management[] managements = new Management[0];

        try
        {
            GetSettings();

            string query = "";
            Dictionary<String, object> queryVars = new Dictionary<string, object>();

            bool newObjects = true;
            int fetchCount = 0;

            switch (contentType)
            {
                case all:
                    query = ObjectQueries.getAllObjectDetails;
                    break;
                case all_nobj:
                    query = ObjectQueries.getNetworkObjectDetails;
                    break;
                case all_nsrv:
                    query = ObjectQueries.getNetworkServiceObjectDetails;
                    break;
                case all_user:
                    query = ObjectQueries.getUserDetails;
                    break;
                case rule:
                    query = RuleQueries.getRuleDetails;
                    break;
            }

            switch (contentType)
            {
                case all or all_nobj or all_nsrv or all_user:

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", 0 },
                        { "management_id", (int) id }
                    };

                    break;

                case report or report_nobj or report_nsrv or report_user:

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", 0 },
                        { "mgmIds", (int) id }
                    };

                    await currentReport.GetObjectsForManagementInReport(queryVars, (byte)(contentType - report), Connection, callback);

                    return;

                case rule:

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", (int)0 },
                        { "rule_id", id }
                    };

                    break;
            }

            // lazy fetch all objects for right sidebar
            while (newObjects && (++fetchCount <= maxInitFetchRightSidebar || autoFillRightSidebar))
            {
                Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management[]>(query, queryVars);
                if (fetchCount == 1)
                {
                    managements = managementsCurrentFetch;
                }
                else
                {
                    newObjects = managements.Merge(managementsCurrentFetch);
                }

                if (queryVars.ContainsKey("offset"))
                    queryVars["offset"] = (int)queryVars["offset"] + elementsPerFetch;
                await callback(managements);
            }

            Log.WriteDebug("Lazy Fetch", $"Fetched sidebar objects in {fetchCount} cycle(s) ({elementsPerFetch} at a time)");
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), null, true);
            // TODO: Error Interface for all Components, that enables displaying a message in the ui
        }

    }

    private async Task GenerateReport()
    {
        // clear selected rules
        selectedItemsRuleReportTable.Clear();
        selectedItemsChangeReportTable.Clear();

        // collapse report templates
        reportTemplateControl.Collapse();
        // deviceSelectionSidebar.ToggleCollapse(true); // disabling left side bar collapse for now

        try
        {
            // when generating report, filter line overrules LSB filter, as this can be triggered by changing the filter line and pressing enter
            DeviceFilter.syncFilterLineToLSBFilter(filterInput, managementsReport);

            currentReport = ReportBase.ConstructReport(filterInput, userConfig);
            if (!DeviceFilter.isAnyDeviceFilterSet(managementsReport, currentReport.Query))  // display warning
            {
                DisplayMessageInUi(null, userConfig.GetText("no_device_selected"), userConfig.GetText("E1001"), true);
                return;
            }

            // save selected managements before resetting
            List<int> relevantManagements = DeviceFilter.getSelectedManagements(managementsReport);

            DateTime startTime = DateTime.Now;
            managementsReport = new Management[0]; // reset management data when switching between reports
            switch (currentReport)
            {
                case ReportRules rulesReport:
                case ReportChanges changesReport:
                case ReportNatRules natRulesReport:
                    await currentReport.Generate(elementsPerFetch, Connection,
                        managementsReportIntermediate =>
                        {
                            managementsReport = managementsReportIntermediate;
                            setRelevantManagements(relevantManagements);
                            return InvokeAsync(StateHasChanged);
                        });
                    break;

                case ReportStatistics statisticsReport:
                    globalStats = new Management();
                    await currentReport.Generate(0, Connection,
                        managementsReportIntermediate =>
                        {
                            managementsReport = managementsReportIntermediate;
                            setRelevantManagements(relevantManagements);
                            return InvokeAsync(() =>
                            {
                                foreach (Management mgm in managementsReport.Where(mgt => !mgt.Ignore))
                                {
                                    globalStats.RuleStatistics.ObjectAggregate.ObjectCount += mgm.RuleStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.NetworkObjectStatistics.ObjectAggregate.ObjectCount += mgm.NetworkObjectStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.ServiceObjectStatistics.ObjectAggregate.ObjectCount += mgm.ServiceObjectStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.UserObjectStatistics.ObjectAggregate.ObjectCount += mgm.UserObjectStatistics.ObjectAggregate.ObjectCount;
                                }
                                StateHasChanged();
                            });
                        });
                    break;
            }
            reportGenerationTimeLine = $"generation time: {DateTime.Now - startTime}.";
            rsbTabset.SetActiveTab(1);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("generate_report"), null, true);
        }
    }

    private void setRelevantManagements(List<int> relevantManagements)
    {
        foreach (Management mgm in managementsReport)
        {
            mgm.Ignore = (relevantManagements.Contains(mgm.Id) ? false : true);
        }
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        try
        {
            filterInput = (changeArgs.Value ?? "").ToString() ?? "";

            DynGraphqlQuery query = Compiler.Compile(filterInput);

            filterFeedbackStart = filterInput;
            filterFeedbackError = "";
            filterFeedbackEnd = "";
        }
        catch (FilterException filterError)
        {
            int errorStart = filterError.ErrorPosition.Start.Value;
            int errorEnd = filterError.ErrorPosition.End.Value;

            filterFeedbackStart = $"{filterInput.Substring(0, errorStart)}";
            filterFeedbackError = filterInput.Substring(errorStart, errorEnd + 1 - errorStart);
            filterFeedbackEnd = $"{filterInput.Substring(errorEnd, filterInput.Length - 1 - errorEnd)}";
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            DisplayMessageInUi(unexpectedError, userConfig.GetText("filter"), null, false);
#endif
        }
    }

    private void GetSettings()
    {
        try
        {
            string settingsValue = userConfig.GetConfigValue(GlobalConfig.kElementsPerFetch);
            if (settingsValue != "")
            {
                elementsPerFetch = Int32.Parse(settingsValue);
            }

            settingsValue = userConfig.GetConfigValue(GlobalConfig.kMaxInitialFetchesRightSidebar);
            if (settingsValue != "")
            {
                maxInitFetchRightSidebar = Int32.Parse(settingsValue);
            }

            settingsValue = userConfig.GetConfigValue(GlobalConfig.kAutoFillRightSidebar);
            autoFillRightSidebar = (settingsValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            Log.WriteError("Read Config", $"Error reading config value", exception);
        }
    }
}
