@using System.Text
@using FWO.Report
@using FWO.Config.Api

@inject APIConnection apiConnection
@inject UserConfig userConfig

<button class="btn btn-sm btn-dark" @onclick='() => { if (ReportToExport != null) { ShowExportDialog = true; reportExportFile = new ReportFile { Name = "Report", OwnerId = userConfig.User.DbId }; } else { 
                                                      DisplayMessageInUi!(null, userConfig.GetText("export_report"), userConfig.GetText("E1002"), true); } }'>@userConfig.GetText("export_report")</button>

<PopUp Title="@(userConfig.GetText("export_report"))" Show="@ShowExportDialog" OnClose="() => ShowExportDialog = false">
    <Body>
        <div>
            <div class="input-group input-group-sm mb-2">
                <div class="input-group-prepend">
                    <div class="input-group-text">@(userConfig.GetText("report_name")):</div>
                </div>
                <input class="form-control" @bind:event="oninput" @bind="reportExportFile.Name" />
            </div>
            <div class="card">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <div class="mb-1">@(userConfig.GetText("export_as"))</div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="reportExportPdf" @bind="ExportPdf">
                            <label class="form-check-label" for="reportExportPdf">
                                PDF
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="reportExportHtml" @bind="ExportHtml">
                            <label class="form-check-label" for="reportExportHtml">
                                HTML
                            </label>
                        </div>
                        <div class="form-check">
                            <input disabled class="form-check-input" type="checkbox" id="reportExportCsv" @bind="ExportCsv">
                            <label class="form-check-label" for="reportExportCsv">
                                CSV @(userConfig.GetText("coming_soon"))
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="reportExportJson" @bind="ExportJson">
                            <label class="form-check-label" for="reportExportJson">
                                JSON
                            </label>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="reportExportArchive" @bind="ExportArchive">
                            <label class="form-check-label" for="reportExportArchive">
                                @(userConfig.GetText("archive")) (includes JSON)
                            </label>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-sm btn-primary" @onclick="async () => { await Export(); ShowExportDialog = false; ShowExportDownloadDialog = true; }">@(userConfig.GetText("export"))</button>
        <button class="btn btn-sm btn-secondary" @onclick="() => ShowExportDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("export_report_download"))" Show="@ShowExportDownloadDialog" OnClose="() => ShowExportDownloadDialog = false">
    <Body>
        <div class="d-flex flex-column align ml-1 mr-1">
            @if (reportExportFile?.Csv != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(Convert.ToBase64String(Encoding.UTF8.GetBytes(reportExportFile.Csv)))"
                   target="_blank" download="@(reportExportFile.Name).@("csv")">@(userConfig.GetText("download_csv"))</a>
            }
            @if (reportExportFile?.Pdf != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(reportExportFile.Pdf)"
                   target="_blank" download="@(reportExportFile.Name).@("pdf")">@(userConfig.GetText("download_pdf"))</a>
            }
            @if (reportExportFile?.Html != null)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(Convert.ToBase64String(Encoding.UTF8.GetBytes(reportExportFile.Html)))"
                   target="_blank" download="@(reportExportFile.Name).@("html")">@(userConfig.GetText("download_html"))</a>
            }
            @if (reportExportFile?.Json != null && ExportJson)
            {
                <a class="btn btn-sm btn-info m-1" href="data:application/octet-stream;base64,@(Convert.ToBase64String(Encoding.UTF8.GetBytes(reportExportFile.Json)))"
                   target="_blank" download="@(reportExportFile.Name).@("json")">@(userConfig.GetText("download_json"))</a>
            }
        </div>
    </Body>
    <Footer>
        <button class="btn btn-sm btn-danger" @onclick="() => ShowExportDownloadDialog = false">@(userConfig.GetText("close"))</button>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    [Parameter]
    public ReportBase? ReportToExport { get; set; }

    private bool ExportPdf = false;
    private bool ExportJson = false;
    private bool ExportHtml = false;
    private bool ExportCsv = false;
    private bool ExportArchive = false;
    private ReportFile reportExportFile = new ReportFile();

    private bool ShowExportDialog = false;
    private bool ShowExportDownloadDialog = false;

    private async Task Export()
    {
        reportExportFile.Sanitize();
        if (ReportToExport != null)
        {
            await Task.Run(async () =>
            {
                try
                {
                    if (!ReportToExport.GotObjectsInReport)
                        await ReportToExport.GetObjectsInReport(int.MaxValue, apiConnection, _ => Task.CompletedTask);

                    if (ExportHtml)
                    {
                        reportExportFile.Html = ReportToExport.ExportToHtml();
                    }

                    if (ExportPdf)
                    {
                        reportExportFile.Pdf = Convert.ToBase64String(ReportToExport.ToPdf());
                    }

                    if (ExportCsv)
                    {
                        reportExportFile.Csv = ReportToExport.ExportToCsv();
                    }

                    // if archiving, json report has to be generated
                    if (ExportJson || ExportArchive)
                    {
                        reportExportFile.Json = ReportToExport.ExportToJson();
                    }

                    if (ExportArchive)
                    {
                        var queryVariables = new
                        {
                            report_name = reportExportFile.Name,
                            report_start_time = DateTime.Now, // TODO: Change to correct dates
                            report_end_time = DateTime.Now,
                            report_owner_id = reportExportFile.OwnerId,
                            report_csv = reportExportFile.Csv,
                            report_pdf = reportExportFile.Pdf,
                            report_html = reportExportFile.Html,
                            report_json = reportExportFile.Json,
                        };

                        await apiConnection.SendQueryAsync<object>(ReportQueries.addGeneratedReport, queryVariables);
                    }
                }
                catch (Exception exception)
                {
                    DisplayMessageInUi!(exception, userConfig.GetText("export_report"), "", true);
                }
            });
        }
        else
        {
            DisplayMessageInUi!(null, userConfig.GetText("export_report"), userConfig.GetText("E1002"), true);
        }
    }
}
