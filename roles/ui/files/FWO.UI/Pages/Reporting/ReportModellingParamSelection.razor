@using FWO.Config.Api

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<div class="p-3">
    <h5 class="text-left">@(userConfig.GetText("owner"))</h5>
    <Dropdown ElementType="FwoOwner" ElementToString="@(o => o.Display(userConfig.GetText("common_service")))" Nullable="false" 
            @bind-SelectedElement="ModellingFilter.SelectedOwner" Elements="ownerList">
        <ElementTemplate Context="owner">
            @owner.Display(userConfig.GetText("common_service"))
        </ElementTemplate>
    </Dropdown>
    @if(AllParams)
    {
        <br>
        <h5 class="text-left">@(userConfig.GetText("rule_filters"))</h5>
        <div class="row m-2">
            <div class="form-check" @onclick:stopPropagation="true">
                <input class="form-check-input" id="srcMatch" type="radio" name="SrcDstMatch" @onchange="() => {ModellingFilter.ShowSourceMatch = true; ModellingFilter.ShowDestinationMatch = false;}">
                <label class="form-check-label text-white" for="srcMatch">
                    @(userConfig.GetText("match_source"))
                </label>
            </div>
            <div class="form-check" @onclick:stopPropagation="true">
                <input class="form-check-input" id="dstMatch" type="radio" name="SrcDstMatch" @onchange="() => {ModellingFilter.ShowSourceMatch = false; ModellingFilter.ShowDestinationMatch = true;}">
                <label class="form-check-label text-white" for="dstMatch">
                    @(userConfig.GetText("match_destination"))
                </label>
            </div>
            <div class="form-check" @onclick:stopPropagation="true">
                <input class="form-check-input" id="eitherMatch" type="radio" name="SrcDstMatch" checked @onchange="() => {ModellingFilter.ShowSourceMatch = true; ModellingFilter.ShowDestinationMatch = true;}">
                <label class="form-check-label text-white" for="eitherMatch">
                    @(userConfig.GetText("match_either"))
                </label>
            </div>
        </div>
        <div class="form-check">
            <input class="form-check-input" id="anyMatch" type="checkbox" @bind="ModellingFilter.ShowAnyMatch" />
            <label class="form-check-label text-white" for="anyMatch">@(userConfig.GetText("match_any"))</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" id="dropMatch" type="checkbox" @bind="ModellingFilter.ShowDropRules" />
            <label class="form-check-label text-white" for="dropMatch">@(userConfig.GetText("match_drop_rules"))</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" id="showFull" type="checkbox" @bind="ModellingFilter.ShowFullRules" />
            <label class="form-check-label text-white" for="showFull">@(userConfig.GetText("show_full_rules"))</label>
        </div>
    }
</div>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public ModellingFilter ModellingFilter { get; set; } = new();

    [Parameter]
    public EventCallback<ModellingFilter> ModellingFilterChanged { get; set; }

    [Parameter]
    public int? InjectedAppId { get; set; } = null;

    [Parameter]
    public bool AllParams { get; set; } = false;

    private List<FwoOwner> ownerList = new List<FwoOwner>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            ownerList = await ModellingHandlerBase.GetOwnApps(authenticationStateTask, userConfig, apiConnection, DisplayMessageInUi);
            if(ownerList.Count > 0)
            {
                ModellingFilter.SelectedOwner = InjectedAppId == null ? ownerList.First() : ownerList.FirstOrDefault(o => o.Id == InjectedAppId) ?? ownerList.First();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }
}
