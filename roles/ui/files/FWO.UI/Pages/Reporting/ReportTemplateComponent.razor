@using FWO.Config.Api
@using FWO.Report.Filter

@inject UserConfig userConfig
@inject ApiConnection apiConnection

<div class="me-1 ms-1 mb-1 shadow">
    <Collapse Title="@(userConfig.GetText("templates"))" Style="@("primary")" StartToggled="false" @ref="collapseControl">
        <div class="card-body vheight75">
            <Table TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="ReportTemplate" Items="reportTemplates" PageSize="0">
                <Column Title="@(userConfig.GetText("actions"))" TableItem="ReportTemplate">
                    <Template Context="template">
                        @if (OnTemplateLoad != null)
                        {
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-success" @onclick="() => OnTemplateLoad(template)">@(userConfig.GetText("load"))</button>
                                @* only display buttons for manipulating a template, when it's the user's template or the user has admin role *@
                                @if (template.Owner == userConfig.User.DbId || authenticationStateTask!.Result.User.IsInRole(Roles.Admin))
                                {
                                    <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditTemplate(template)">@(userConfig.GetText("edit"))</button>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => { reportTemplateInEdit = template; ShowDeleteTemplateDialog = true; }">@(userConfig.GetText("delete"))</button>
                                }
                            </div>
                        }
                    </Template>
                </Column>
                <Column Title="@(userConfig.GetText("name"))" TableItem="ReportTemplate">
                    <Template>
                        @if (context.Owner == 0)
                        {
                            <b>@context.Name</b>
                        }
                        else
                        {
                            @context.Name
                        }
                    </Template>
                </Column>
                <Column Title="@(userConfig.GetText("comment"))" TableItem="ReportTemplate" Field="x => x.Comment" >
                    <Template>
                        @if (context.Comment != null && context.Comment.StartsWith("T01"))
                        {
                            @(userConfig.GetText(context.Comment))
                        }
                        else
                        {
                            @context.Comment
                        }
                    </Template>
                </Column>
                <Column Title="@(userConfig.GetText("creation_date"))" TableItem="ReportTemplate" Field="x => x.CreationDate" />
                <Column Title="@(userConfig.GetText("filter"))" TableItem="ReportTemplate" Field="x => x.Filter" />
            </Table>
        </div>
    </Collapse>
</div>

<PopUp Size=PopupSize.Large Title="@(userConfig.GetText("report_template"))" Show="@(ShowUpdateTemplateDialog || ShowAddTemplateDialog)">
    <Body>
        <form>
            <div class="form-group row">
                <label for="saveTemplateName" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                <input id="saveTemplateName" type="text" class="col-sm-8" @bind="reportTemplateInEdit.Name">
            </div>
            <div class="form-group row mt-2">
                <label for="saveTemplateComment" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                <textarea id="saveTemplateComment" class="col-sm-8" @bind="reportTemplateInEdit.Comment" />
            </div>
            <div class="form-group row mt-2">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("report_type")):</label>
                <label class="col-sm-8">@(userConfig.GetText(reportTypeInEdit.ToString()))</label>
            </div>
            @if(reportTypeInEdit == ReportType.Recertification)
            {
                <div class="form-group row mt-2">
                    <label for="saveTemplateRecertDiplayPeriod" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("due_within")):</label>
                    <input id="saveTemplateRecertDiplayPeriod" type="number" min="0" class="col-sm-2" @bind="reportTemplateInEdit.ReportParams.RecertFilter.RecertificationDisplayPeriod">
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("owner")):</label>
                    <label class="col-sm-8">@(reportTemplateInEdit.ReportParams.RecertFilter.RecertOwnerList.Count > 0 ? 
                        recertOwnerList.FirstOrDefault(o => o.Id == reportTemplateInEdit.ReportParams.RecertFilter.RecertOwnerList.First())?.Name ?? 
                        reportTemplateInEdit.ReportParams.RecertFilter.RecertOwnerList.First().ToString() : "")</label>
                </div>
            }
            else if(reportTypeInEdit == ReportType.UnusedRules)
            {
                <div class="form-group row mt-2">
                    <label for="saveTemplateUnused" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("unused_days")):</label>
                    <input id="saveTemplateUnused" type="number" min="0" class="col-sm-2" @bind="reportTemplateInEdit.ReportParams.UnusedFilter.UnusedForDays">
                </div>
            }
            else if(reportTypeInEdit.IsDeviceRelatedReport())
            {
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("report_time")):</label>
                    <label class="col-sm-8">@(DisplayTime())</label>
                </div>
            }

            @if(reportTemplateInEdit.ReportParams.TenantFilter.IsActive)
            {
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant")):</label>
                    <label class="col-sm-8">@(reportTemplateInEdit.ReportParams.TenantFilter.TenantId)</label>
                </div>
            }

            @if(reportTypeInEdit.IsDeviceRelatedReport())
            {
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("devices")):</label>
                    <div class="form-group row col-sm-9">
                        <label class="col-sm-9">@(reportTemplateInEdit.ReportParams.DeviceFilter.listAllSelectedDevices())</label>
                        <button type="button" class="btn btn-sm btn-warning col-sm-2" @onclick="EditDeviceSelection">@(userConfig.GetText("edit"))</button>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("owner")):</label>
                    <div class="col-sm-8">
                        <Dropdown ElementType="FwoOwner" ElementToString="@(o => o.Display(userConfig.GetText("common_service")))" Nullable="false" 
                                @bind-SelectedElement="reportTemplateInEdit.ReportParams.ModellingFilter.SelectedOwner" Elements="modOwnerList">
                            <ElementTemplate Context="owner">
                                @(owner.Display(userConfig.GetText("common_service")))
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                </div>
            }
            <div class="form-group row mt-2">
                <label for="saveTemplateFilterLineTextarea" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("filter")):</label>
                <textarea id="saveTemplateFilterLineTextarea" class="col-sm-8" @bind="reportTemplateInEdit.Filter" />
            </div>
        </form>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

<ReportTemplateSelectDevice @bind-Display="ShowSelectDeviceDialog" @bind-DeviceFilter="reportTemplateInEdit.ReportParams.DeviceFilter"/>

<ConfirmDelete @bind-Display="ShowDeleteTemplateDialog" PerformAction="DeleteTemplate" Title="@(userConfig.GetText("report_template"))" 
    DeleteMessage="@(userConfig.GetText("U1002") + " " + reportTemplateInEdit.Name + " ?")"
    AllowedRoles="@($"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Reporter}, {Roles.ReporterViewAll}, {Roles.Modeller}")"/>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    private Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Action<ReportTemplate>? OnTemplateLoad { get; set; }

    public List<ReportTemplate> reportTemplates { get; set; } = new List<ReportTemplate>();
    public ReportTemplate reportTemplateInEdit = new ReportTemplate();
    private ReportType reportTypeInEdit = ReportType.Rules;
    private List<FwoOwner> recertOwnerList = new List<FwoOwner>();
    private List<FwoOwner> modOwnerList = new List<FwoOwner>();

    private string tmpTemplateCommentKey = "";
    private string tmpTemplateComment = "";

    private bool ShowAddTemplateDialog = false;
    private bool ShowUpdateTemplateDialog = false;
    private bool ShowSelectDeviceDialog = false;
    private bool ShowDeleteTemplateDialog = false;

    private Collapse collapseControl = new Collapse();
    private DeviceFilter DeviceFilterOrig = new();

    private bool showRuleRelatedReports => authenticationStateTask!.Result.User.IsInRole(Roles.Reporter)
        || authenticationStateTask!.Result.User.IsInRole(Roles.ReporterViewAll)
        || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);
    private bool showModellingReports => authenticationStateTask!.Result.User.IsInRole(Roles.Modeller)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);


    protected override async Task OnInitializedAsync()
    {
        await RefreshTemplates();
        recertOwnerList = await apiConnection.SendQueryAsync<List<FwoOwner>>(FWO.Api.Client.Queries.OwnerQueries.getOwners);
        if(showModellingReports)
        {
            modOwnerList = await ModellingHandlerBase.GetOwnApps(authenticationStateTask, userConfig, apiConnection, DisplayMessageInUi);
        }
    }

    public async Task RefreshTemplates()
    {
        try
        {
            reportTemplates = (await apiConnection.SendQueryAsync<ReportTemplate[]>(ReportQueries.getReportTemplates, new { userId = userConfig.User.DbId })).ToList();
            reportTemplates = reportTemplates.Where(rt => (showRuleRelatedReports && ((ReportType)rt.ReportParams.ReportType).IsDeviceRelatedReport() || 
                                                           showModellingReports && ((ReportType)rt.ReportParams.ReportType).IsModellingReport())).ToList();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("template_fetch"), "", true);
        }
    }

    public void Collapse()
    {
        collapseControl.ForceCollapse();
    }

    public void Uncollapse()
    {
        collapseControl.ToggleCollapse();
    }

    public ReportTemplate decodeComment(ReportTemplate reportTemplate)
    {
        if (reportTemplate.Comment != null && reportTemplate.Comment.StartsWith("T01"))
        {
            tmpTemplateCommentKey = reportTemplate.Comment;
            reportTemplate.Comment = userConfig.GetText(reportTemplate.Comment);
            tmpTemplateComment = reportTemplate.Comment;
        }
        return reportTemplate;
    }

    public string recodeComment(string Comment)
    {
        if (tmpTemplateCommentKey != "" && Comment == tmpTemplateComment)
        {
            Comment = tmpTemplateCommentKey;
        }
        return Comment;
    }

    public string DisplayTime()
    {
        if(reportTypeInEdit.IsChangeReport())
        {
            switch (reportTemplateInEdit.ReportParams.TimeFilter.TimeRangeType)
            {
                case TimeRangeType.Shortcut:
                    return userConfig.GetText(reportTemplateInEdit.ReportParams.TimeFilter.TimeRangeShortcut);
                case TimeRangeType.Interval:
                    return userConfig.GetText("last") + " " + 
                        reportTemplateInEdit.ReportParams.TimeFilter.Offset + " " + 
                        userConfig.GetText(reportTemplateInEdit.ReportParams.TimeFilter.Interval.ToString());
                case TimeRangeType.Fixeddates:
                    if(reportTemplateInEdit.ReportParams.TimeFilter.OpenStart && reportTemplateInEdit.ReportParams.TimeFilter.OpenEnd)
                    {
                        return userConfig.GetText("open");
                    }
                    else if(reportTemplateInEdit.ReportParams.TimeFilter.OpenStart)
                    {
                        return userConfig.GetText("until") + " " + reportTemplateInEdit.ReportParams.TimeFilter.EndTime.ToString();
                    }
                    else if(reportTemplateInEdit.ReportParams.TimeFilter.OpenEnd)
                    {
                        return userConfig.GetText("from") + " " + reportTemplateInEdit.ReportParams.TimeFilter.StartTime.ToString();
                    }
                    return reportTemplateInEdit.ReportParams.TimeFilter.StartTime.ToString() + " - " + reportTemplateInEdit.ReportParams.TimeFilter.EndTime.ToString();
                default:
                    return "";
            }
        }
        else
        {
            if (reportTemplateInEdit.ReportParams.TimeFilter.IsShortcut)
            {
                return userConfig.GetText(reportTemplateInEdit.ReportParams.TimeFilter.TimeShortcut);
            }
            else
            {
                return reportTemplateInEdit.ReportParams.TimeFilter.ReportTime.ToString();
            }
        }
    }

    public void NewTemplate(ReportTemplate reportTemplate)
    {
        reportTemplateInEdit = reportTemplate;
        reportTypeInEdit = (ReportType)reportTemplate.ReportParams.ReportType;
        ShowAddTemplateDialog = true;
    }

    private void EditTemplate(ReportTemplate reportTemplate)
    {
        reportTemplateInEdit = decodeComment(reportTemplate);
        reportTypeInEdit = (ReportType)reportTemplateInEdit.ReportParams.ReportType;
        DeviceFilterOrig = reportTemplateInEdit.ReportParams.DeviceFilter.Clone();
        ShowUpdateTemplateDialog = true;
    }

    private void CancelEdit()
    {
        reportTemplateInEdit.ReportParams.DeviceFilter = DeviceFilterOrig; 
        ShowUpdateTemplateDialog = false;
        ShowAddTemplateDialog = false;
    }

    private async Task Save()
    {
        reportTemplateInEdit.ReportParams.ReportType = (int)reportTypeInEdit;
        if (ShowAddTemplateDialog)
        {
            await AddTemplate();
        }
        else
        {
            await UpdateTemplate();
        }
    }

    private async Task AddTemplate()
    {
        try
        {
            if (reportTemplateInEdit.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("save_template"), userConfig.GetText("U0001"), true);
            }
            reportTemplateInEdit.CreationDate = DateTime.Now;
            reportTemplateInEdit.Owner = userConfig.User.DbId;

            var queryVariables = new
            {
                reportTemplateName = reportTemplateInEdit.Name,
                reportFilterLine = reportTemplateInEdit.Filter,
                reportTemplateCreate = reportTemplateInEdit.CreationDate,
                reportTemplateComment = recodeComment(reportTemplateInEdit.Comment),
                reportTemplateOwner = reportTemplateInEdit.Owner,
                reportParameters = reportTemplateInEdit.ReportParams
            };

            ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(ReportQueries.addReportTemplate, queryVariables)).ReturnIds;
            if (returnIds != null)
            {
                reportTemplateInEdit.Id = returnIds[0].NewId;
                ShowAddTemplateDialog = false;
                await RefreshTemplates(); // avoid strange behavior of new templates in device selection
            }
            else
            {
                DisplayMessageInUi(null, userConfig.GetText("save_template"), userConfig.GetText("E1004"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_template"), "", true);
        }
    }

    private async Task UpdateTemplate()
    {
        try
        {
            var queryVariables = new
            {
                reportTemplateId = reportTemplateInEdit.Id,
                reportTemplateName = reportTemplateInEdit.Name,
                reportFilterLine = reportTemplateInEdit.Filter,
                reportTemplateCreate = reportTemplateInEdit.CreationDate,
                reportTemplateComment = recodeComment(reportTemplateInEdit.Comment),
                reportTemplateOwner = reportTemplateInEdit.Owner,
                reportParameters = reportTemplateInEdit.ReportParams
            };

            await apiConnection.SendQueryAsync<object>(ReportQueries.updateReportTemplate, queryVariables);
            reportTemplates[reportTemplates.FindIndex(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id)] = reportTemplateInEdit;

            ShowUpdateTemplateDialog = false;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_template"), "", true);
        }
    }

    private async Task DeleteTemplate()
    {
        try
        {
            var queryVariables = new
            {
                reportTemplateId = reportTemplateInEdit.Id
            };

            int affectedRows = (await apiConnection.SendQueryAsync<ReturnId>(ReportQueries.deleteReportTemplate, queryVariables)).AffectedRows;
            if (affectedRows > 0)
            {
                ReportTemplate? templateToRemove = reportTemplates.Find(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id);
                if (templateToRemove != null)
                {
                    reportTemplates.Remove(templateToRemove);
                }
                ShowDeleteTemplateDialog = false;
                StateHasChanged();
            }
            else
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_template"), userConfig.GetText("E1005"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_template"), "", true);
        }
    }

    private void EditDeviceSelection()
    {
        ShowSelectDeviceDialog = true;
    }
}
