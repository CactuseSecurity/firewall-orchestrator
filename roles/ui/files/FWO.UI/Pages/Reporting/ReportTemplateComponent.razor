@using FWO.Config.Api
@using FWO.Report.Filter

@inject UserConfig userConfig
@inject APIConnection apiConnection

<div class="mr-1 ml-1 mb-1 shadow">
    <Collapse Title="@(userConfig.GetText("templates"))" Style="@("primary")" @ref="collapseControl">
        <div class="card-body">
            <Table TableClass="table table-bordered table-sm table-responsive" TableItem="ReportTemplate" Items="reportTemplates" PageSize="0">
                <Column Title="@(userConfig.GetText("action"))" TableItem="ReportTemplate">
                    <Template Context="template">
                        <div class="btn-group">
                            <button class="btn btn-sm btn-success" @onclick="() => OnTemplateLoad(template)">@(userConfig.GetText("load"))</button>
                            @* only display buttons for manipulating a template, when it's the user's template or the user has admin role *@
                            @if (template.Owner == userConfig.User.DbId || authenticationStateTask.Result.User.IsInRole("admin"))
                            {
                                <button class="btn btn-sm btn-warning" @onclick="() => { reportTemplateInEdit = adaptText(template); ShowEditTemplateDialog = true; }">@(userConfig.GetText("edit"))</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => { reportTemplateInEdit = template; ShowDeleteTemplateDialog = true; }">@(userConfig.GetText("delete"))</button>
                            }
                        </div>
                    </Template>
                </Column>
                <Column Title="@(userConfig.GetText("name"))" TableItem="ReportTemplate">
                    <Template>
                        @if (context.Owner == 0)
                        {
                            <b>@context.Name</b>
                        }
                        else
                        {
                            @context.Name
                        }
                    </Template>
                </Column>
                <Column Title="@(userConfig.GetText("comment"))" TableItem="ReportTemplate" Field="x => x.Comment" >
                    <Template>
                        @if (context.Comment != null && context.Comment.StartsWith("T01"))
                        {
                            @(userConfig.GetText(context.Comment))
                        }
                        else
                        {
                            @context.Comment
                        }
                    </Template>
                </Column>
                <Column Title="@(userConfig.GetText("creation_date"))" TableItem="ReportTemplate" Field="x => x.CreationDate" />
                <Column Title="@(userConfig.GetText("filter"))" TableItem="ReportTemplate" Field="x => x.Filter" />
            </Table>
        </div>
    </Collapse>
</div>

<PopUp Large="true" Title="@(userConfig.GetText("report_template"))" Show="@(ShowEditTemplateDialog || ShowSaveTemplateDialog)">
    <Body>
        <div>
            <div class="form-group">
                <label for="saveTemplateName">@(userConfig.GetText("name")):</label>
                <input id="saveTemplateName" type="text" class="form-control" @bind="reportTemplateInEdit.Name">
            </div>
            <div class="form-group">
                <label for="saveTemplateComment">@(userConfig.GetText("comment")):</label>
                <textarea id="saveTemplateComment" class="form-control" @bind="reportTemplateInEdit.Comment" />
            </div>
            <div class="form-group">
                <label for="saveTemplateFilterLineTextarea">@(userConfig.GetText("filter")):</label>
                <textarea id="saveTemplateFilterLineTextarea" class="form-control" @bind="reportTemplateInEdit.Filter" />
            </div>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-primary" @onclick="async () => { if (ShowSaveTemplateDialog) await SaveTemplate(); else await EditTemplate(); }">@(userConfig.GetText("save"))</button>
        <button class="btn btn-secondary" @onclick="() => ShowEditTemplateDialog = ShowSaveTemplateDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("report_template"))" Show="@ShowDeleteTemplateDialog">
    <Body>
        <p>@(userConfig.GetText("U1002")) "@reportTemplateInEdit.Name" ?</p>
    </Body>
    <Footer>
        <button class="btn btn-danger" @onclick="DeleteTemplate">@(userConfig.GetText("delete"))</button>
        <button class="btn btn-secondary" @onclick="() => ShowDeleteTemplateDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    private Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    [Parameter]
    public Action<ReportTemplate> OnTemplateLoad { get; set; }

    public List<ReportTemplate> reportTemplates { get; set; }
    public ReportTemplate reportTemplateInEdit = null;

    private bool ShowSaveTemplateDialog = false;
    private bool ShowEditTemplateDialog = false;
    private bool ShowDeleteTemplateDialog = false;

    private Collapse collapseControl;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reportTemplates = (await apiConnection.SendQueryAsync<ReportTemplate[]>(ReportQueries.getReportTemplates)).ToList();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("template_fetch"), null, true);
        }
    }

    public void Collapse()
    {
        collapseControl.ForceCollapse(false);
    }

    public void NewTemplate(string filterInput)
    {
        reportTemplateInEdit = new ReportTemplate { Filter = filterInput };
        ShowSaveTemplateDialog = true;
    }

    public ReportTemplate adaptText(ReportTemplate reportTemplate)
    {
        if (reportTemplate.Comment != null && reportTemplate.Comment.StartsWith("T01"))
        {
            reportTemplate.Comment = userConfig.GetText(reportTemplate.Comment);
        }
        return reportTemplate;
    }

    private async Task SaveTemplate()
    {
        try
        {
            reportTemplateInEdit.CreationDate = DateTime.Now;
            reportTemplateInEdit.Owner = userConfig.User.DbId;

            var queryVariables = new
            {
                reportTemplateName = reportTemplateInEdit.Name,
                reportFilterLine = reportTemplateInEdit.Filter,
                reportTemplateCreate = reportTemplateInEdit.CreationDate,
                reportTemplateComment = reportTemplateInEdit.Comment,
                reportTemplateOwner = reportTemplateInEdit.Owner
            };

            reportTemplateInEdit.Id = (await apiConnection.SendQueryAsync<NewReturning>(ReportQueries.addReportTemplate, queryVariables)).ReturnIds[0].NewId;
            reportTemplates.Add(reportTemplateInEdit);

            ShowSaveTemplateDialog = false;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_template"), null, true);
        }
    }

    private async Task EditTemplate()
    {
        try
        {
            await apiConnection.SendQueryAsync<object>(ReportQueries.editReportTemplate, reportTemplateInEdit);
            reportTemplates[reportTemplates.FindIndex(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id)] = reportTemplateInEdit;

            ShowEditTemplateDialog = false;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_template"), null, true);
        }
    }

    private async Task DeleteTemplate()
    {
        try
        {
            var queryVariables = new
            {
                reportTemplateId = reportTemplateInEdit.Id
            };

            await apiConnection.SendQueryAsync<object>(ReportQueries.deleteReportTemplate, queryVariables);
            reportTemplates.Remove(reportTemplates.Find(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id));

            ShowDeleteTemplateDialog = false;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_template"), null, true);
        }
    }
}



