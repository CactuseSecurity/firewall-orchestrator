@using FWO.Report
@using FWO.Ui.Display

@inject UserConfig userConfig

@if(ruleDisplay != null)
{
    <Table SelectedItems="SelectedRules" TableItem="Rule" Items="Rules" ShowSearchBar="false" style="font-size:small"
            RowClickAction="@(async r => { if (!SelectedRules.Remove(r)) SelectedRules.Add(r); await SelectedRulesChanged.InvokeAsync(SelectedRules); })"
            TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header popover-transform" 
            PageSize="RulesPerPage" ColumnReorder="true" TableRowClass="@(r => getTableRowClasses(r))" @ref="reportTable">

        @if (SelectedReportType == ReportType.VarianceAnalysis || HandleAsVariance)
        {
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("management"))" Field="@(r => r.ManagementName)" Sortable="false" Filterable="false" Hideable="true" />
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("gateway"))" Field="@(r => r.DeviceName)" Sortable="false" Filterable="false" Hideable="true" />
        }
        else
        {
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("number"))" DefaultSortColumn="true" Field="@(r => r.OrderNumber)" Sortable="true" Filterable="false" Hideable="true">
                <Template>
                    @((MarkupString)ruleDisplay.DisplayNumber(rule))
                </Template>
            </Column>
        }
        @if(SelectedReportType == ReportType.UnusedRules || SelectedReportType == ReportType.AppRules && !HandleAsVariance)
        {
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("last_hit"))" Field="@(r => r.Metadata.LastHit)" Sortable="false" Filterable="false">
                <Template>
                    @((MarkupString)RuleDisplayHtml.DisplayLastHit(rule))
                </Template>
            </Column>
        }
        @if(SelectedReportType == ReportType.Recertification)
        {
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("next_recert_date"))" Field="@(r => r.Metadata.RuleRecertification)" Sortable="false" Filterable="false">
                <Template>
                    @((MarkupString)RuleDisplayHtml.DisplayNextRecert(rule))
                </Template>
            </Column>
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("owner"))" Field="@(r => r.Metadata.RuleRecertification)" Sortable="false" Filterable="false">
                <Template>
                    @((MarkupString)RuleDisplayHtml.DisplayOwner(rule))
                </Template>
            </Column>
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("ip_matches"))" Field="@(r => r.Metadata.RuleRecertification)" Sortable="false" Filterable="false">
                <Template>
                    @((MarkupString)RuleDisplayHtml.DisplayRecertIpMatches(rule))
                </Template>
            </Column>
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("last_hit"))" Field="@(r => r.Metadata.LastHit)" Sortable="false" Filterable="false">
                <Template>
                    @((MarkupString)RuleDisplayHtml.DisplayLastHit(rule))
                </Template>
            </Column>
            @if(Recertification && RecertificationHistory)
            {
                // TODO: implement 2nd recert report containing latest recerts
                <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("last_recertifier"))" Field="@(r => r.Metadata.RuleRecertification)" Sortable="false" Filterable="true">
                    <Template>
                        @((MarkupString)RuleDisplayHtml.DisplayLastRecertifier(rule))
                    </Template>
                </Column>
            }
            @if(Recertification && !ReadonlyMode)
            {
                <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("action"))" Field="@(r => r.OrderNumber)">
                    <Template>
                        <div class="form-check" @onclick:stopPropagation="true">
                            <input class="form-check-input" type="radio" name="certification@(rule.Id.ToString()+':'+rule.OwnerId.ToString())" id="recertifyRadio@(rule.Id.ToString()+':'+rule.OwnerId.ToString())" @onchange="() => {rule.Metadata.Recert=true; rule.Metadata.ToBeRemoved=false;}">
                            <label class="form-check-label" for="recertifyRadio@(rule.Id)">
                                @(userConfig.GetText("recertify"))
                            </label>
                        </div>
                        <div class="form-check" @onclick:stopPropagation="true">
                            <input class="form-check-input" type="radio" name="certification@(rule.Id.ToString()+':'+rule.OwnerId.ToString())" id="decertifyRadio@(rule.Id.ToString()+':'+rule.OwnerId.ToString())" @onchange="() => {rule.Metadata.Recert=false; rule.Metadata.ToBeRemoved=true;}">
                            <label class="form-check-label" for="decertifyRadio@(rule.Id)">
                                @(userConfig.GetText("decertify"))
                            </label>
                        </div>
                        <div class="form-check" @onclick:stopPropagation="true">
                            <input class="form-check-input" type="radio" name="certification@(rule.Id.ToString()+':'+rule.OwnerId.ToString())" id="noneRadio@(rule.Id.ToString()+':'+rule.OwnerId.ToString())" checked @onchange="() => {rule.Metadata.Recert=false; rule.Metadata.ToBeRemoved=false;}">
                            <label class="form-check-label" for="noneRadio@(rule.Id)">
                                @(userConfig.GetText("later"))
                            </label>
                        </div>
                    </Template>
                </Column>
            }
        }
        @if(Recertification && RecertificationHistory)
        {
            // TODO: implement 2nd recert report containing latest recerts
            <Column TableItem="Rule" Title="@(userConfig.GetText("recert_comment"))" Field="@(r => r.Metadata.Comment)" Sortable="true" Filterable="false" />
        }

        <Column TableItem="Rule" Title="@(userConfig.GetText("name"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true" />
        @if (SelectedReportType != ReportType.VarianceAnalysis && !HandleAsVariance)
        {
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("source_zone"))" Field="@(r => r.SourceZone)" Sortable="true" Filterable="false" Hideable="true">
                <Template>
                    @((MarkupString)ruleDisplay.DisplaySourceZone(rule))
                </Template>
            </Column>
        }
        <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("source"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
            <Template>
                @((MarkupString)ruleDisplay.DisplaySource(rule, getActLocation(), SelectedReportType))
            </Template>
        </Column>
        @if (SelectedReportType != ReportType.VarianceAnalysis && !HandleAsVariance)
        {
            <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("destination_zone"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
                <Template>
                    @((MarkupString)ruleDisplay.DisplayDestinationZone(rule))
                </Template>
            </Column>
        }
        <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("destination"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
            <Template>
                @((MarkupString)ruleDisplay.DisplayDestination(rule, getActLocation(), SelectedReportType))
            </Template>
        </Column>
        <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("services"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
            <Template>
                @((MarkupString)ruleDisplay.DisplayServices(rule, getActLocation(), SelectedReportType))
            </Template>
        </Column>
        @if(SelectedReportType == ReportType.NatRules)
        {
            <Column Class="table-active" TableItem="Rule" Context="rule" Title="@(userConfig.GetText("trans_source"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
                <Template>
                        @((MarkupString)ruleDisplay.DisplayTranslatedSource(rule, getActLocation()))
                </Template>
            </Column>
            <Column Class="table-active" TableItem="Rule" Context="rule" Title="@(userConfig.GetText("trans_destination"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
                <Template>
                    @((MarkupString)ruleDisplay.DisplayTranslatedDestination(rule, getActLocation()))
                </Template>
            </Column>
            <Column Class="table-active" TableItem="Rule" Context="rule" Title="@(userConfig.GetText("trans_services"))" Field="@(r => r.Name)" Sortable="true" Filterable="false" Hideable="true">
                <Template>
                    @((MarkupString)ruleDisplay.DisplayTranslatedService(rule, getActLocation()))
                </Template>
            </Column>
        }
        @if (SelectedReportType != ReportType.NatRules)
        {
            <Column TableItem="Rule" Title="@(userConfig.GetText("action"))" Field="@(r => r.Action)" Sortable="true" Filterable="false" Hideable="true" />
            <Column TableItem="Rule" Title="@(userConfig.GetText("track"))" Field="@(r => r.Track)" Sortable="true" Filterable="false" Hideable="true" />
        }
        <Column TableItem="Rule" Context="rule" Title="@(userConfig.GetText("enabled"))" Field="@(r => r.Disabled)" Sortable="true" Filterable="false" Hideable="true">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplayEnabled(rule, getActLocation()))
            </Template>
        </Column>
        <Column TableItem="Rule" Title="@(userConfig.GetText("uid"))" Field="@(r => r.Uid)" Sortable="true" Filterable="false" Hideable="true" />
        @if (SelectedReportType != ReportType.VarianceAnalysis)
        {
            <Column TableItem="Rule" Title="@(userConfig.GetText("comment"))" Field="@(r => r.Comment)" Sortable="true" Filterable="false" Hideable="true" />
        }

        <DetailTemplate TableItem="Rule">
            @if(context.Metadata != null)
            {
                <Detail Title="@(userConfig.GetText("created"))" Data="@context.Metadata?.Created?.ToString()" />
                <Detail Title="@(userConfig.GetText("last_modified"))" Data="@context.Metadata?.LastModified?.ToString()" />
                <Detail Title="@(userConfig.GetText("first_hit"))" Data="@context.Metadata?.FirstHit?.ToString()" />
                <Detail Title="@(userConfig.GetText("last_hit"))" Data="@context.Metadata?.LastHit?.ToString()" />
                <Detail Title="@(userConfig.GetText("last_certify_date"))" Data="@context.Metadata?.LastCertified?.ToString()" />
                <Detail Title="@(userConfig.GetText("last_recertifier"))" Data="@context.Metadata?.LastCertifierDn?.ToString()" />
                // <Detail Title="@(userConfig.GetText("marked_to_be_removed"))" Data="@((context.Metadata?.ToBeRemoved)?'yes':'no'))" /> 
                    // TODO: not able to get this syntactically working, but implicit info is there: ToBeRemoved == NOT DecertificationDate IS NULL
                <Detail Title="@(userConfig.GetText("decert_date"))" Data="@context.Metadata?.DecertificationDate?.ToString()" />
                <Detail Title="@(userConfig.GetText("recert_comment"))" Data="@context.Metadata?.Comment?.ToString()" />
                <Detail Title="@(userConfig.GetText("recert_history"))" Data="@(context.Metadata?.RecertHistory.Count > 0 ? ":" : "")" />
                @foreach(var recert in context.Metadata!.RecertHistory)
                {
                    <Detail Title="@(recert.RecertDate.ToString())" Data="@(getHistoryString(recert))" />
                }
            }
        </DetailTemplate>

        <CustomRow TableItem="Rule" IsActiveForItem="(r => !String.IsNullOrEmpty(r.SectionHeader))">
            <tr>
                <td class="bg-light" colspan="@(reportTable?.Columns.Count + 1)">
                    <div class="font-weight-bold">@(context.SectionHeader)</div>
                </td>
            </tr>
        </CustomRow>
        <Pager ShowPageNumber="true" ShowTotalCount="true" />
    </Table>
}

@code
{
    [Parameter]
    public bool Recertification { get; set; } = false;
    
    [Parameter]
    public bool ReadonlyMode { get; set; } = false;

    [Parameter]
    public ReportType SelectedReportType { get; set; }

    [Parameter]
    public EventCallback<List<Rule>> SelectedRulesChanged { get; set; }

    [Parameter]
    public List<Rule> SelectedRules { get; set; } = [];

    [Parameter]
    public int RulesPerPage { get; set; } = 0;

    [Parameter]
    public Rule[]? Rules { get; set; } = [];
    
    [Parameter]
    public bool HandleAsVariance { get; set; } = false;


    private bool RecertificationHistory { get; set; } = false;
    private ITable<Rule>? reportTable;

    private NatRuleDisplayHtml? ruleDisplay;
    
    protected override void OnInitialized()
    {
        ruleDisplay = new NatRuleDisplayHtml(userConfig);
    }

    private string getTableRowClasses(Rule rule)
    {
        string classes = "";
        if(rule.SectionHeader != null)
        {
            classes = "hide-all-but-second-child second-child-full-width ";
        }
        if(Recertification)
        {
            classes += rule.Metadata.Style;
        }
        return classes;
    }

    private OutputLocation getActLocation()
    {
        return Recertification ? OutputLocation.certification : OutputLocation.report;
    }

    private string getHistoryString(Recertification recert)
    {
        string username = new DistName(recert.UserDn).UserName;
        return $"{userConfig.GetText(recert.Recertified ? "recertified_by" : "decertified_by")} {username} " +
            $"{userConfig.GetText("as_owner")} {recert.FwoOwner?.Name} {userConfig.GetText("comment")}: {recert.Comment}";
    }
}
