@inject UserConfig userConfig
@using FWO.Report
@using FWO.Ui.Display

<RadzenDataGrid @ref="RulesGrid"
                TItem="Rule"
                Data="@Rules"
                GroupProperty="GroupKey"
                Groups="@(new List<string> { " GroupKey" })"
                AllowGrouping="false"
                ExpandMode="DataGridExpandMode.Multiple"
                AllowFiltering="true"
                AllowSorting="true"
                ShowGroupPanel="false"
                Render="@OnRender">
    <GroupHeaderTemplate Context="group">
        <tr style="background-color:#f0f0f0; font-weight:bold;">
            <td>Rulebase: @(group.Data.Key)</td>
        </tr>
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="GroupKey" Groupable="true" Title="@(userConfig.GetText("number"))" Filterable="false" Sortable="true" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)context.DisplayOrderNumberString)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="@(userConfig.GetText("name"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @context.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("source_zone"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplaySourceZone(context))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("source"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplaySource(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("destination_zone"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplayDestinationZone(context))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("destination"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplayDestination(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("services"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplayServices(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("enabled"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplayEnabled(context, getActLocation()))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("enforcing_devices"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplayEnforcingGateways(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Uid" Title="@(userConfig.GetText("uid"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @context.Uid
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Comment" Title="@(userConfig.GetText("comment"))" Groupable="false" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @context.Comment
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public ReportType SelectedReportType { get; set; }

    [Parameter]
    public List<ManagementReport> Managements { get; set; } = new();
    private NatRuleDisplayHtml? RuleDisplay;
    private bool Recertification { get; set; } = false;

    private bool Loading { get; set; }

    #region Radzen UI Boilerplate
    private RadzenDataGrid<Rule> RulesGrid;    
    private bool? GroupsExpanded { get; set; } = false;
    #endregion

    List<Rule> Rules;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ShowLoading();

        RuleDisplay = new NatRuleDisplayHtml(userConfig);

        var management = Managements.Select(mgt => new ManagementReportController(mgt)).First();
        var device = management.Devices.Select(dev => DeviceReportController.FromDeviceReport(dev)).First();

        var ungroupedRules = ReportRules.GetAllRulesOfGateway(device, management);

        Rules = ungroupedRules.Select(rule =>
        {
            var helper = new RulebaseHelper(rule.DisplayOrderNumberString);
            rule.GroupKey = helper.GetPrefix(helper.Level - 1).ToString();
            return rule;
        }).ToList();
    }

    private void OnRender(DataGridRenderEventArgs<Rule> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "GroupKey", Title="Rulebase", SortOrder = SortOrder.Ascending });
            StateHasChanged();
        }
    }

    private void OnGroupRowRender(GroupRowRenderEventArgs args)
    {
        args.Expanded = GroupsExpanded;
    }

    private async Task ShowLoading()
    {
        Loading = true;

        await Task.Yield();

        Loading = false;
    }

    private OutputLocation getActLocation()
    {
        return Recertification ? OutputLocation.certification : OutputLocation.report;
    }
}
