@inject UserConfig userConfig
@using FWO.Report
@using FWO.Ui.Display

<RadzenDataGrid @ref="RulesGrid"
TItem="Rule"
Data="@Rules"
AllowGrouping="false"
ExpandMode="DataGridExpandMode.Multiple"
AllowFiltering="true"
AllowSorting="true">
    <HeaderTemplate>       
        <RadzenButton Icon="unfold_more" Size="@ButtonSize.Small" ButtonStyle="@ButtonStyle.Base" Variant="@Variant.Flat" />
        <RadzenButton Icon="unfold_less" Size="@ButtonSize.Small" ButtonStyle="@ButtonStyle.Base" Variant="@Variant.Flat" />
        <RadzenTextBox Placeholder="Search for IP, object, action, ..." />
        <RadzenButton Icon="search" Size="@ButtonSize.Small" Variant="@Variant.Flat"></RadzenButton>
    </HeaderTemplate>
    <Template Context="Rule">
        <p>Section (xx.xx-yy.yy)</p>
        <SectionHeader Title="bla">
            
        </SectionHeader>
    </Template>
    <Columns>        
        <RadzenDataGridColumn Title="@(userConfig.GetText("number"))" Visible="true" Groupable="false" Sortable="false" Filterable="false">            
            <Template Context="Rule">
                <p>@Rule.DisplayOrderNumberString</p>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("name"))" Visible="true" Groupable="false" Sortable="false" Filterable="false">            
            <Template Context="Rule">
                <p>@Rule.Name</p>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public ReportType SelectedReportType { get; set; }

    [Parameter]
    public List<ManagementReport> Managements { get; set; } = new();
    private NatRuleDisplayHtml? RuleDisplay;
    private bool Recertification { get; set; } = false;

    private bool Loading { get; set; }

    #region Radzen UI Boilerplate
    private RadzenDataGrid<Rule> RulesGrid;    
    private bool? GroupsExpanded { get; set; } = false;
    #endregion

    List<Rule> Rules;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ShowLoading();

        RuleDisplay = new NatRuleDisplayHtml(userConfig);

        var management = Managements.Select(mgt => new ManagementReportController(mgt)).First();
        var device = management.Devices.Select(dev => DeviceReportController.FromDeviceReport(dev)).First();

        var ungroupedRules = ReportRules.GetAllRulesOfGateway(device, management);

        Rules = ungroupedRules.ToList();
    }

    private async Task ShowLoading()
    {
        Loading = true;

        await Task.Yield();

        Loading = false;
    }

    private OutputLocation getActLocation()
    {
        return Recertification ? OutputLocation.certification : OutputLocation.report;
    }
}
