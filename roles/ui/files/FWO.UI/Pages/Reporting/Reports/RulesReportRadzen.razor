@inject UserConfig userConfig
@using FWO.Report
@using FWO.Report.Data
@using FWO.Ui.Display

<TreeTable TItem="Rule" Columns="Columns" Nodes="treeData">
    <CellTemplate Context="item">
        @item.Name
    </CellTemplate>
</TreeTable>

@code {
    [Parameter]
    public ReportType SelectedReportType { get; set; }

    [Parameter]
    public List<ManagementReport> Managements { get; set; } = new();
    private NatRuleDisplayHtml? RuleDisplay;
    private bool Recertification { get; set; } = false;

    private bool Loading { get; set; }

    #region Radzen UI Boilerplate
    private RadzenDataGrid<Rule> RulesGrid;    
    private bool? GroupsExpanded { get; set; } = false;
    #endregion

    List<Rule> Rules;
    List<string> Columns = new List<string>() { "No.", "Name", "Source", "Destination" };

    List<TreeNode<Rule>> treeData;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // await ShowLoading();

        // RuleDisplay = new NatRuleDisplayHtml(userConfig);

        var management = Managements.Select(mgt => new ManagementReportController(mgt)).First();
        var device = management.Devices.Select(dev => DeviceReportController.FromDeviceReport(dev)).First();

        var ungroupedRules = ReportRules.GetAllRulesOfGateway(device, management);

        treeData = new List<TreeNode<Rule>>();

        //
    }


    private async Task ShowLoading()
    {
        Loading = true;

        await Task.Yield();

        Loading = false;
    }

    private OutputLocation getActLocation()
    {
        return Recertification ? OutputLocation.certification : OutputLocation.report;
    }
}
