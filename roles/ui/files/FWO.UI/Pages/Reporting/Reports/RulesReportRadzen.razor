@inject UserConfig userConfig
@using FWO.Report
@using FWO.Ui.Display

<RadzenDataGrid @ref="RulesGrid" PageSize="0" AllowGrouping="false" AllowFiltering="true" AllowPaging="false" AllowSorting="true" 
    Data="@Rules" TItem="Rule" Render="@OnRender" GroupRowRender="OnGroupRowRender"
    IsLoading=@Loading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading"
    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true">
    <Columns>
        <RadzenDataGridColumn Property="DisplayOrderNumberString" Title="@(userConfig.GetText("number"))" Filterable="false" Sortable="true" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)context.DisplayOrderNumberString)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="@(userConfig.GetText("name"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @context.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("source_zone"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplaySourceZone(context))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("source"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplaySource(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="DestinationZone.Name" Title="@(userConfig.GetText("destination_zone"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplayDestinationZone(context))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="DestinationZone.Name" Title="@(userConfig.GetText("destination"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplayDestination(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("services"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplayServices(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("enabled"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplayHtml.DisplayEnabled(context, getActLocation()))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="@(userConfig.GetText("enforcing_devices"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @((MarkupString)RuleDisplay.DisplayEnforcingGateways(context, getActLocation(), SelectedReportType))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Uid" Title="@(userConfig.GetText("uid"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @context.Uid
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Comment" Title="@(userConfig.GetText("comment"))" Sortable="true" Filterable="false" TextAlign="TextAlign.Left">
            <Template>
                @context.Comment
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public ReportType SelectedReportType { get; set; }

    [Parameter]
    public List<ManagementReport> Managements { get; set; } = new();
    private NatRuleDisplayHtml? RuleDisplay;
    private bool Recertification { get; set; } = false;

    private bool Loading { get; set; }

    #region Radzen UI Boilerplate
    private RadzenDataGrid<Rule> RulesGrid;
    private IQueryable<Rule> Rules;     
    private bool? GroupsExpanded { get; set; } = false;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ShowLoading();

        RuleDisplay = new NatRuleDisplayHtml(userConfig);

        var management = Managements.Select(mgt => new ManagementReportController(mgt)).First();
        var device = management.Devices.Select(dev => DeviceReportController.FromDeviceReport(dev)).First();

        Rules = ReportRules.GetAllRulesOfGateway(device, management).AsQueryable();

        var grouped = RulebaseHelper.GroupByLevel(Rules);
    }

    private void OnRender(DataGridRenderEventArgs<Rule> args)
    {
        if(args.FirstRender)
        {            
            StateHasChanged();
        }
    }

    private void OnGroupRowRender(GroupRowRenderEventArgs args)
    {
        args.Expanded = GroupsExpanded;
    }

    private async Task ShowLoading()
    {
        Loading = true;

        await Task.Yield();

        Loading = false;
    }

    private OutputLocation getActLocation()
    {
        return Recertification ? OutputLocation.certification : OutputLocation.report;
    }
}
