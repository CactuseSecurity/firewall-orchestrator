@implements IDisposable
@inject UserConfig userConfig
@inject IEventMediator EventMediator
@using FWO.Report
@using FWO.Report.Data
@using FWO.Services.EventMediator.Events
@using FWO.Services.EventMediator.Interfaces
@using FWO.Ui.Display

@if(IsLoading)
{
    <div class="d-flex justify-content-center align-items-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <TreeTable TItem="Rule" Nodes="RulesNodes">
        <CellTemplate Context="rule">
            @if(rule is not null)
            {
                @rule.Name
            }
        </CellTemplate>
    </TreeTable>
}

@code {
    [Parameter, EditorRequired]
    required public List<ManagementReport> Managements { get; set; } = [];

    [Parameter, EditorRequired]
    required public ReportType SelectedReportType { get; set; }

    private List<TreeNode<Rule>> RulesNodes = new List<TreeNode<Rule>>();
    private bool IsLoading = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        EventMediator.Subscribe<ReportGenerationEvent>(nameof(ReportGenerationEvent), _ => LoadData());
    }

    private void LoadData()
    {
        IsLoading = true;
        try
        {
            RulesNodes = new List<TreeNode<Rule>>();

            foreach(ManagementReport report in Managements)
            {
                ManagementReportController management = new ManagementReportController(report);

                if(!management.ContainsRules())
                {
                    continue;
                }

                foreach(DeviceReport devReport in management.Devices)
                {
                    if(!devReport.ContainsRules())
                    {
                        continue;
                    }

                    DeviceReportController device = DeviceReportController.FromDeviceReport(devReport);                    
                    var test = ReportRules.GetAllRulesOfGateway(device, management);
                }
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        EventMediator.Unsubscribe<ReportGenerationEvent>(nameof(ReportGenerationEvent));
    }
}
