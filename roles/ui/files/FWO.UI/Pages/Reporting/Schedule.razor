@using FWO.Config.Api
@using FWO.Report.Filter

@implements IDisposable

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/report/schedule"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Reporter}, {Roles.ReporterViewAll}, {Roles.Auditor}, {Roles.Modeller}")]

<ReportTabset/>

<button type="button" class="btn btn-sm btn-success mb-1" @onclick="() => { reportScheduleInEdit = new ReportSchedule() { RepeatInterval = Interval.Never }; ShowSaveReportScheduleDialog = true; }">@(userConfig.GetText("add"))</button>

<div class="vheight75">
    <Table TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="ReportSchedule" Items="reportSchedules" PageSize="0">
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("actions"))">
            <Template>
                @if (context.Owner.DbId == uiUserDbId || authenticationState != null && authenticationState.User.IsInRole(Roles.Admin))
                {
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-warning" @onclick="() => { reportScheduleInEdit = context; actDate = actTime = context.StartTime; ShowEditReportScheduleDialog = true; }">@(userConfig.GetText("edit"))</button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => { reportScheduleInEdit = context; ShowDeleteReportScheduleDialog = true; }">@(userConfig.GetText("delete"))</button>
                    </div>
                }
            </Template>
        </Column>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("id"))" Field="@(reportSchedule => reportSchedule.Id)" Sortable="true" Filterable="true"/>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("name"))" Field="@(reportSchedule => reportSchedule.Name)" Sortable="true" Filterable="true"/>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("start_time"))" Field="@(reportSchedule => reportSchedule.StartTime)" Sortable="true" Filterable="true">
            <Template>
                @(context.StartTime.ToString("yyyy-MM-dd HH:mm:ssK"))
            </Template>
        </Column>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("repeat_interval"))" Field="@(reportSchedule => reportSchedule.RepeatOffset)">
            <Template>
                @(context.RepeatInterval != Interval.Never ? context.RepeatOffset : "") @(userConfig.GetText(context.RepeatInterval.ToString()))
            </Template>
        </Column>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("template"))" Field="@(reportSchedule => reportSchedule.Template.Name)" Sortable="true" Filterable="true"/>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("owner"))" Field="@(reportSchedule => reportSchedule.Owner.Name)" Sortable="true" Filterable="true"/>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("active"))" Field="@(reportSchedule => reportSchedule.Active)" Sortable="true" Filterable="true">
                <Template>
                    @(GlobalConfig.ShowBool(context.Active))
                </Template>
        </Column>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("count"))" Field="@(reportSchedule => reportSchedule.Counter)" Sortable="true" Filterable="true"/>
        <Column TableItem="ReportSchedule" Title="@(userConfig.GetText("output_format"))" Field="@(reportSchedule => reportSchedule.OutputFormat)">
            <Template>
                @String.Join(", ", context.OutputFormat.ConvertAll(format => format.Name.ToUpperInvariant()))
            </Template>
        </Column>
    </Table>
</div>

<PopUp Size=PopupSize.Large Title="@(userConfig.GetText("report_schedule"))" Show="@(ShowSaveReportScheduleDialog || ShowEditReportScheduleDialog)">
    <Body>
        <div>
            <div class="form-group row">
                <label for="scheduleId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                <label class="col-sm-8 col-form-label col-form-label-sm">@reportScheduleInEdit.Id</label>
            </div>
            <div class="form-group row mt-2">
                <label for="scheduleName" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                <div class="col-sm-8">
                    <input id="scheduleName" type="text" class="form-control form-control-sm" @bind="reportScheduleInEdit.Name" />
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="scheduleStartTime" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("start_time")):</label>
                <div class="col-sm-4">
                    <input id="scheduleStartTime" type="time" step="60" class="form-control form-control-sm" @bind="actTime" />
                </div>
                <div class="col-sm-4">
                    <input id="scheduleStartTimeDate" type="date" class="form-control form-control-sm" @bind="actDate" />
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="scheduleRepeatEvery" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("repeat_every")):</label>
                <div class="col-sm-3">
                    <input id="scheduleRepeatEvery" type="number" min="1" class="form-control form-control-sm" @bind="reportScheduleInEdit.RepeatOffset" />
                </div>
                <div class="col-sm-5">
                    <Dropdown @bind-SelectedElement="reportScheduleInEdit.RepeatInterval" ElementToString="@(i => userConfig.GetText(i.ToString()))" Elements="Enum.GetValues(typeof(Interval)).Cast<Interval>()" >
                        <ElementTemplate Context="interval">
                            @(userConfig.GetText(interval.ToString()))
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="scheduleTemplate" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("template")):</label>
                <div class="col-sm-8">
                    <Dropdown ElementType="ReportTemplate" ElementToString="@(o => o.Name)" Nullable="false"
                        @bind-SelectedElement="reportScheduleInEdit.Template" Elements="reportTemplates">
                        <ElementTemplate Context="reportTemplate">
                            @reportTemplate.Name
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="scheduleOutputFormat" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("output_format")):</label>
                <div class="col-sm-8">
                    <div class="form-inline justify-content-between">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="outputFormatHtml" value="Html"
                                   checked="@(reportScheduleInEdit.OutputFormat.Exists(format => format.Name == GlobalConst.kHtml))"
                                   @onchange="@(_ => reportScheduleInEdit.OutputFormat.AddOrRemove(GlobalConst.kHtml))">
                            <label class="form-check-label" for="outputFormatHtml">HTML</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="outputFormatPdf" value="Pdf"
                                   checked="@(reportScheduleInEdit.OutputFormat.Exists(format => format.Name == GlobalConst.kPdf))"
                                   @onchange="@(_ => reportScheduleInEdit.OutputFormat.AddOrRemove(GlobalConst.kPdf))">
                            <label class="form-check-label" for="outputFormatPdf">PDF</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="outputFormatJson" value="Json"
                                   checked="@(reportScheduleInEdit.OutputFormat.Exists(format => format.Name == GlobalConst.kJson))"
                                   @onchange="@(_ => reportScheduleInEdit.OutputFormat.AddOrRemove(GlobalConst.kJson))">
                            <label class="form-check-label" for="outputFormatJson">JSON</label>
                        </div>
                        @if (((ReportType)reportScheduleInEdit.Template.ReportParams?.ReportType).IsResolvedReport())
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="outputFormatCsv" value="Csv"
                                    checked="@(reportScheduleInEdit.OutputFormat.Exists(format => format.Name == GlobalConst.kCsv))"
                                    @onchange="@(_ => reportScheduleInEdit.OutputFormat.AddOrRemove(GlobalConst.kCsv))">
                                <label class="form-check-label" for="outputFormatCsv">CSV</label>
                            </div>
                        }
                        else
                        {
                            reportScheduleInEdit.OutputFormat.Remove(GlobalConst.kCsv);
                        }
                    </div>
                </div>
            </div>
            <div class="form-group row mt-2">
                <label for="scheduleActive" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("active")):</label>
                <div class="col-sm-8" style="padding-top: calc(0.25rem + 1px);">
                    <input id="scheduleActive" type="checkbox" style="max-height: 22px;" @bind="reportScheduleInEdit.Active" />
                </div>
            </div>
        </div>
    </Body>
    <Footer>
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-primary" @onclick="async () => await (ShowSaveReportScheduleDialog ? SaveReportSchedule() : EditScheduledReport())">@(userConfig.GetText("save"))</button>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => ShowEditReportScheduleDialog = ShowSaveReportScheduleDialog = false">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="Report Schedule" Size=PopupSize.Small Show="@ShowDeleteReportScheduleDialog">
    <Body>
        <p>@(userConfig.GetText("U2002")) "@reportScheduleInEdit.Name" ?</p>
    </Body>
    <Footer>
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-danger" @onclick="DeleteReportSchedule">@(userConfig.GetText("delete"))</button>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => ShowDeleteReportScheduleDialog = false">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    private GraphQlApiSubscription<List<ReportSchedule>>? reportSchedulesSubscription;
    private List<ReportSchedule> reportSchedules = new List<ReportSchedule>();
    private ReportSchedule reportScheduleInEdit = new ReportSchedule();
    private DateTime actDate = DateTime.Today;
    private DateTime actTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);
    private bool ShowSaveReportScheduleDialog = false;
    private bool ShowEditReportScheduleDialog = false;
    private bool ShowDeleteReportScheduleDialog = false;

    private int uiUserDbId;

    List<ReportTemplate> reportTemplates = new ();

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private AuthenticationState? authenticationState;
    private bool showRuleRelatedReports => authenticationStateTask!.Result.User.IsInRole(Roles.Reporter)
        || authenticationStateTask!.Result.User.IsInRole(Roles.ReporterViewAll)
        || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);
    private bool showModellingReports => authenticationStateTask!.Result.User.IsInRole(Roles.Modeller)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Admin)
        || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initial fetch to speed up loading before subscription is established
            reportSchedules = (await apiConnection.SendQueryAsync<List<ReportSchedule>>(ReportQueries.getReportSchedules));
            reportSchedulesSubscription = apiConnection.GetSubscription<List<ReportSchedule>>(HandleSubscriptionError, OnReportScheduleUpdate, ReportQueries.subscribeReportScheduleChanges);
            reportTemplates = await apiConnection.SendQueryAsync<List<ReportTemplate>>(ReportQueries.getReportTemplates);
            reportTemplates = reportTemplates.Where(rt => (showRuleRelatedReports && ((ReportType)rt.ReportParams.ReportType).IsDeviceRelatedReport() || 
                                                           showModellingReports && ((ReportType)rt.ReportParams.ReportType).IsModellingReport())).ToList();
            uiUserDbId = userConfig.User.DbId;
            authenticationState = await authenticationStateTask!;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("schedule_fetch"), userConfig.GetText("schedule_upd_err_msg"), true);
        }
    }

    private async void HandleSubscriptionError(Exception exception)
    {
        await InvokeAsync(() => DisplayMessageInUi(exception, userConfig.GetText("schedule_tile"), userConfig.GetText("schedule_upd_err_msg"), true));
    }

    private async void OnReportScheduleUpdate(List<ReportSchedule> newReportSchedules)
    {
        Log.WriteDebug("Report Scheduling", "Received report schedule update.");
        reportSchedules = newReportSchedules;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveReportSchedule()
    {
        try
        {
            //$report_schedule_name: String!
            //$report_schedule_owner_id: Int!
            //$report_schedule_template_id: Int!
            //$report_schedule_start_time: timestamp!
            //$report_schedule_repeat: Int! # 0 do not repeat, 2 daily, 2 weekly, 3 monthly, 4 yearly
            //$report_schedule_every: Int! # every x days/weeks/months/years
            //$report_schedule_active: Boolean!

            reportScheduleInEdit.StartTime = actDate.Date.Add(actTime.TimeOfDay);
            if (reportScheduleInEdit.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("save_scheduled_report"), userConfig.GetText("U0001"), true);
            }
            if (checkInput())
            {
                // Add report schedule to DB
                dynamic queryVariablesReportSchedule = new
                {
                    report_schedule_name = reportScheduleInEdit.Name,
                    report_schedule_owner_id = uiUserDbId,
                    report_schedule_template_id = reportScheduleInEdit.Template.Id,
                    report_schedule_start_time = reportScheduleInEdit.StartTime,
                    report_schedule_repeat = reportScheduleInEdit.RepeatOffset,
                    report_schedule_every = (int)reportScheduleInEdit.RepeatInterval,
                    report_schedule_active = reportScheduleInEdit.Active,
                    report_schedule_formats = new { data = reportScheduleInEdit.OutputFormat }
                };
                reportScheduleInEdit.Id = (await apiConnection.SendQueryAsync<NewReturning>(ReportQueries.addReportSchedule, queryVariablesReportSchedule)).ReturnIds[0].NewId;

                ShowSaveReportScheduleDialog = false;
            }
        }
        catch (Exception exception)
        {
            Log.WriteError("Save scheduled report", "Unclassified error.", exception);
            DisplayMessageInUi(exception, userConfig.GetText("save_scheduled_report"), "", false);
        }
    }

    private async Task EditScheduledReport()
    {
        try
        {
            reportScheduleInEdit.StartTime = actDate.Date.Add(actTime.TimeOfDay);
            if (reportScheduleInEdit.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("edit_scheduled_report"), userConfig.GetText("U0001"), true);
            }
            if (checkInput())
            {
                var queryVariables = new
                {
                    report_schedule_id = reportScheduleInEdit.Id,
                    report_schedule_name = reportScheduleInEdit.Name,
                    report_schedule_owner_id = uiUserDbId,
                    report_schedule_template_id = reportScheduleInEdit.Template.Id,
                    report_schedule_start_time = reportScheduleInEdit.StartTime,
                    report_schedule_repeat = reportScheduleInEdit.RepeatOffset,
                    report_schedule_every = (int)reportScheduleInEdit.RepeatInterval,
                    report_schedule_active = reportScheduleInEdit.Active,
                    report_schedule_format_names = reportScheduleInEdit.OutputFormat.ConvertAll(format => format.Name),
                    report_schedule_format_rel = reportScheduleInEdit.OutputFormat.ConvertAll(format =>
                    new { report_schedule_format_name = format.Name, report_schedule_id = reportScheduleInEdit.Id })
                };

                await apiConnection.SendQueryAsync<object>(ReportQueries.editReportSchedule, queryVariables);

                ShowEditReportScheduleDialog = false;
            }
        }
        catch (Exception exception)
        {
            Log.WriteError("Edit scheduled report", "Unclassified error.", exception);
            DisplayMessageInUi(exception, userConfig.GetText("edit_scheduled_report"), "", false);
        }
    }

    private async Task DeleteReportSchedule()
    {
        try
        {
            var queryVariables = new
            {
                report_schedule_id = reportScheduleInEdit.Id
            };

            await apiConnection.SendQueryAsync<object>(ReportQueries.deleteReportSchedule, queryVariables);

            ShowDeleteReportScheduleDialog = false;
        }
        catch (Exception exception)
        {
            Log.WriteError("Delete scheduled report", "Unclassified error.", exception);
            DisplayMessageInUi(exception, userConfig.GetText("delete_scheduled_report"), "", false);
        }
    }

    private bool checkInput()
    {
        if(reportScheduleInEdit.Template == null || reportScheduleInEdit.Template.Id == 0)
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_scheduled_report"), userConfig.GetText("E2001"), true);
            return false;
        }
        return true;
    }

    public void Dispose()
    {
        reportSchedulesSubscription?.Dispose();
    }
}
