@using FWO.Config.Api

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/schedule"

<h3>@(userConfig.GetText("schedule"))</h3>

<button class="btn btn-sm btn-success mb-1" @onclick="() => { scheduledReportInEdit = new ScheduledReport() { RepeatInterval = Interval.Never }; ShowSaveScheduledReportDialog = true; }">@(userConfig.GetText("add"))</button>

<Table TableClass="table table-bordered table-sm table-responsive vheight75 overflow-auto sticky-header" TableItem="ScheduledReport" Items="scheduledReports" PageSize="0">
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("action"))">
        <Template>
            @if (context.Owner.DbId == uiUserDbId || authenticationState!.User.IsInRole("admin"))
            {
                <div class="btn-group">
                    <button class="btn btn-sm btn-warning" @onclick="() => { scheduledReportInEdit = context; actDate = actTime = context.StartTime; ShowEditScheduledReportDialog = true; }">@(userConfig.GetText("edit"))</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => { scheduledReportInEdit = context; ShowDeleteScheduledReportDialog = true; }">@(userConfig.GetText("delete"))</button>
                </div>
            }
        </Template>
    </Column>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("id"))" Field="@(scheduledReport => scheduledReport.Id)" Sortable="true" Filterable="true"/>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("name"))" Field="@(scheduledReport => scheduledReport.Name)" Sortable="true" Filterable="true"/>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("start_time"))" Field="@(scheduledReport => scheduledReport.StartTime)" Sortable="true" Filterable="true"/>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("repeat_interval"))" Field="@(scheduledReport => scheduledReport.RepeatOffset)">
        <Template>
            @(context.RepeatInterval != Interval.Never ? context.RepeatOffset : "") @(userConfig.GetText(context.RepeatInterval.ToString()))
        </Template>
    </Column>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("template"))" Field="@(scheduledReport => scheduledReport.Template.Name)" Sortable="true" Filterable="true"/>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("owner"))" Field="@(scheduledReport => scheduledReport.Owner.Name)" Sortable="true" Filterable="true"/>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("active"))" Field="@(scheduledReport => scheduledReport.Active)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.Active))
            </Template>
    </Column>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("count"))" Field="@(scheduledReport => scheduledReport.Counter)" Sortable="true" Filterable="true"/>
    <Column TableItem="ScheduledReport" Title="@(userConfig.GetText("output_format"))" Field="@(scheduledReport => scheduledReport.OutputFormat)">
        <Template>
            @String.Join(", ", context.OutputFormat.ConvertAll(format => format.Name.ToUpperInvariant()))
        </Template>
    </Column>
</Table>

<PopUp Large="true" Title="@(userConfig.GetText("report_schedule"))" Show="@(ShowSaveScheduledReportDialog || ShowEditScheduledReportDialog)">
    <Body>
        <div>
            <div class="form-group row">
                <label for="scheduleId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                <div class="col-sm-8">
                    <label class="col-sm-8">@scheduledReportInEdit.Id</label>
                </div>
                <label for="scheduleName" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                <div class="col-sm-8">
                    <input id="scheduleName" type="text" class="form-control form-control-sm" @bind="scheduledReportInEdit.Name" />
                </div>
            </div>
            <div class="form-group row">
                <label for="scheduleStartTime" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("start_time")):</label>
                <div class="col-sm-4">
                    <input id="scheduleStartTime" type="time" step="60" class="form-control form-control-sm" @bind="actTime" />
                </div>
                <div class="col-sm-4">
                    <input id="scheduleStartTimeDate" type="date" class="form-control form-control-sm" @bind="actDate" />
                </div>
            </div>
            <div class="form-group row">
                <label for="scheduleRepeatEvery" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("repeat_every")):</label>
                <div class="col-sm-4">
                    <input id="scheduleRepeatEvery" type="number" min="1" class="form-control form-control-sm" @bind="scheduledReportInEdit.RepeatOffset" />
                </div>
                <div class="col-sm-4">
                    <select class="form-control form-control-sm" @bind="scheduledReportInEdit.RepeatInterval">
                        <option value="@Interval.Never" selected>@(userConfig.GetText("Never"))</option>
                        <option value="@Interval.Days">@(userConfig.GetText("Days"))</option>
                        <option value="@Interval.Weeks">@(userConfig.GetText("Weeks"))</option>
                        <option value="@Interval.Months">@(userConfig.GetText("Months"))</option>
                        <option value="@Interval.Years">@(userConfig.GetText("Years"))</option>
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label for="scheduleTemplate" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("template")):</label>
                <div class="col-sm-8">
                    <select class="form-control form-control-sm" @bind="scheduledReportInEdit.Template.Id">
                        @foreach (ReportTemplate reportTemplate in reportTemplates)
                        {
                            <option value="@reportTemplate.Id">@reportTemplate.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label for="scheduleOutputFormat" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("output_format")):</label>
                <div class="col-sm-8">
                    <div class="form-inline justify-content-between">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="outputFormatHtml" value="Html"
                                   checked="@(scheduledReportInEdit.OutputFormat.Exists(format => format.Name == "html"))"
                                   @onchange="@(_ => scheduledReportInEdit.OutputFormat.AddOrRemove("html"))">
                            <label class="form-check-label" for="outputFormatHtml">HTML</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="outputFormatPdf" value="Pdf"
                                   checked="@(scheduledReportInEdit.OutputFormat.Exists(format => format.Name == "pdf"))"
                                   @onchange="@(_ => scheduledReportInEdit.OutputFormat.AddOrRemove("pdf"))">
                            <label class="form-check-label" for="outputFormatPdf">PDF</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="outputFormatJson" value="Json"
                                   checked="@(scheduledReportInEdit.OutputFormat.Exists(format => format.Name == "json"))"
                                   @onchange="@(_ => scheduledReportInEdit.OutputFormat.AddOrRemove("json"))">
                            <label class="form-check-label" for="outputFormatJson">JSON</label>
                        </div>
                        <div class="form-check">
                            <input disabled class="form-check-input" type="checkbox" id="outputFormatCsv" value="Csv"
                                   checked="@(scheduledReportInEdit.OutputFormat.Exists(format => format.Name == "csv"))"
                                   @onchange="@(_ => scheduledReportInEdit.OutputFormat.AddOrRemove("csv"))">
                            <label class="form-check-label" for="outputFormatCsv">CSV @(userConfig.GetText("coming_soon"))</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <label for="scheduleActive" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("active")):</label>
                <div class="col-sm-8">
                    <input id="scheduleActive" type="checkbox" class="form-control form-control-sm" @bind="scheduledReportInEdit.Active" />
                </div>
            </div>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-sm btn-primary" @onclick="async () => await (ShowSaveScheduledReportDialog ? SaveScheduledReport() : EditScheduledReport())">@(userConfig.GetText("save"))</button>
        <button class="btn btn-sm btn-secondary" @onclick="() => ShowEditScheduledReportDialog = ShowSaveScheduledReportDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

<PopUp Title="Report Schedule" Show="@ShowDeleteScheduledReportDialog">
    <Body>
        <p>@(userConfig.GetText("U2002")) "@scheduledReportInEdit.Name" ?</p>
    </Body>
    <Footer>
        <button class="btn btn-sm btn-danger" @onclick="DeleteScheduledReport">@(userConfig.GetText("delete"))</button>
        <button class="btn btn-sm btn-secondary" @onclick="() => ShowDeleteScheduledReportDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>

@code
{
    List<ScheduledReport> scheduledReports = new List<ScheduledReport>();
    ScheduledReport scheduledReportInEdit = new ScheduledReport();
    private DateTime actDate = DateTime.Today;
    private DateTime actTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);

    private bool ShowSaveScheduledReportDialog = false;
    private bool ShowEditScheduledReportDialog = false;
    private bool ShowDeleteScheduledReportDialog = false;

    private int uiUserDbId = -1;

    ReportTemplate[] reportTemplates = new ReportTemplate[0];

    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private AuthenticationState? authenticationState;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            scheduledReports = (await apiConnection.SendQueryAsync<ScheduledReport[]>(ReportQueries.getReportSchedules)).ToList();
            reportTemplates = await apiConnection.SendQueryAsync<ReportTemplate[]>(ReportQueries.getReportTemplates);
            uiUserDbId = userConfig.User.DbId;
            authenticationState = await authenticationStateTask!;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("schedule_fetch"), "", true);
        }
    }

    private async Task SaveScheduledReport()
    {
        try
        {
            //$report_schedule_name: String!
            //$report_schedule_owner_id: Int!
            //$report_schedule_template_id: Int!
            //$report_schedule_start_time: timestamp!
            //$report_schedule_repeat: Int! # 0 do not repeat, 2 daily, 2 weekly, 3 monthly, 4 yearly
            //$report_schedule_every: Int! # every x days/weeks/months/years
            //$report_schedule_active: Boolean!

            scheduledReportInEdit.StartTime = actDate.Date.Add(actTime.TimeOfDay);
            if (scheduledReportInEdit.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_scheduled_report"), userConfig.GetText("U0001"), true);
            }
            if (checkInput())
            {
                // Add report schedule to DB
                dynamic queryVariablesReportSchedule = new
                {
                    report_schedule_name = scheduledReportInEdit.Name,
                    report_schedule_owner_id = uiUserDbId,
                    report_schedule_template_id = scheduledReportInEdit.Template.Id,
                    report_schedule_start_time = scheduledReportInEdit.StartTime,
                    report_schedule_repeat = scheduledReportInEdit.RepeatOffset,
                    report_schedule_every = (int)scheduledReportInEdit.RepeatInterval,
                    report_schedule_active = scheduledReportInEdit.Active,
                    report_schedule_formats = new { data = scheduledReportInEdit.OutputFormat }
                };
                scheduledReportInEdit.Id = (await apiConnection.SendQueryAsync<NewReturning>(ReportQueries.addReportSchedule, queryVariablesReportSchedule)).ReturnIds[0].NewId;

                //// Add report schedule output format to DB (needs to be seperated because of unknown report schedule id)
                //var queryVariablesReportScheduleOutputFormat = new
                //{
                //    report_schedule_ids_formats = new
                //    {
                //        data = scheduledReportInEdit.OutputFormat.ConvertAll(format =>
                //        new { report_schedule_format_name = format.Name, report_schedule_id = scheduledReportInEdit.Id }).ToArray()
                //    }
                //};

                ////string test = JsonSerializer.Serialize(queryVariablesReportScheduleOutputFormat, new JsonSerializerOptions { WriteIndented = true });
                //ReturnId test = await apiConnection.SendQueryAsync<ReturnId>(ReportQueries.addReportScheduleFileFormats, queryVariablesReportScheduleOutputFormat);

                // Update scheduled reports
                scheduledReports = (await apiConnection.SendQueryAsync<ScheduledReport[]>(ReportQueries.getReportSchedules)).ToList();

                ShowSaveScheduledReportDialog = false;
            }
        }
        catch (Exception exception)
        {
            Log.WriteError("Save scheduled report", "Unclassified error.", exception);
            DisplayMessageInUi!(exception, userConfig.GetText("save_scheduled_report"), "", false);
        }
    }

    private async Task EditScheduledReport()
    {
        try
        {
            scheduledReportInEdit.StartTime = actDate.Date.Add(actTime.TimeOfDay);
            if (scheduledReportInEdit.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("edit_scheduled_report"), userConfig.GetText("U0001"), true);
            }
            if (checkInput())
            {
                var queryVariables = new
                {
                    report_schedule_id = scheduledReportInEdit.Id,
                    report_schedule_name = scheduledReportInEdit.Name,
                    report_schedule_owner_id = uiUserDbId,
                    report_schedule_template_id = scheduledReportInEdit.Template.Id,
                    report_schedule_start_time = scheduledReportInEdit.StartTime,
                    report_schedule_repeat = scheduledReportInEdit.RepeatOffset,
                    report_schedule_every = (int)scheduledReportInEdit.RepeatInterval,
                    report_schedule_active = scheduledReportInEdit.Active,
                    report_schedule_format_names = scheduledReportInEdit.OutputFormat.ConvertAll(format => format.Name),
                    report_schedule_format_rel = scheduledReportInEdit.OutputFormat.ConvertAll(format =>
                    new { report_schedule_format_name = format.Name, report_schedule_id = scheduledReportInEdit.Id })
                };

                await apiConnection.SendQueryAsync<object>(ReportQueries.editReportSchedule, queryVariables);
                scheduledReports = (await apiConnection.SendQueryAsync<ScheduledReport[]>(ReportQueries.getReportSchedules)).ToList();

                ShowEditScheduledReportDialog = false;
            }
        }
        catch (Exception exception)
        {
            Log.WriteError("Edit scheduled report", "Unclassified error.", exception);
            DisplayMessageInUi!(exception, userConfig.GetText("edit_scheduled_report"), "", false);
        }
    }

    private async Task DeleteScheduledReport()
    {
        try
        {
            var queryVariables = new
            {
                report_schedule_id = scheduledReportInEdit.Id
            };

            await apiConnection.SendQueryAsync<object>(ReportQueries.deleteReportSchedule, queryVariables);
            ScheduledReport? reportToDelete = scheduledReports.Find(scheduledReport => scheduledReport.Id == scheduledReportInEdit.Id);
            if (reportToDelete != null)
                scheduledReports.Remove(reportToDelete);

            ShowDeleteScheduledReportDialog = false;
        }
        catch (Exception exception)
        {
            Log.WriteError("Delete scheduled report", "Unclassified error.", exception);
            DisplayMessageInUi!(exception, userConfig.GetText("delete_scheduled_report"), "", false);
        }
    }

        private bool checkInput()
        {
            if(scheduledReportInEdit.Template == null || scheduledReportInEdit.Template.Id == 0)
            {
                DisplayMessageInUi!(null, userConfig.GetText("edit_scheduled_report"), userConfig.GetText("E2001"), true);
                return false;
            }
            return true;
        }
}
