@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("delete"))" Show="@Display" Size=PopupSize.Small OnClose="async () => await Close()">
    <Body>
        @if (Display)
        {
            <p>@(userConfig.GetText("U8001")) @(ObjectName)?</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.FwAdmin}")">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="Perform">@(DisplayService.DisplayButton(userConfig, "delete", Icons.Delete))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(DisplayService.DisplayButton(userConfig, "delete", Icons.Delete))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Close">@(DisplayService.DisplayButton(userConfig, "cancel", Icons.Cancel))</button>
        </div>
    </Footer>
</PopUp>
<InProgress Display="workInProgress" />


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    
    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public Func<Task> Delete { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<Task> ResetParent { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public string ObjectName { get; set; } = "";

    private bool workInProgress = false;


    private async Task Perform()
    {
        workInProgress = true;
        await Delete();
        await Close();
    }

    private async Task Close()
    {
        workInProgress = false;
        Display = false;
        await ResetParent();
    }
}
