@using FWO.Api.Client
@using FWO.Config.Api

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<hr />
@if(InitComplete)
{
    <div class="form-group row col-sm-12 mh-13">
        <div class="col-sm-3">
            <label class="col-sm-12 col-form-label col-form-label-sm">@(userConfig.GetText("source"))*:</label>
            @if (EditMode)
            {
                @foreach(var source in Sources.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
                {
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                        <label>@nwObjects.FirstOrDefault(x => x.Id == source.NetworkId)?.Name</label>
                        <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteSource(source)">x</button>
                    </div>
                }
                @foreach(var source in Sources.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
                {
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                        <input type="text" class="col-sm-9 form-control form-control-sm" @bind="source.Cidr.CidrString" />
                        <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteSource(source)">x</button>
                    </div>
                }
            }
            else
            {
                <div class="list-group">
                    @foreach(var source in Sources.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
                    {
                        <div class="list-group-item border bg-secondary">
                            <label>@nwObjects.FirstOrDefault(x => x.Id == source.NetworkId)?.Name</label>
                        </div>
                    }
                    @foreach(var source in Sources.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
                    {
                        <div class="list-group-item border bg-secondary">
                            <label>@source.Cidr.CidrString</label>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col-sm-3">
            <label for="taskDest" class="col-sm-12 col-form-label col-form-label-sm">@(userConfig.GetText("destination"))*:</label>
            @if (EditMode)
            {
                @foreach(var destination in Destinations.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
                {
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                        <label>@nwObjects.FirstOrDefault(x => x.Id == destination.NetworkId)?.Name</label>
                        <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteDestination(destination)">x</button>
                    </div>
                }
                @foreach(var destination in Destinations.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
                {
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                        <input type="text" class="col-sm-9 form-control form-control-sm" @bind="destination.Cidr.CidrString" />
                        <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteDestination(destination)">x</button>
                    </div>
                }
            }
            else
            {
                <div class="list-group">
                    @foreach(var destination in Destinations.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
                    {
                        <div class="list-group-item border bg-secondary">
                            <label>@nwObjects.FirstOrDefault(x => x.Id == destination.NetworkId)?.Name</label>
                        </div>
                    }
                    @foreach(var destination in Destinations.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
                    {
                        <div class="list-group-item border bg-secondary">
                            <label>@destination.Cidr.CidrString</label>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col-sm-6">
            <label for="taskService" class="col-sm-12 col-form-label col-form-label-sm">@(userConfig.GetText("service"))*:</label>
            @if (EditMode)
            {
                @foreach(var service in Services.Where(x => (x.ServiceId != null && x.ServiceId != 0)))
                {
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                        <label>@nwServices.FirstOrDefault(x => x.Id == service.ServiceId)?.Name</label>
                        <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteService(service)">x</button>
                    </div>
                }
                @foreach(var service in Services.Where(x => (x.ServiceId == null || x.ServiceId == 0)))
                {
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("port")):</label>
                        <input id="taskServicePort" type="number" class="col-sm-3 form-control form-control-sm" @bind="service.Port" />
                        <label class="col-sm-2">@(userConfig.GetText("protocol")):</label>
                        <div class="col-sm-4">
                            <Dropdown ElementType="IpProtocol" SelectedElement="@selectedServiceProtos[service]" SelectedElementChanged="(args) => SetProto(args, service)"
                                    ElementToString="@(p => selectedServiceProtos[service].Name)" Elements="ipProtos">
                                <ElementTemplate Context="proto">
                                    @proto.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                        <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteService(service)">x</button>
                    </div>
                }
            }
            else
            {
                <div class="list-group">
                    @foreach(var service in Services.Where(x => (x.ServiceId != null && x.ServiceId != 0)))
                    {
                        <label class="list-group-item border bg-secondary">@((service.ServiceId != null) ? nwServices.Find(x => x.Id == service.ServiceId)?.Name : "")</label>
                    }
                    @foreach(var service in Services.Where(x => (x.ServiceId == null || x.ServiceId == 0)))
                    {
                        <div class="list-group-item border bg-secondary">
                            <label class="col-sm-5">@service.Port</label> / 
                            <label class="col-sm-5">@ipProtos.Find(x => x.Id == service.ProtoId)?.Name</label>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    @if (EditMode)
    {
        <div class="bg-secondary">
            <hr />
            <div class="form-group row col-sm-12">
                <div class="col-sm-4">
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                        <input @onsubmit:preventDefault @onsubmit:stopPropagation type="text" class="col-sm-10 form-control form-control-sm" placeholder="@(userConfig.GetText("insert_ip"))" @bind="newSourceIpString"/>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                        <input @onsubmit:preventDefault @onsubmit:stopPropagation type="text" class="col-sm-10 form-control form-control-sm" placeholder="@(userConfig.GetText("insert_ip"))" @bind="newDestinationIpString" />
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group row">
                        <label class="col-sm-2">@(userConfig.GetText("port")):</label>
                        <input id="taskServicePort" type="number" class="col-sm-3 form-control form-control-sm" placeholder="@(userConfig.GetText("insert_port"))" @bind="newServicePort" />
                        <label class="col-sm-3">@(userConfig.GetText("protocol")):</label>
                        <div class="col-sm-4">
                            <Dropdown ElementType="IpProtocol" @bind-SelectedElement="newServiceProto" ElementToString="@(p => p.Name)" Elements="ipProtos" Nullable="true">
                                <ElementTemplate Context="proto">
                                    @proto.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    </div>
                </div>
            </div>
            @if(userConfig.ReqAllowObjectSearch)
            {
                <div class="form-group row col-sm-12">
                    <div class="col-sm-4">
                        <div class="form-group row">
                            <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                            <Dropdown ElementType="NetworkObject" @bind-SelectedElement="newSourceNetwork" ElementToString="@(n => n.Name)" Elements="nwObjects">
                                <ElementTemplate Context="nwObject">
                                    @nwObject.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row">
                            <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                            <Dropdown ElementType="NetworkObject" @bind-SelectedElement="newDestinationNetwork" ElementToString="@(n => n.Name)" Elements="nwObjects">
                                <ElementTemplate Context="nwObject">
                                    @nwObject.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group row">
                            <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                            <Dropdown ElementType="NetworkService" @bind-SelectedElement="newService" ElementToString="@(s => s.Name)" Elements="nwServices">
                                <ElementTemplate Context="nwService">
                                    @nwService.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public List<NwObjectElement> Sources { get; set; } = new List<NwObjectElement>();

    [Parameter]
    public EventCallback<List<NwObjectElement>> SourcesChanged { get; set; }

    [Parameter]
    public List<NwObjectElement> Destinations { get; set; } = new List<NwObjectElement>();

    [Parameter]
    public EventCallback<List<NwObjectElement>> DestinationsChanged { get; set; }

    [Parameter]
    public List<NwServiceElement> Services { get; set; } = new List<NwServiceElement>();

    [Parameter]
    public EventCallback<List<NwServiceElement>> ServicesChanged { get; set; }

    [Parameter]
    public long TaskId { get; set; } = 0;

    [Parameter]
    public bool EditMode { get; set; } = false;

    private bool InitComplete = false;
    private List<IpProtocol> ipProtos = new List<IpProtocol>();
    private List<NetworkObject> nwObjects = new List<NetworkObject>();
    private List<NetworkService> nwServices = new List<NetworkService>();
    
    private NetworkObject? newSourceNetworkInt = null;
    private NetworkObject? newSourceNetwork
    {
        get => newSourceNetworkInt;
        set
        {
            if(value != null && value.Id != 0)
            {
                Sources.Add(new NwObjectElement(){ NetworkId = value.Id, TaskId = TaskId });
            }
            newSourceNetworkInt = null;
            StateHasChanged();
        }
    }

    private string newSourceIpInt = "";
    private string newSourceIpString
    {
        get => newSourceIpInt;
        set
        {
            if(value != null && value != "")
            {
                NwObjectElement obj = new NwObjectElement(value, TaskId);
                if (obj.Cidr.Valid)
                {
                    Sources.Add(obj);
                    newSourceIpInt = "";
                }
            }
            StateHasChanged();
        }
    }

    private NetworkObject? newDestinationNetworkInt = null;
    private NetworkObject? newDestinationNetwork
    {
        get => newDestinationNetworkInt;
        set
        {
            if(value != null && value.Id != 0)
            {
                Destinations.Add(new NwObjectElement(){ NetworkId = value.Id, TaskId = TaskId });
            }
            newDestinationNetworkInt = null;
            StateHasChanged();
        }
    }

    private string newDestinationIpInt = "";
    private string newDestinationIpString
    {
        get => newDestinationIpInt;
        set
        {
            if(value != null && value != "")
            {
                NwObjectElement obj = new NwObjectElement(value, TaskId);
                if (obj.Cidr.Valid)
                {
                    Destinations.Add(obj);
                    newDestinationIpInt = "";
                }
            }
            StateHasChanged();
        }
    }

    private NetworkService? newServiceInt = null;
    private NetworkService? newService
    {
        get => newServiceInt;
        set
        {
            if(value != null && value.Id != 0)
            {
                Services.Add(new NwServiceElement(){ ServiceId = value.Id, TaskId = TaskId });
            }
            newServiceInt = null;
            StateHasChanged();
        }
    }

    private int? newServicePortInt = null;
    private int? newServicePort
    {
        get => newServicePortInt;
        set
        {
            if(value != null && value != 0 && newServiceProtoInt != null && newServiceProtoInt.Id != 0)
            {
                NwServiceElement newService = new NwServiceElement(){ Port = (int)value, ProtoId = newServiceProtoInt.Id, TaskId = TaskId };
                Services.Add(newService);
                selectedServiceProtos.Add(newService, newServiceProtoInt);
                newServicePortInt = null;
                newServiceProtoInt = null;
            }
            else
            {
                newServicePortInt = value;
            }
            StateHasChanged();
        }
    }

    private IpProtocol? newServiceProtoInt = null;
    private IpProtocol? newServiceProto
    {
        get => newServiceProtoInt;
        set
        {
            if(value != null && value.Id != 0 && newServicePortInt != null && newServicePortInt != 0)
            {
                NwServiceElement newService = new NwServiceElement(){ Port = (int)newServicePortInt, ProtoId = value.Id, TaskId = TaskId };
                Services.Add(newService);
                selectedServiceProtos.Add(newService, value);
                newServicePortInt = null;
                newServiceProtoInt = null;
            }
            else
            {
                newServiceProtoInt = value;
            }
            StateHasChanged();
        }
    }
    private Dictionary<NwServiceElement, IpProtocol> selectedServiceProtos = new Dictionary<NwServiceElement, IpProtocol>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            List<IpProtocol> ipProtosOrig = await apiConnection.SendQueryAsync<List<IpProtocol>>(FWO.Api.Client.Queries.StmQueries.getIpProtocols);
            ipProtos = CustomSort(ipProtosOrig);
            // nwObjects = await apiConnection.SendQueryAsync<List<NetworkObject>>(FWO.Api.Client.Queries.ObjectQueries.getNetworkObjects);
            // nwServices = await apiConnection.SendQueryAsync<List<NetworkObject>>(FWO.Api.Client.Queries.ObjectQueries.getNetworkServices);
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override void OnParametersSet()
    {
        selectedServiceProtos = new Dictionary<NwServiceElement, IpProtocol>();
        foreach(var svc in Services)
        {
            selectedServiceProtos.Add(svc, ipProtos.FirstOrDefault(p => p.Id == svc.ProtoId) ?? new IpProtocol());
        }
    }

    private List<IpProtocol> CustomSort(List<IpProtocol> ListIn)
    {
        List<IpProtocol> ListOut = new List<IpProtocol>();
        IpProtocol? tcp = ListIn.Find(x => x.Name.ToLower() == "tcp");
        if(tcp != null)
        {
            ListOut.Add(tcp);
            ListIn.Remove(tcp);
        }
        IpProtocol? udp = ListIn.Find(x => x.Name.ToLower() == "udp");
        if(udp != null)
        {
            ListOut.Add(udp);
            ListIn.Remove(udp);
        }
        IpProtocol? icmp = ListIn.Find(x => x.Name.ToLower() == "icmp");
        if(icmp != null)
        {
            ListOut.Add(icmp);
            ListIn.Remove(icmp);
        }
        foreach(var proto in ListIn.OrderBy(x => x.Name).ToList())
        {
            if (proto.Name.ToLower() != "unassigned")
            {
                ListOut.Add(proto);
            }
        }
        return ListOut;
    }

    private void SetProto(IpProtocol newProto, NwServiceElement selectedService)
    {
        NwServiceElement? changedElem = Services.FirstOrDefault(x => x.ElemId == selectedService.ElemId);
        if(changedElem != null)
        {
            changedElem.ProtoId = newProto.Id;
        }
        selectedServiceProtos[selectedService] = newProto;
        StateHasChanged();
    }

    private void DeleteSource(NwObjectElement obj)
    {
        Sources.Remove(obj);
        StateHasChanged();
    }

    private void DeleteDestination(NwObjectElement obj)
    {
        Destinations.Remove(obj);
        StateHasChanged();
    }

    private void DeleteService(NwServiceElement obj)
    {
        Services.Remove(obj);
        selectedServiceProtos.Remove(obj);
        StateHasChanged();
    }

}
