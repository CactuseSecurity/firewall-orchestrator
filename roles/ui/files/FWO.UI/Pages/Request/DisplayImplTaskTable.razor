@using FWO.Api.Client
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if(WfHandler.InitDone)
{
    @if (WfHandler.PlanReqTaskMode)
    {
        <div class="btn-group">
            <button type="button" class="btn btn-success m-2" @onclick:preventDefault @onclick="AddImplTask">
                @(ModellingHandlerBase.DisplayButton(userConfig, "create_implementation", Icons.Add))</button>
            @if(WfHandler.ActReqTask.TaskType == TaskType.access.ToString() && userConfig.ReqActivatePathAnalysis)
            {
                <button type="button" class="btn btn-success m-2" @onclick:preventDefault @onclick="CheckImplTasks">
                    @(userConfig.GetText("check_impltasks"))</button>
                <button type="button" class="btn btn-warning m-2" @onclick:preventDefault @onclick="AutocreateImplTasks">
                    @(userConfig.GetText("auto_create_impltasks"))</button>
                @if(WfHandler.ActReqTask.ImplementationTasks.Count > 0)
                {
                    <button type="button" class="btn btn-danger m-2" @onclick:preventDefault @onclick="CleanupImplTasks">
                        @(userConfig.GetText("cleanup_impltasks"))</button>
                }
                else
                {
                    <button type="button" class="btn btn-danger m-2" disabled>@(userConfig.GetText("cleanup_impltasks"))</button>
                }
            }
        </div>
    }
    @if (AllImplTasks != null && AllImplTasks.Count > 0)
    {
        <div class="m-2">
            <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="WfImplTask" Items="AllImplTasks" PageSize="0" ColumnReorder="true">
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                    <Template>
                        <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowImplTask(implTask)">
                                @(ModellingHandlerBase.DisplayButton(userConfig, "details", Icons.Display))</button>
                            @if(!WfHandler.StateMatrix(implTask.TaskType).PhaseActive[WorkflowPhases.planning] && WfHandler.StateMatrix(implTask.TaskType).PhaseActive[WorkflowPhases.approval])
                            {
                                <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowApprovals(implTask)">
                                    @(userConfig.GetText("approvals"))</button>
                            }
                            @if (!WfHandler.ReadOnlyMode)
                            {
                                @if (WfHandler.PlanReqTaskMode && implTask.StateId < WfHandler.StateMatrix(implTask.TaskType).LowestEndState)
                                {
                                    <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => EditImplTask(implTask)">
                                        @(ModellingHandlerBase.DisplayButton(userConfig, "edit", Icons.Edit))</button>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteImplTask(implTask)">
                                        @(ModellingHandlerBase.DisplayButton(userConfig, "delete", Icons.Delete))</button>
                                }
                                else if (Phase >= WorkflowPhases.implementation && implTask.StateId >= WfHandler.StateMatrix(implTask.TaskType).LowestInputState && WfHandler.TicketList.FirstOrDefault(x => x.Id == implTask.TicketId)?.StateId >= WfHandler.MasterStateMatrix.LowestInputState)
                                {
                                    @if (implTask.StateId < WfHandler.StateMatrix(implTask.TaskType).LowestStartedState)
                                    {
                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.FwAdmin}")">
                                            <Authorized Context="ctx">
                                                <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="async () => await StartImplPhase(implTask)">
                                                    @(ModellingHandlerBase.DisplayButton(userConfig, "start_" + Phase.ToString(), Icons.Edit))</button>
                                            </Authorized>
                                            <NotAuthorized Context="ctx">
                                                <button type="button" class="btn btn-sm btn-warning" disabled>
                                                    @(ModellingHandlerBase.DisplayButton(userConfig, "start_" + Phase.ToString(), Icons.Edit))</button>
                                            </NotAuthorized>
                                        </AuthorizeView>
                                    }
                                    else if (implTask.StateId < WfHandler.StateMatrix(implTask.TaskType).LowestEndState)
                                    {
                                        <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="async () => await ContinueImplPhase(implTask)">
                                            @(ModellingHandlerBase.DisplayButton(userConfig, "continue_" + Phase.ToString(), Icons.Edit))</button>
                                        <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => AssignImplTask(implTask)">
                                            @(ModellingHandlerBase.DisplayButton(userConfig, "assign1", Icons.Assign))</button>
                                    }
                                }
                            }
                        </div>
                    </Template>
                </Column>
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("type"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
                    <Template>
                        @(userConfig.GetText(implTask.TaskType))
                    </Template>
                </Column>
                @if(ImplTaskView)
                {
                    <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("ticket_id"))" Field="@(x => x.TicketId)" Sortable="true" Filterable="false" >
                        <Template>
                            @(implTask.TicketId != 0 ? implTask.TicketId : "")
                        </Template>
                    </Column>
                    <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("ticket"))" Field="@(x => x.TicketId)" Sortable="true" Filterable="false" >
                        <Template>
                            @(ResolveTicket(implTask)?.Title ?? "")
                        </Template>
                    </Column>
                    <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("task"))" Field="@(x => x.ReqTaskId)" Sortable="true" Filterable="false" >
                        <Template>
                            @(implTask.ReqTaskId != 0 ? ResolveTicket(implTask)?.Tasks.FirstOrDefault(x => x.Id == implTask.ReqTaskId)?.Title : "")
                        </Template>
                    </Column>
                }
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("number"))" Field="@(x => x.TaskNumber)" Sortable="true" Filterable="true" />
                @if(userConfig.ReqOwnerBased)
                {
                    <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("owner"))" Field="@(x => x.ReqTaskId)" Sortable="true">
                        <Template>
                            @(GetOwnerName(implTask))
                        </Template>
                    </Column>
                }
                else
                {
                    <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("gateway"))" Field="@(x => x.DeviceId)" Sortable="true">
                        <Template>
                            @(implTask.DeviceId != null && implTask.DeviceId != 0 ? WfHandler.Devices[WfHandler.Devices.FindIndex(x => x.Id == implTask.DeviceId)].Name : "")
                        </Template>
                    </Column>
                }
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
                    <Template>
                        @(States.Name[implTask.StateId])
                    </Template>
                </Column>
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("implementer"))" Field="@(x => x.CurrentHandler)" Sortable="true" Filterable="true" >
                    <Template>
                        @(implTask.CurrentHandler?.Name)
                    </Template>
                </Column>
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("assigned"))" Field="@(x => x.AssignedGroup)" Sortable="true" Filterable="true" >
                    <Template>
                        @(new DistName(implTask.AssignedGroup).UserName)
                    </Template>
                </Column>
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("start"))" Field="@(x => x.Start)" Sortable="true" Filterable="true" />
                <Column Context="implTask" TableItem="WfImplTask" Title="@(userConfig.GetText("stop"))" Field="@(x => x.Stop)" Sortable="true" Filterable="true" />
            </Table>
        </div>
    }
}

<PopUp Title="@(userConfig.GetText("check_impltasks"))" Show="@DisplayInfo" Size=PopupSize.Large OnClose="() => DisplayInfo = false">
    <Body>
        @if (DisplayInfo)
        {
            @if(deviceCheck.Count == 0)
            {
                @(userConfig.GetText("no_gws_found"))
            }
            else
            {
                <div class="m-2 vheight75">
                    <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="KeyValuePair<string, bool>" Items="deviceCheck" PageSize="0" ColumnReorder="true">
                        <Column TableItem="KeyValuePair<string, bool>" Title="@(userConfig.GetText("device"))" Field="@(x => x.Key)" Sortable="true" Filterable="true" />
                        <Column TableItem="KeyValuePair<string, bool>" Title="@(userConfig.GetText("impltask_created"))" Field="@(x => x.Value)" Sortable="false">
                            <Template>
                                @(GlobalFunc.ShowBool(context.Value))
                            </Template>
                        </Column>
                    </Table>
                </div>
            }
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => DisplayInfo = false">@(userConfig.GetText("ok"))</button>
    </Footer>
</PopUp>

<DisplayImplementationTask Phase="Phase" WfHandler="WfHandler" ResetParent="Reset" StateMatrix="WfHandler.ActStateMatrix" States="States" />
<AssignObject @bind-Display="WfHandler.DisplayAssignImplTaskMode" ResetParent="Reset" StatefulObject="WfHandler.ActImplTask" Assign="Assign"
    AssignBack="AssignBack" ObjectName="@WfHandler.ActImplTask.Title" RoleList="validRoles" Owner="@WfHandler.ActReqTask.Owners.FirstOrDefault()?.Owner"/>
<DeleteObject @bind-Display="WfHandler.DisplayDeleteImplTaskMode" ResetParent="Reset" Delete="WfHandler.ConfDeleteImplTask" ObjectName="@(WfHandler.ActImplTask.Title)"/>
<DeleteObject @bind-Display="WfHandler.DisplayCleanupMode" ResetParent="Reset" Delete="WfHandler.ConfCleanupImplTasks" ObjectName="@(userConfig.GetText("all_impltasks"))"/>
<DisplayApprovals @bind-Display="WfHandler.DisplayApprovalImplMode" WfHandler="WfHandler" ResetParent="Reset" Approvals="WfHandler.ActReqTask.Approvals" States="States"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.approval;

    [Parameter]
    public WfStateDict States { get; set; } = new ();

    [Parameter]
    public WfHandler WfHandler { get; set; } = new ();

    [Parameter]
    public Func<Task> ResetParent { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public List<WfImplTask>? AllImplTasks { get; set; } = new List<WfImplTask>();

    [Parameter]
    public bool ImplTaskView { get; set; } = false;

    [Parameter]
    public Func<WfImplTask, Task> StartImplPhase { get; set; } = DefaultInit.DoNothing;

    static List<string> validRoles = new (){ Roles.Implementer, Roles.FwAdmin };
    private bool DisplayInfo = false;
    private List<KeyValuePair<string, bool>> deviceCheck = new ();


    private async Task Reset()
    {
        await ResetParent();
        WfHandler.ResetImplTaskActions();
        StateHasChanged();
    }

    private WfTicket? ResolveTicket(WfImplTask implTask)
    {
        if(implTask.TicketId != 0)
        {
            int idx = WfHandler.TicketList.FindIndex(x => x.Id == implTask.TicketId);
            if(idx >= 0)
            {
                return WfHandler.TicketList[idx];
            }
        }
        return null;
    }

    private string GetOwnerName(WfImplTask implTask)
    {
        if(implTask.ReqTaskId != 0)
        {
            WfTicket? ticket = ResolveTicket(implTask);
            if(ticket != null && ticket.Tasks.Count > 0)
            {
                WfReqTask? reqTask = ticket.Tasks.FirstOrDefault(x => x.Id == implTask.ReqTaskId);
                if(reqTask != null && reqTask.Owners != null && reqTask.Owners.Count > 0)
                {
                    return reqTask.Owners?.First()?.Owner.Name ?? "";
                }
            }
        }
        return "";
    }

    private void ShowImplTask(WfImplTask implTask)
    {
        WfHandler.SelectImplTask(implTask, ObjAction.display);
    }

    private void AddImplTask()
    {
        WfImplTask newTask = new (WfHandler.ActReqTask, false)
        {
            TaskNumber = WfHandler.ActReqTask.HighestImplTaskNumber() + 1,
            DeviceId = (WfHandler.Devices.Count > 0 ? WfHandler.Devices[0].Id : 0)
        };
        if(WfHandler.Devices.Count > 0)
        {
            newTask.Title += ": "+ WfHandler.Devices[WfHandler.Devices.FindIndex(x => x.Id == WfHandler.Devices[0].Id)].Name;
        }
        WfHandler.SelectImplTask(newTask, ObjAction.add);
    }

    private async Task AutocreateImplTasks()
    {
        await WfHandler.CreateAccessImplTasksFromPathAnalysis(WfHandler.ActReqTask);
    }

    private async Task Assign(WfStatefulObject grp)
    {
        await WfHandler.AssignImplTaskGroup(grp);
        UpdateImplTaskInList();
    }

    private async Task AssignBack()
    {
        await WfHandler.AssignImplTaskBack();
        UpdateImplTaskInList();
    }

    private void UpdateImplTaskInList()
    {
        int? idx = AllImplTasks?.FindIndex(x => x.Id == WfHandler.ActImplTask.Id);
        if(idx != null && idx >= 0)
        {
            AllImplTasks[(int)idx] = WfHandler.ActImplTask;
        }
    }

    private async Task CheckImplTasks()
    {
        List<Device> foundDevices = await (new PathAnalysis(apiConnection)).getAllDevices(WfHandler.ActReqTask.Elements);
        deviceCheck = new List<KeyValuePair<string, bool>>();
        foreach(var dev in foundDevices)
        {
            deviceCheck.Add(new KeyValuePair<string, bool>(dev.Name ?? "", WfHandler.ActReqTask.ImplementationTasks.FirstOrDefault(x => x.DeviceId == dev.Id) != null));
        }
        DisplayInfo = true;
    }

    private void CleanupImplTasks()
    {
        WfHandler.SetImplTaskPopUpOpt(ObjAction.displayCleanup);
    }

    private void EditImplTask(WfImplTask implTask)
    {
        WfHandler.SelectImplTask(implTask, ObjAction.edit);
    }

    private void DeleteImplTask(WfImplTask implTask)
    {
        WfHandler.SelectImplTaskPopUp(implTask, ObjAction.displayDelete);
    }

    private void ShowApprovals(WfImplTask implTask)
    {
        WfHandler.SelectImplTaskPopUp(implTask, ObjAction.displayApprovals);
    }

    private void AssignImplTask(WfImplTask implTask)
    {
        WfHandler.SelectImplTaskPopUp(implTask, ObjAction.displayAssign);
    }

    private async Task ContinueImplPhase(WfImplTask implTask)
    {
        await WfHandler.ContinueImplPhase(implTask);
    }
}
