@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject UserConfig userConfig

@if(WfHandler.InitDone)
{
    @if (WfHandler.EditTicketMode)
    {
        <button type="button" class="btn btn-success m-2" @onclick:preventDefault @onclick="AddReqTask">@(ModellingHandlerBase.DisplayButton(userConfig, "add_task", Icons.Add))</button>
    }
    @if (WfHandler.ActTicket.Tasks.Count > 0)
    {
        <div class="m-2">
            <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="WfReqTask" Items="WfHandler.ActTicket.Tasks" PageSize="0" ColumnReorder="true">
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                    <Template>
                        <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowReqTask(context)">
                                    @(ModellingHandlerBase.DisplayButton(userConfig, "details", Icons.Display))</button>
                            @if(WfHandler.StateMatrix(context.TaskType).PhaseActive[WorkflowPhases.approval])
                            {
                                <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowApprovals(context)">
                                    @(userConfig.GetText("approvals"))</button>
                            }
                            @if (WfHandler.EditTicketMode && context.StateId < WfHandler.StateMatrix(context.TaskType).LowestStartedState)
                            {
                                <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => EditReqTask(context)">
                                    @(ModellingHandlerBase.DisplayButton(userConfig, "edit", Icons.Edit))</button>
                                <button type="button" class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteReqTask(context)">
                                    @(ModellingHandlerBase.DisplayButton(userConfig, "delete", Icons.Delete))</button>
                            }
                            @if (Phase > WorkflowPhases.request && !WfHandler.ReadOnlyMode)
                            {
                                @if (context.StateId >= WfHandler.StateMatrix(context.TaskType).LowestInputState && context.StateId < WfHandler.StateMatrix(context.TaskType).LowestStartedState)
                                {
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.FwAdmin}")">
                                        <Authorized Context="ctx">
                                            <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="async () => await StartPhase(context)">
                                                @(userConfig.GetText("start_" + Phase.ToString()))</button>
                                        </Authorized>
                                        <NotAuthorized Context="ctx">
                                            <button type="button" class="btn btn-sm btn-warning" disabled>@(userConfig.GetText("start_" + Phase.ToString()))</button>
                                        </NotAuthorized> 
                                    </AuthorizeView>
                                }
                                else if (context.StateId < WfHandler.StateMatrix(context.TaskType).LowestEndState)
                                {
                                    <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="async () => await ContinuePhase(context)">
                                        @(userConfig.GetText("continue_" + Phase.ToString()))</button>
                                    @if(Phase == WorkflowPhases.planning)
                                    {
                                        <button type="button" class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => AssignTask(context)">
                                            @(ModellingHandlerBase.DisplayButton(userConfig, "assign1", Icons.Assign))</button>
                                    }
                                }
                            }
                        </div>
                    </Template>
                </Column>
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("type"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
                    <Template>
                        @(userConfig.GetText(context.TaskType))
                    </Template>
                </Column>
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("tasks"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
                    <Template>
                        @(context.ImplementationTasks.Count)
                    </Template>
                </Column>
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
                    <Template>
                        @(States.Name[context.StateId])
                    </Template>
                </Column>
                <Column TableItem="WfReqTask" Title="@(userConfig.GetText("current_handler"))" Field="@(x => x.CurrentHandler)" Sortable="true" Filterable="true">
                    <Template>
                        @(context.CurrentHandler?.Name)
                    </Template>
                </Column>
                @if(Phase == WorkflowPhases.approval)
                {
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("approval_deadline"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" >
                        <Template>
                            @(context.Approvals.FirstOrDefault(x => x.InitialApproval)?.Deadline)
                        </Template>
                    </Column>
                }
                else
                {
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("assigned"))" Field="@(x => x.AssignedGroup)" Sortable="true" Filterable="true" >
                        <Template>
                            @(new DistName(context.AssignedGroup).UserName)
                        </Template>
                    </Column>
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("start"))" Field="@(x => x.Start)" Sortable="true" Filterable="true" />
                    <Column TableItem="WfReqTask" Title="@(userConfig.GetText("stop"))" Field="@(x => x.Stop)" Sortable="true" Filterable="true" />
                }
            </Table>
        </div>
    }
}

<DisplayRequestTask Phase="Phase" States="States" WfHandler="WfHandler" ResetParent="Reset" StartImplPhase="StartImplPhase"/>
<AssignObject @bind-Display="WfHandler.DisplayAssignReqTaskMode" ResetParent="Reset" StatefulObject="WfHandler.ActReqTask" Assign="WfHandler.AssignReqTaskGroup" AssignBack="WfHandler.AssignReqTaskBack" ObjectName="@WfHandler.ActReqTask.Title" RoleList="validRoles"/>
<DeleteObject @bind-Display="WfHandler.DisplayDeleteReqTaskMode" ResetParent="Reset" Delete="WfHandler.ConfDeleteReqTask" ObjectName="@WfHandler.ActReqTask.Title"/>
<DisplayApprovals @bind-Display="WfHandler.DisplayApprovalReqMode" WfHandler="WfHandler" ResetParent="Reset" Approvals="WfHandler.ActReqTask.Approvals" States="States"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.request;

    [Parameter]
    public WfStateDict States { get; set; } = new ();

    [Parameter]
    public WfHandler WfHandler { get; set; } = new ();

    [Parameter]
    public Func<Task> ResetParent { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<WfReqTask, Task> StartPhase { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<WfImplTask, Task> StartImplPhase { get; set; } = DefaultInit.DoNothing;

    static List<string> validRoles = new (){Roles.Planner, Roles.FwAdmin};


    private async Task Reset()
    {
        await ResetParent();
        WfHandler.ResetReqTaskActions();
        StateHasChanged();
    }

    private void ShowReqTask(WfReqTask reqTask)
    {
        WfHandler.SelectReqTask(reqTask, ObjAction.display);
    }

    private void AddReqTask()
    {
        WfHandler.SelectReqTask(new WfReqTask(){ RuleAction = 1, Tracking = 1 }, ObjAction.add);
    }

    private void EditReqTask(WfReqTask reqTask)
    {
        WfHandler.SelectReqTask(reqTask, ObjAction.edit);
    }

    private void DeleteReqTask(WfReqTask reqTask)
    {
        WfHandler.SelectReqTaskPopUp(reqTask, ObjAction.displayDelete);
    }

    private void ShowApprovals(WfReqTask reqTask)
    {
        WfHandler.SelectReqTaskPopUp(reqTask, ObjAction.displayApprovals);
    }

    private void AssignTask(WfReqTask reqTask)
    {
        WfHandler.SelectReqTaskPopUp(reqTask, ObjAction.displayAssign);
    }

    private async Task ContinuePhase(WfReqTask reqTask)
    {
        await WfHandler.ContinuePhase(reqTask);
    }
}
