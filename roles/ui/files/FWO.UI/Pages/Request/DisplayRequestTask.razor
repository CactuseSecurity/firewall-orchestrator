@using FWO.Api.Client
@using FWO.Api.Client.Queries
@using FWO.Config.Api
@using FWO.Ui.Services
@using FWO.Ui.Pages.NetworkModelling

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("task") + ": " + WfHandler.ActReqTask.Title)" Show="@WfHandler.DisplayReqTaskMode" Size=PopupSize.XLarge OnClose="async () => await Close()">
    <Body>
        @if (WfHandler.DisplayReqTaskMode)
        {
            <form>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <div class="form-group row">
                            <label class="col-sm-6 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                            <div class="col-sm-6">
                                <label class="col-sm-12 border bg-secondary">@WfHandler.ActReqTask.Id</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-10">
                        <div class="form-group row">
                            <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                            <div class="col-sm-11">
                                <input type="text" class="form-control form-control-sm" readonly="@(!WfHandler.EditReqTaskMode)" @bind="WfHandler.ActReqTask.Title" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row mt-2">
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                            <div class="col-sm-8">
                                <label class="col-sm-12 h-100 border bg-secondary">@States.Name[WfHandler.ActReqTask.StateId]</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-5 col-form-label col-form-label-sm">@(userConfig.GetText("handler")):</label>
                            <div class="col-sm-7">
                                <label class="col-sm-12 h-100 border bg-secondary">@WfHandler.ActReqTask.CurrentHandler?.Name</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("assigned")):</label>
                            <div class="col-sm-8">
                                <label class="col-sm-12 h-100 border bg-secondary">@(new DistName(WfHandler.ActReqTask.AssignedGroup).UserName)</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row mt-2">
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                            <div class="col-sm-8">
                                @if (WfHandler.EditReqTaskMode)
                                {
                                    <Dropdown ElementType="TaskType" @bind-SelectedElement="actTaskType" ElementToString="@(t => userConfig.GetText(t.ToString()))" Elements="availableTaskTypes.Where(x => x != TaskType.master)" >
                                        <ElementTemplate Context="type">
                                            @(userConfig.GetText(type.ToString()))
                                        </ElementTemplate>
                                    </Dropdown>
                               }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@(userConfig.GetText(actTaskType.ToString()))</label>
                                }
                            </div>
                        </div>
                    </div>
                    @if(actTaskType == TaskType.access && !WfHandler.ActStateMatrix.PhaseActive[WorkflowPhases.planning] && userConfig.ReqAutoCreateImplTasks == AutoCreateImplTaskOptions.enterInReqTask)
                    {
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("gateway"))*:</label>
                                <div class="col-sm-8">
                                    @if (WfHandler.EditReqTaskMode)
                                    {
                                        <Dropdown ElementType="Device" @bind-SelectedElements="selectedDevices" ElementToString="@(d => d.Name)" Elements="WfHandler.Devices" Multiselect="true">
                                            <ElementTemplate Context="device">
                                                @device.Name
                                            </ElementTemplate>
                                        </Dropdown>
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@DisplayDevices()</label>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if(actTaskType == TaskType.rule_delete)
                    {
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("gateway"))*:</label>
                                <div class="col-sm-8">
                                    @if (WfHandler.EditReqTaskMode)
                                    {
                                        <Dropdown ElementType="Device" @bind-SelectedElement="actRuleDevice" ElementToString="@(d => d.Name)" Elements="WfHandler.Devices">
                                            <ElementTemplate Context="device">
                                                @device.Name
                                            </ElementTemplate>
                                        </Dropdown>
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@actRuleDevice?.Name</label>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if(actTaskType == TaskType.new_interface)
                    {
                        @if (WfHandler.EditReqTaskMode)
                        {
                            <div class="col-sm-7">
                                <div class="form-group row">
                                    <SelectOwner @bind-SelectedOwner="actOwner" Apps="WfHandler.AllOwners" WithConnectionStatus="false" Nullable="true"/>
                                </div>
                            </div>
                        }
                        else
                        {
                            @if(WfHandler.GetAddInfoValue(AdditionalInfoKeys.ReqOwner) == "")
                            {
                                <div class="col-sm-7">
                                    <div class="form-group row">
                                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("owner"))*:</label>
                                        <label class="col-sm-9 border bg-secondary">@actOwner?.Display()</label>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-sm-4">
                                    <div class="form-group row">
                                        <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("owner"))*:</label>
                                        <label class="col-sm-8 border bg-secondary">@actOwner?.Display()</label>
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group row">
                                        <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("requesting_owner")):</label>
                                        <label class="col-sm-8 border bg-secondary">@WfHandler.GetRequestingOwner()</label>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else if(actTaskType == TaskType.group_create)
                    {
                        <div class="col-sm-7">
                            <div class="form-group row">
                                <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                                <div class="col-sm-11">
                                    <input type="text" class="form-control form-control-sm" readonly="@(!WfHandler.EditReqTaskMode)" @bind="actGrpName" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
                @if(actTaskType == TaskType.generic)
                {
                    <div class="form-group row mt-2">
                        <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("free_text")):</label>
                        <div class="col-sm-11">
                            <textarea rows="2" type="text" class="form-control form-control-sm" readonly="@(!WfHandler.EditReqTaskMode)" @bind="WfHandler.ActReqTask.FreeText"/>   
                        </div>
                    </div>
                }
                else if(actTaskType == TaskType.access)
                {
                    <div class="form-group row mt-2">
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action"))*:</label>
                                <div class="col-sm-8">
                                    @if (WfHandler.EditReqTaskMode)
                                    {
                                        <Dropdown ElementType="RuleAction" @bind-SelectedElement="actRuleAction" ElementToString="@(a => a.Name)" Elements="ruleActions">
                                            <ElementTemplate Context="action">
                                                @action.Name
                                            </ElementTemplate>
                                        </Dropdown>
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@actRuleAction?.Name</label>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("track"))*:</label>
                                <div class="col-sm-8">
                                    @if (WfHandler.EditReqTaskMode)
                                    {
                                        <Dropdown ElementType="Tracking" @bind-SelectedElement="actTracking" ElementToString="@(t => t.Name)" Elements="trackings">
                                            <ElementTemplate Context="track">
                                                @track.Name
                                            </ElementTemplate>
                                        </Dropdown>
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@actTracking?.Name</label>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("valid_from")):</label>
                                <div class="col-sm-8">
                                    @if (WfHandler.EditReqTaskMode)
                                    {
                                        <input type="date" class="form-control form-control-sm" @bind="WfHandler.ActReqTask.TargetBeginDate" />
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@WfHandler.ActReqTask.TargetBeginDate?.ToString("d")</label>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("valid_to")):</label>
                                <div class="col-sm-8">
                                    @if (WfHandler.EditReqTaskMode)
                                    {
                                        <input type="date" class="form-control form-control-sm" @bind="WfHandler.ActReqTask.TargetEndDate" />
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@WfHandler.ActReqTask.TargetEndDate?.ToString("d")</label>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="form-group row mt-2">
                    <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("reason")):</label>
                    <div class="col-sm-11">
                        <textarea rows="2" type="text" class="form-control form-control-sm" readonly="@(!WfHandler.EditReqTaskMode)" @bind="WfHandler.ActReqTask.Reason"/>   
                    </div>
                </div>

                @if(actTaskType == TaskType.access)
                {
                    <DisplayAccessElements Sources="actSources" @bind-SourcesToAdd="sourcesToAdd" @bind-SourcesToDelete="sourcesToDelete"
                        Destinations="actDestinations" @bind-DestinationsToAdd="destinationsToAdd" @bind-DestinationsToDelete="destinationsToDelete"
                        Services="actServices" @bind-ServicesToAdd="servicesToAdd" @bind-ServicesToDelete="servicesToDelete"
                        TaskId="WfHandler.ActReqTask.Id" EditMode="WfHandler.EditReqTaskMode" />
                }
                else if(actTaskType == TaskType.rule_delete)
                {
                    <DisplayRules @bind-Rules="actRules" TaskId="WfHandler.ActReqTask.Id" EditMode="WfHandler.EditReqTaskMode" />
                }
                else if(actTaskType == TaskType.group_create)
                {
                    <div class="col-sm-4 mt-2">
                        @if (WfHandler.EditReqTaskMode)
                        {
                            <IpSelector IpAddresses="actSources" @bind-IpsToAdd="sourcesToAdd" @bind-IpsToDelete="sourcesToDelete" WithLabel="false"/>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach(var source in actSources.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
                                {
                                    <div class="list-group-item border bg-secondary">
                                        <label>@source.Cidr.CidrString</label>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }

                @if(!WfHandler.EditReqTaskMode)
                {
                    <div class="form-group row mt-2">
                        <div class="col-sm-1">
                            <label class="col-form-label col-form-label-sm">@(userConfig.GetText("comments")):</label>
                            @if(WfHandler.PlanReqTaskMode || WfHandler.ApproveReqTaskMode)
                            {
                                <button type="button" class="btn btn-sm btn-success" @onclick:preventDefault @onclick="InitAddComment">
                                    @(ModellingHandlerBase.DisplayButton(userConfig, "add_comment", Icons.Add))</button>
                            }
                        </div>
                        <div class="col-sm-11">
                            <textarea rows="3" type="text" class="form-control form-control-sm" readonly="true">@allComments</textarea>
                        </div>
                    </div>
                }

                <div class="col-sm-12 mt-2">
                    <div class="btn-group">
                        @foreach(var action in offeredActions)
                        {
                            @if(WfHandler.EditReqTaskMode || WfHandler.PlanReqTaskMode || WfHandler.ApproveReqTaskMode || WfStateAction.IsReadonlyType(action.ActionType))
                            {
                                <button type="button" class="btn btn-sm btn-dark ml-13" @onclick:preventDefault @onclick="() => PerformAction(action)">@action.ButtonText</button>
                            }
                        }
                    </div>
                </div>

                @if(Phase == WorkflowPhases.planning || WfHandler.ActReqTask.ImplementationTasks.Count > 0)
                {
                    <h5 class="mt-2">@(userConfig.GetText("implementation_tasks"))</h5>

                    <DisplayImplTaskTable Phase="Phase" States="States" WfHandler="WfHandler" ResetParent="Reset" 
                        AllImplTasks="WfHandler.ActReqTask.ImplementationTasks" StartImplPhase="StartImplPhase"/>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (WfHandler.EditReqTaskMode)
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Requester}, {Roles.FwAdmin}")">
                    <Authorized>
                        @if(WfHandler.AddTicketMode)
                        {
                            <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveReqTask">@(userConfig.GetText("add"))</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveReqTask">@(userConfig.GetText("save"))</button>
                        }
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (WfHandler.PlanReqTaskMode)
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Planner}, {Roles.FwAdmin}")">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitPromoteReqTask">@(userConfig.GetText("change_state"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("change_state"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (WfHandler.ApproveReqTaskMode)
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Approver}, {Roles.FwAdmin}")">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitApproveTask">@(userConfig.GetText("approve"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("approve"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            @if(WfHandler.EditReqTaskMode || WfHandler.PlanReqTaskMode || WfHandler.ApproveReqTaskMode)
            {
                <button type="button" class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Close">@(userConfig.GetText("cancel"))</button>
            }
            else
            {
                <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="Close">@(userConfig.GetText("ok"))</button>
            }
        </div>
    </Footer>
</PopUp>

<PromoteObject @bind-Promote="WfHandler.DisplayPromoteReqTaskMode" CloseParent="Close" CancelParent="Cancel" ObjectName="@WfHandler.ActReqTask.Title" Save="ConfPromoteReqTask" StatefulObject="WfHandler.ActReqTask" StateMatrix="WfHandler.ActStateMatrix" States="States"/>
<PromoteObject @bind-Promote="WfHandler.DisplayApproveMode" CloseParent="Close" CancelParent="Cancel" ObjectName="@userConfig.GetText("approval")" WithComment="true" Save="ConfApproveTask" StatefulObject="WfHandler.ActApproval" StateMatrix="WfHandler.ActStateMatrix" States="States"/>
<CommentObject @bind-Display="WfHandler.DisplayReqTaskCommentMode" ResetParent="InitComments" ObjectName="@WfHandler.ActReqTask.Title" Save="ConfAddComment"/>
<DisplayPathAnalysis @bind-Display="WfHandler.DisplayPathAnalysisMode" ResetParent="ResetPathAnalysis" ReqTask="WfHandler.ActReqTask"/>
<EditConnPopup @bind-Display="WfHandler.ActionHandler.DisplayConnectionMode" ConnHandler="WfHandler.ActionHandler.ConnHandler"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.request;

    [Parameter]
    public WfStateDict States { get; set; } = new ();

    [Parameter]
    public WfHandler WfHandler { get; set; } = new ();

    [Parameter]
    public Func<Task> ResetParent { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<WfReqTask, Task> StartPhase { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<WfImplTask, Task> StartImplPhase { get; set; } = DefaultInit.DoNothing;


    private List<TaskType> availableTaskTypes { get; set; } = [];
    private List<RuleAction> ruleActions = [];
    private List<Tracking> trackings = [];

    private List<NwObjectElement> actSources = [];
    private List<NwObjectElement> actDestinations = [];
    private List<NwServiceElement> actServices = [];
    private List<NwRuleElement> actRules = [];

    private List<NwObjectElement> sourcesToAdd = [];
    private List<NwObjectElement> sourcesToDelete = [];
    private List<NwObjectElement> destinationsToAdd = [];
    private List<NwObjectElement> destinationsToDelete = [];
    private List<NwServiceElement> servicesToAdd = [];
    private List<NwServiceElement> servicesToDelete = [];
    private TaskType actTaskType = TaskType.access;

    private List<WfStateAction> offeredActions = [];
    private string allComments = "";
    private IEnumerable<Device> selectedDevices { get; set; } = new List<Device>();
    private Device? actRuleDevice;
    private RuleAction? actRuleAction;
    private Tracking? actTracking;
    private FwoOwner? actOwner;
    private FwoOwner? oldOwner;
    private string? actGrpName;
    private bool firstParamSet = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableTaskTypes = System.Text.Json.JsonSerializer.Deserialize<List<TaskType>>(userConfig.ReqAvailableTaskTypes) ?? throw new Exception("Config data could not be parsed.");
            actTaskType = availableTaskTypes.Count > 0 ? availableTaskTypes.Last() : TaskType.access;
            ruleActions = await apiConnection.SendQueryAsync<List<RuleAction>>(StmQueries.getRuleActions);
            trackings = await apiConnection.SendQueryAsync<List<Tracking>>(StmQueries.getTracking);
            InitElements();
            firstParamSet = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (WfHandler.DisplayReqTaskMode && firstParamSet)
            {
                InitElements();
                await InitComments();
                await Reset();
                if(!WfHandler.AddReqTaskMode)
                {
                    Enum.TryParse<TaskType>(WfHandler.ActReqTask.TaskType, out actTaskType);
                    if(!availableTaskTypes.Contains(actTaskType))
                    {
                        DisplayMessageInUi(null, userConfig.GetText("display_task"), userConfig.GetText("E8014"), true);
                    }
                    if(WfHandler.ActReqTask.TaskType == TaskType.new_interface.ToString() && WfHandler.ActReqTask.Owners.Count > 0)
                    {
                        oldOwner = actOwner;
                    }
                    actGrpName = WfHandler.GetAddInfoValue(AdditionalInfoKeys.GrpName);
                }
                firstParamSet = false;
             }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("init_environment"), "", true);
        }
    }

    private void InitElements()
    {
        actSources = WfHandler.ActReqTask.GetNwObjectElements(ElemFieldType.source);
        actDestinations = WfHandler.ActReqTask.GetNwObjectElements(ElemFieldType.destination);
        actServices = WfHandler.ActReqTask.GetServiceElements();
        actRules = WfHandler.ActReqTask.GetRuleElements();
    }

    private async Task InitComments()
    {
        allComments = WfHandler.ActReqTask.GetAllComments();
    }

    private async Task Close()
    {
        firstParamSet = true;
        await ResetParent();
    }

    private async Task Cancel()
    {
        WfHandler.DisplayPromoteReqTaskMode = false;
        WfHandler.DisplayApproveMode = false;
    }

    private async Task Reset()
    {
        Log.WriteDebug("DisplayRequestTask", "Reset");
        offeredActions = WfHandler.ActionHandler.GetOfferedActions(WfHandler.ActReqTask, WfObjectScopes.RequestTask, WfHandler.Phase);
        selectedDevices = new List<Device>();
        foreach(int devId in WfHandler.ActReqTask.getDeviceList().ToArray())
        {
            Device? dev = WfHandler.Devices.FirstOrDefault(x => x.Id == devId);
            if(dev != null)
            {
                selectedDevices = selectedDevices.Append<Device>(dev);
            }
        }
        actRuleDevice = WfHandler.Devices.FirstOrDefault(x => x.Id == WfHandler.ActReqTask.GetRuleDeviceId());
        actRuleAction = ruleActions.FirstOrDefault(x => x.Id == WfHandler.ActReqTask.RuleAction);
        actTracking = trackings.FirstOrDefault(x => x.Id == WfHandler.ActReqTask.Tracking);
        actOwner = WfHandler.ActReqTask.Owners.FirstOrDefault()?.Owner;
        StateHasChanged();
    }

    private async Task ResetPathAnalysis()
    {
        WfHandler.DisplayPathAnalysisMode = false;
    }

    private string DisplayDevices()
    {
        List<string> devNames = new();
        foreach(var dev in selectedDevices)
        {
            devNames.Add(dev?.Name ?? "");
        }
        return string.Join(", ", devNames);
    }

    private async Task PerformAction(WfStateAction action)
    {
        await WfHandler.ActionHandler.PerformAction(action, WfHandler.ActReqTask, WfObjectScopes.RequestTask, actOwner, WfHandler.ActReqTask.TicketId);
        await Reset();
    }

    private void InitPromoteReqTask()
    {
        WfHandler.SetReqTaskPopUpOpt(ObjAction.displayPromote);
    }

    private async Task ConfPromoteReqTask(WfStatefulObject reqtask)
    {
        await WfHandler.PromoteReqTask(reqtask);
    }

    private async Task InitApproveTask()
    {
        await WfHandler.SetApprovalEnv();
        WfHandler.SetReqTaskPopUpOpt(ObjAction.displayApprove);
    }

    private async Task ConfApproveTask(WfStatefulObject approval)
    {
        await WfHandler.ApproveTask(approval);
    }

    private void InitAddComment()
    {
        WfHandler.SetReqTaskPopUpOpt(ObjAction.displayComment);
    }

    private async Task ConfAddComment(string commentText)
    {
        await WfHandler.ConfAddCommentToReqTask(commentText);
        await InitComments();
        StateHasChanged();
    }

    private void UpdateElements()
    {
        foreach(var src in sourcesToDelete)
        {
            actSources.Remove(src);
            WfReqElement? oldElem = WfHandler.ActReqTask.Elements.FirstOrDefault(x => x.Id == src.ElemId);
            if(oldElem != null)
            {
                WfHandler.ActReqTask.RemovedElements.Add(oldElem);
                WfHandler.ActReqTask.Elements.Remove(oldElem);
            }
        }
        foreach(var dst in destinationsToDelete)
        {
            actDestinations.Remove(dst);
            WfReqElement? oldElem = WfHandler.ActReqTask.Elements.FirstOrDefault(x => x.Id == dst.ElemId);
            if(oldElem != null)
            {
                WfHandler.ActReqTask.RemovedElements.Add(oldElem);
                WfHandler.ActReqTask.Elements.Remove(oldElem);
            }
        }
        foreach(var svc in servicesToDelete)
        {
            actServices.Remove(svc);
            WfReqElement? oldElem = WfHandler.ActReqTask.Elements.FirstOrDefault(x => x.Id == svc.ElemId);
            if(oldElem != null)
            {
                WfHandler.ActReqTask.RemovedElements.Add(oldElem);
                WfHandler.ActReqTask.Elements.Remove(oldElem);
            }
        }
        foreach(var src in sourcesToAdd)
        {
            src.TaskId = WfHandler.ActReqTask.Id;
            actSources.Add(src);
            WfHandler.ActReqTask.Elements.Add(src.ToReqElement(ElemFieldType.source));
        }
        foreach(var dst in destinationsToAdd)
        {
            dst.TaskId = WfHandler.ActReqTask.Id;
            actDestinations.Add(dst);
            WfHandler.ActReqTask.Elements.Add(dst.ToReqElement(ElemFieldType.destination));
        }
        foreach(var svc in servicesToAdd)
        {
            svc.TaskId = WfHandler.ActReqTask.Id;
            actServices.Add(svc);
            WfHandler.ActReqTask.Elements.Add(svc.ToReqElement());
        }
        sourcesToDelete = [];
        destinationsToDelete = [];
        servicesToDelete = [];
        sourcesToAdd = [];
        destinationsToAdd = [];
        servicesToAdd = [];

        WfHandler.ActReqTask.Elements.RemoveAll(x => x.Field == ElemFieldType.rule.ToString());
        foreach(var rule in actRules)
        {
            WfReqElement reqElem = rule.ToReqElement();
            reqElem.DeviceId = actRuleDevice?.Id;
            reqElem.RequestAction = WfHandler.ActReqTask.RequestAction;
            WfHandler.ActReqTask.Elements.Add(reqElem);
        }
    }

    private async Task SaveReqTask()
    {
        try
        {
            WfHandler.ActReqTask.TaskType = actTaskType.ToString();
            WfHandler.ActReqTask.RuleAction = actRuleAction?.Id;
            WfHandler.ActReqTask.Tracking = actTracking?.Id;
            WfHandler.ActReqTask.RemovedOwners = new();
            WfHandler.ActReqTask.NewOwners = new();
            if(actOwner != oldOwner)
            {
                if(oldOwner != null)
                {
                    WfHandler.ActReqTask.RemovedOwners.Add(oldOwner);
                }
                if(actOwner != null)
                {
                    WfHandler.ActReqTask.NewOwners.Add(actOwner);
                }
            }
            if (WfHandler.ActReqTask.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            if(actTaskType == TaskType.rule_delete)
            {
                WfHandler.ActReqTask.RequestAction = RequestAction.delete.ToString();
            }
            else if(actTaskType == TaskType.group_create)
            {
                Dictionary<string, string>? addInfo = new() { {AdditionalInfoKeys.GrpName, actGrpName} };
                WfHandler.ActReqTask.AdditionalInfo = System.Text.Json.JsonSerializer.Serialize(addInfo);
            }

            UpdateElements();
            if (await CheckTaskValues())
            {
                WfHandler.ActReqTask.SetDeviceList(selectedDevices.ToList());
                WfHandler.ActReqTask.Owners = [];
                if (actOwner != null)
                {
                    WfHandler.ActReqTask.Owners.Add(new() { Owner = actOwner });
                }
                if (WfHandler.AddReqTaskMode)
                {
                    await WfHandler.AddApproval();
                    WfHandler.ActReqTask.TaskNumber = WfHandler.ActTicket.HighestTaskNumber() + 1;
                    await WfHandler.AddReqTask();
                }
                else
                {
                    await WfHandler.ChangeReqTask();
                }
                await Close();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private async Task<bool> CheckTaskValues()
    {
        if (WfHandler.ActReqTask.Title == null || WfHandler.ActReqTask.Title == "" || 
            (actTaskType == TaskType.new_interface && actOwner == null))
        {
            DisplayMessageInUi(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
            return false;
        }
        if (actTaskType == TaskType.access)
        {
            if (actSources.Count == 0 || actDestinations.Count == 0 || actServices.Count == 0 ||
                (!WfHandler.ActStateMatrix.PhaseActive[WorkflowPhases.planning] && userConfig.ReqAutoCreateImplTasks == AutoCreateImplTaskOptions.enterInReqTask && selectedDevices.Count<Device>() == 0))
            {
                DisplayMessageInUi(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
                return false;
            }
            foreach (var reqElem in WfHandler.ActReqTask.Elements)
            {
                if (reqElem.NetworkId == null && reqElem.ServiceId == null)
                {
                    if (reqElem.Field == ElemFieldType.service.ToString() && reqElem.Port < 1 || reqElem.Port > 65535)
                    {
                        DisplayMessageInUi(null, userConfig.GetText("save_element"), userConfig.GetText("E5103"), true);
                        return false;
                    }
                }
            }
        }
        else if (actTaskType == TaskType.rule_delete)
        {
            if (actRuleDevice == null || actRules.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
                return false;
            }
            foreach(var elem in WfHandler.ActReqTask.Elements.Where(x => x.Field == ElemFieldType.rule.ToString()))
            {
                if(!(await WfHandler.CheckRuleUid(actRuleDevice?.Id, elem.RuleUid)))
                {
                    DisplayMessageInUi(null, userConfig.GetText("save_task"), userConfig.GetText("E8013") + elem.RuleUid, true);
                    return false;
                }
            }
        }
        else if (actTaskType == TaskType.group_create)
        {
            if (actGrpName == null || actGrpName == "" || actSources.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
                return false;
            }
        }
        return true;
    }
}
