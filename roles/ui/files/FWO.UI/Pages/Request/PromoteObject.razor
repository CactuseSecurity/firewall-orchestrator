@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("change_state") + ": " + ObjectName)" Show="@Display" Size=PopupSize.CustomSmall OnClose="() => Cancel()">
    <Body>
        @if (Display)
        {
            <div class="form-group row">
                <label for="promoteObject" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("promote_to")):</label>
                <div class="col-sm-8">
                    <Dropdown ElementType="int" @bind-SelectedElement="StatefulObject.StateId" ElementToString="@(s => States.Name[s])" Elements="possibleStates" >
                        <ElementTemplate Context="state">
                            @(States.Name[state])
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
            @if(WithComment)
            {
                <div class="form-group row mt-2">
                    <label for="optComment" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                    <div class="col-sm-8">
                        <input id="optComment" type="text" class="form-control form-control-sm" @bind="optComm" />
                    </div>
                </div>
            }
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Requester}, {Roles.Approver}, {Roles.Planner}, {Roles.Implementer}, {Roles.Reviewer}, {Roles.FwAdmin}")">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="Perform">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>
<InProgress Display="workInProgress" />


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Promote { get; set; } = false;

    [Parameter]
    public EventCallback<bool> PromoteChanged { get; set; }

    [Parameter]
    public Func<Task> CloseParent { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<bool> CancelParent { get; set; } = DefaultInit.DoNothingSync;

    [Parameter]
    public string ObjectName { get; set; } = "";

    [Parameter]
    public bool WithComment { get; set; } = false;

    [Parameter]
    public Func<WfStatefulObject, Task> Save { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public WfStatefulObject StatefulObject { get; set; } = new ();

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new ();

    [Parameter]
    public WfStateDict States { get; set; } = new ();


    private bool Display { get; set; } = false;
    private List<int> possibleStates = new ();
    private string? optComm;
    private bool workInProgress = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Promote)
        {
            possibleStates = StateMatrix.getAllowedTransitions(StatefulObject.StateId);
            if(possibleStates.Count == 1)
            {
                int oldState = StatefulObject.StateId;
                StatefulObject.StateId = possibleStates[0];
                if(WithComment && oldState >= StateMatrix.LowestStartedState)
                {
                    Display = true;
                }
                else
                {
                    await Save(StatefulObject);
                    await Close();
                }
            }
            else
            {
                Display = true;
            }
            optComm = null;
            Promote = false;
        }
    }

    private async Task Perform()
    {
        workInProgress = true;
        StatefulObject.SetOptComment(optComm);
        await Save(StatefulObject);
        await Close();
    }

    private async Task Close()
    {
        await CloseParent();
        workInProgress = false;
        Promote = false;
        Display = false;
    }

    private void Cancel()
    {
        CancelParent();
        workInProgress = false;
        Promote = false;
        Display = false;
    }
}
