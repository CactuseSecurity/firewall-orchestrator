@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/plannings"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Planner}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("plannings"))</h3>
<hr />

@if(InitComplete)
{
    <DisplayTicketTable Phase="WorkflowPhases.planning" States="states" ReqHandler="reqHandler" 
        ResetParent="Reset" StartPhase="StartPlanTask"/>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private RequestHandler reqHandler = new RequestHandler();
    private RequestStateDict states = new RequestStateDict();
    private bool InitComplete = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Admin, Roles.Planner, Roles.FwAdmin, Roles.Auditor});
            await states.Init(apiConnection);

            reqHandler = new RequestHandler(DisplayMessageInUi, userConfig, apiConnection, WorkflowPhases.planning){};
            await Reset();
            reqHandler.SetContinueEnv(ObjAction.plan);
    
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        try
        {
            reqHandler.ReadOnlyMode = !(authenticationStateTask!.Result.User.IsInRole(Roles.Planner) || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin) || authenticationStateTask!.Result.User.IsInRole(Roles.Admin));
            await reqHandler.Init();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("init_environment"), "", true);
        }
    }

    private async Task StartPlanTask(RequestReqTask reqTask)
    {
        try
        {
            reqTask.Start = DateTime.Now;
            await reqHandler.StartWorkOnReqTask(reqTask, ObjAction.plan);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("start_work"), "", true);
        }
    }
}
