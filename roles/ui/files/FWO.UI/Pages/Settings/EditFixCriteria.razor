@using System.Text.Json

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.FwAdmin}, {Roles.Auditor}")]

@inject UserConfig userConfig
@inject ApiConnection apiConnection

<PopUp Title="@(userConfig.GetText("edit_fix_crit"))" Size=PopupSize.Small Show="@Display" OnClose="Cancel">
    <Body>
        @if(Display)
        {
            <EditList ElementType="ComplianceCriterion" Elements="FixCriteria.ToArray()" ElementsToAdd="CriteriaToAdd" ElementsToDelete="CriteriaToDelete" StdLayout="false">
                <Display>
                    <div class="col-sm-9 border bg-transparent">@context.Name</div>
                </Display>
            </EditList>
            <div class="col-sm-12 mt-1">
                <div class="form-group row me-auto">
                    <div class="col-sm-9">
                        <Dropdown ElementType="ComplianceCriterion" ElementToString="@(r => r.Name)" @bind-SelectedElement="ActCrit" Elements="AvailableFixCriteria">
                            <ElementTemplate Context="crit">
                                @(crit.Name)
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                    <button @onclick="AddCrit" type="button" class="col-sm-2 btn btn-sm btn-success" id="addCrit">@userConfig.GetText("add")</button>
                </div>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="Save">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }


    private List<ComplianceCriterion> AvailableFixCriteria = [];
    private List<ComplianceCriterion> FixCriteria = [];
    private List<ComplianceCriterion> CriteriaToAdd = [];
    private List<ComplianceCriterion> CriteriaToDelete = [];
    ComplianceCriterion ActCrit = new();


    protected async override Task OnInitializedAsync()
    {
        try
        {
            FixCriteria = [.. (await apiConnection.SendQueryAsync<List<ComplianceCriterion>>(ComplianceQueries.getCriteria)).Where(c => c.CriterionType != CriterionType.Matrix.ToString())];
            foreach(string type in Enum.GetNames(typeof(CriterionType)).Where(c => c != CriterionType.Matrix.ToString()))
            {
                AvailableFixCriteria.Add(new(){ CriterionType = type, Name = type });
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    protected override void OnParametersSet()
    {
        if(Display && FixCriteria.Count > 0)
        {
            CriteriaToAdd = [];
            CriteriaToDelete = [];
        }
    }

    private void AddCrit()
    {
        CriteriaToAdd.Add(ActCrit);
    }

    private void Cancel()
    {
        Close();
    }

    private async Task Save()
    {
        try
        {
            foreach(var crit in CriteriaToAdd)
            {
                if(FixCriteria.FirstOrDefault(x => x.CriterionType == crit.CriterionType) == null)
                {
                    ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<ReturnIdWrapper>(ComplianceQueries.addCriterion,
                        new { criterionType = crit.CriterionType, name = crit.Name })).ReturnIds;
                    if (returnIds != null)
                    {
                        crit.Id = returnIds[0].InsertedId;
                        FixCriteria.Add(crit);
                    }
                }
            }
            foreach(var crit in CriteriaToDelete)
            {
                if (crit.Removed == null && (await apiConnection.SendQueryAsync<ReturnId>(ComplianceQueries.removeCriterion,
                    new { id = crit.Id, removed = DateTime.UtcNow })).UpdatedId == crit.Id)
                {
                    FixCriteria.Remove(crit);
                }
            }
            Close();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_policy"), "", true);
        }
    }

    private void Close()
    {
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
