@using BlazorTable
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Encryption
@using FWO.Config.Api
@using FWO.Middleware.Client

@page "/settings/credentials"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("import_credential"))</h3>
    <HelpLink Page="settings/credentials" />
</div>
@(userConfig.GetText("U5116"))
<hr />

<div class="btn-group m-1">
    <button type="button" class="btn btn-sm btn-success"
        @onclick="Add">@(userConfig.GetText("add_new_credential"))</button>
    @if (showCleanupButton)
    {
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}")">
            <Authorized>
                <button type="button" class="btn btn-sm btn-danger"
                    @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
            </Authorized>
        </AuthorizeView>
    }
</div>

<div class="d-flex flex-column m-2 vheight75" data-toggle="tooltip" title="@(userConfig.PureLine("H5130"))">
    <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header"
        TableItem="ImportCredential" Items="credentials" @ref="credTable" PageSize="0" ColumnReorder="true">
        <Column TableItem="ImportCredential" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)"
            Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-success"
                        @onclick="() => Clone(context)">@(userConfig.GetText("clone"))</button>
                    <button type="button" class="btn btn-sm btn-warning"
                        @onclick="() => Edit(context)">@(userConfig.GetText("edit"))</button>
                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Auditor}, {Roles.FwAdmin}")" Context="ctx">
                        <Authorized>
                            <button type="button" class="btn btn-sm btn-danger"
                                @onclick="() => RequestDelete(context)">@(userConfig.GetText("delete"))</button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </Template>
        </Column>
        <Column TableItem="ImportCredential" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true"
            Filterable="true" />
        <Column TableItem="ImportCredential" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)"
            Sortable="true" Filterable="true" />
        <Column TableItem="ImportCredential" Title="@(userConfig.GetText("username"))" Field="@(x => x.ImportUser)"
            Sortable="true" Filterable="true" />
        <Column TableItem="ImportCredential" Title="@(userConfig.GetText("is_key_pair"))" Field="@(x => x.IsKeyPair)"
            Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.IsKeyPair))
            </Template>
        </Column>


    </Table>
</div>

<PopUp Title="@(userConfig.GetText("edit_credential"))" Show="@EditMode" Size=PopupSize.Large
    OnClose="() => EditMode = false">

    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="credentialId"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-8">@actCredential.Id</label>
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5131"))">
                    <label for="credentialName"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    <div class="col-sm-8">
                        <input id="credentialName" type="text" class="form-control form-control-sm"
                            @bind="actCredential.Name" />
                    </div>
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5132"))">
                    <label for="credentialUsername"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("username"))*:</label>
                    <div class="col-sm-8">
                        <input id="credentialUsername" type="text" class="form-control form-control-sm"
                            @bind="actCredential.ImportUser" />
                    </div>
                </div>

                <div class="form-check form-check-inline mt-2" data-toggle="tooltip"
                    title="@(userConfig.PureLine("H5135"))">
                    <input class="form-check-input" id="credentialIsKeyPair" type="checkbox" @bind="actCredential.IsKeyPair"
                        @oninput="@(() => { actCredential.Secret = ""; })" />
                    <label class="form-check-label"
                        for="credentialIsKeyPair"><small>@(userConfig.GetText("is_key_pair"))</small></label>
                </div>
                @if (actCredential.IsKeyPair)
                {
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5133"))">
                        <label for="credentialSecret"
                            class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("private_key"))*:</label>
                        <div class="col-sm-8">
                            <textarea rows="6" cols="60" name="text" class="form-control form-control-sm"
                                placeholder=@(userConfig.GetText("private_key")) @bind="actCredential.Secret"></textarea>
                        </div>
                    </div>
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5134"))">
                        <label for="credentialPublic"
                            class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("public_key")):</label>
                        <div class="col-sm-8">
                            <textarea rows="6" cols="60" name="text" class="form-control form-control-sm"
                                placeholder=@(userConfig.GetText("public_key")) @bind="actCredential.PublicKey"></textarea>
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5133"))">
                        <label for="credentialSecret"
                            class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("login_secret"))*:</label>
                        <div class="col-sm-8">
                            <input type="password" cols="60" name="text" class="form-control form-control-sm"
                                placeholder=@(userConfig.GetText("login_secret")) @bind="actCredential.Secret" />
                        </div>
                    </div>
                }
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5136"))">
                    <label for="cloudClientId"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("cloud_client_id")):</label>
                    <div class="col-sm-8">
                        <input type="text" cols="60" name="text" class="form-control form-control-sm"
                            placeholder=@(userConfig.GetText("cloud_client_id")) @bind="actCredential.CloudClientId" />
                    </div>
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5137"))">
                    <label for="cloudClientSecret"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("cloud_client_secret")):</label>
                    <div class="col-sm-8">
                        <input type="password" cols="60" name="text" class="form-control form-control-sm"
                            placeholder=@(userConfig.GetText("cloud_client_secret"))
                            @bind="actCredential.CloudClientSecret" />
                    </div>
                </div>

            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-primary"
                        @onclick="Save">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized>
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary"
                @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<ConfirmDelete @bind-Display="DeleteMode" PerformAction="Delete" Title="@userConfig.GetText("delete_credential")"
    DeleteMessage="@deleteMessage" />
<ConfirmDelete @bind-Display="CleanupMode" PerformAction="RemoveSampleData"
    Title="@userConfig.GetText("remove_sample_data")" DeleteMessage="@cleanupMessage" />
<InProgress Display="workInProgress" />


@code
{

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<ActionItem> actActions = new List<ActionItem>();
    private List<ImportCredential> credentials = new List<ImportCredential>();
    private List<ImportCredential> sampleCredentials = new List<ImportCredential>();

    private ITable<ImportCredential>? credTable;

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool CleanupMode = false;
    private bool AddMode = false;
    private bool showCleanupButton = false;

    private ImportCredential newCredential = new ImportCredential();
    private ImportCredential actCredential = new ImportCredential();
    private string deleteMessage = "";
    private string cleanupMessage = "";
    private bool workInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    protected async Task Refresh()
    {
        try
        {
            JwtReader jwt = new JwtReader(userConfig.User.Jwt);
            jwt.Validate();
            if (jwt.ContainsAllowedRole(Roles.Admin) || jwt.ContainsAllowedRole(Roles.FwAdmin))
                credentials = await
                apiConnection.SendQueryAsync<List<ImportCredential>>(FWO.Api.Client.Queries.DeviceQueries.getCredentials);
            else
                credentials = await
                apiConnection.SendQueryAsync<List<ImportCredential>>(FWO.Api.Client.Queries.DeviceQueries.getCredentialsWithoutSecrets);

            AnalyseSampleCredentials();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_credentials"), "", true);
        }
    }

    private void AnalyseSampleCredentials()
    {
        sampleCredentials = new List<ImportCredential>();
        foreach (ImportCredential cred in credentials)
        {
            if (cred.Name.EndsWith("_demo"))
            {
                sampleCredentials.Add(cred);
            }
        }
        showCleanupButton = (sampleCredentials.Count > 0);
    }

    private void Edit(ImportCredential credential)
    {
        actCredential = new ImportCredential(credential);
        // privateKey = actCredential.Secret;
        EditMode = true;
    }

    private async Task RequestDelete(ImportCredential credential)
    {
        // Checks if delete is possible (no management should be using the credentials)

        actCredential = credential;
        var Variables = new { importCredentialId = credential.Id };

        var result =
        await apiConnection.SendQueryAsync<AggregateCount>(FWO.Api.Client.Queries.DeviceQueries.getMgmtNumberUsingCred,
        Variables);
        int? numberOfManagementsUsingCredentials = result?.Aggregate?.Count;

        if (numberOfManagementsUsingCredentials != null && numberOfManagementsUsingCredentials != 0)
        {
            DisplayMessageInUi(null, userConfig.GetText("delete_credential"), userConfig.GetText("E5117"), true);
        }
        else
        {
            deleteMessage = userConfig.GetText("U5117") + actCredential.Name + "?";
            DeleteMode = true;
        }
    }

    private async Task Delete()
    {
        try
        {
            DeleteMode = false;
            workInProgress = true;
            StateHasChanged();
            var Variables = new { id = actCredential.Id };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.deleteCredential,
            Variables)).DeletedId;
            if (delId == actCredential.Id)
            {
                credentials.Remove(actCredential);
            }
            workInProgress = false;
        }
        catch (Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("delete_credential"), "", true);
        }
        StateHasChanged();
    }

    private void RequestRemoveSampleData()
    {
        // Todo: Checks if delete possible?
        cleanupMessage = userConfig.GetText("U5108");
        CleanupMode = true;
    }

    private async Task RemoveSampleData()
    {
        foreach (ImportCredential credential in sampleCredentials)
        {
            actCredential = credential;
            await Delete();
        }
        CleanupMode = false;
        showCleanupButton = false;
        StateHasChanged();
    }

    private void Add()
    {
        AddMode = true;
        newCredential = new ImportCredential() { };
        Edit(newCredential);
    }

    private void Clone(ImportCredential credential)
    {
        AddMode = true;
        newCredential = new ImportCredential(credential);
        newCredential.Id = 0;
        Edit(newCredential);
    }

    public async Task Save()
    {
        try
        {
            if (actCredential.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("save_credential"), userConfig.GetText("U0001"), true);
            }
            if (CheckValues(actCredential, userConfig.GetText("save_credential")))
            {

                string mainKey = AesEnc.GetMainKey();
                string encryptedSecret = actCredential.Secret;

                // only encrypt secret if it was not already encrypted
                try
                {
                    string decryptedSecret = AesEnc.Decrypt(actCredential.Secret, mainKey);
                }
                catch (Exception)
                {
                    encryptedSecret = AesEnc.Encrypt(actCredential.Secret, mainKey);
                    actCredential.Secret = encryptedSecret;
                }

                if (AddMode)
                {
                    // insert new credentials
                    var Variables = new
                    {
                        credential_name = actCredential.Name,
                        isKeyPair = actCredential.IsKeyPair,
                        username = actCredential.ImportUser,
                        sshPublicKey = actCredential.PublicKey,
                        secret = actCredential.Secret,
                        cloudClientId = actCredential.CloudClientId,
                        cloudClientSecret = actCredential.CloudClientSecret
                    };
                    ReturnId[]? returnIds = (await
                    apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.DeviceQueries.newCredential, Variables)).ReturnIds;
                    if (returnIds != null)
                    {
                        actCredential.Id = returnIds[0].NewId;
                    }
                    credentials.Add(actCredential);
                    AddMode = false;
                    EditMode = false;
                }
                else
                {
                    // Update existing credential
                    var Variables = new
                    {
                        id = actCredential.Id,
                        credential_name = actCredential.Name,
                        isKeyPair = actCredential.IsKeyPair,
                        username = actCredential.ImportUser,
                        sshPublicKey = actCredential.PublicKey,
                        secret = encryptedSecret,
                        cloudClientId = actCredential.CloudClientId,
                        cloudClientSecret = actCredential.CloudClientSecret
                    };
                    int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.updateCredential,
                        Variables)).UpdatedId;
                    EditMode = (udId == actCredential.Id ? false : true);
                    credentials[credentials.FindIndex(x => x.Id == actCredential.Id)] = actCredential;
                }
                AnalyseSampleCredentials();
            }
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_credential"), "", true);
        }
    }

    private bool CheckValues(ImportCredential cred, string checkCause)
    {
        if (cred.Name == null || cred.Name == "" ||
        cred.ImportUser == null || cred.ImportUser == "" ||
        cred.Secret == null)
        {
            DisplayMessageInUi(null, checkCause, userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        CleanupMode = false;
    }

}
