@using FWO.Config.Api;
@using FWO.Config.Api.Data;
@using FWO.Api.Client
@using FWO.Ui.Services

@page "/settings/customtexts"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("customize_texts"))</h3>
    <HelpLink Page="settings/customtexts"/>
</div>
@(userConfig.GetText("U5321"))
<hr />
<div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5702"))">
    <label class="col-form-label col-sm-1">@(userConfig.GetText("language")):</label>
    <div class="col-sm-4">
        <Dropdown ElementType="Language" ElementToString="@(l => userConfig.GetText(l.Name))" @bind-SelectedElement="selectedLanguage" Elements="globalConfig.uiLanguages">
            <ElementTemplate Context="language">
                @(userConfig.GetText(language.Name))
            </ElementTemplate>
        </Dropdown>
    </div>
    <div class="col-sm-2">
        <button type="button" class="btn btn-sm btn-primary" @onclick="async () => { await LoadDicts(selectedLanguage); StateHasChanged(); }" @onclick:preventDefault>@(userConfig.GetText("select"))</button>
    </div>
</div>
@if(dictsLoaded)
{
    <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5703"))">
        <label class="col-form-label col-sm-1">@(userConfig.GetText("search")):</label>
        <div class="col-sm-4">
            <input type="text" class="form-control form-control-sm" @bind="searchString" />
        </div>
        <div class="col-sm-2">
            <button type="button" class="btn btn-sm btn-primary" @onclick="async () => { await Search(); StateHasChanged(); }" @onclick:preventDefault>@(userConfig.GetText("search"))</button>
        </div>
        <div class="col-sm-2">
            <input class="form-check-input" type="checkbox" @bind="caseSensitive">
            <label class="form-check-label">@(userConfig.GetText("case_sensitive"))</label>
        </div>
        <div class="col-sm-2">
            <input class="form-check-input" type="checkbox" @bind="ignoreHelpTexts">
            <label class="form-check-label">@(userConfig.GetText("ignore_helptexts"))</label>
        </div>
    </div>
}
@if(displayResults)
{
    <div class="m-2 vheight75" data-toggle="tooltip" title="@(userConfig.PureLine("H5704"))">
        <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="TextEntry" Items="results" PageSize="0" ColumnReorder="true">
            <Column TableItem="TextEntry" Title="@(userConfig.GetText("key"))" Field="@(x => x.Key)" Sortable="true" Filterable="true" />
            <Column TableItem="TextEntry" Title="@(userConfig.GetText("text"))" Field="@(x => x.Text)" Sortable="true" Filterable="true" />
            <Column Context="res" TableItem="TextEntry" Title="@(userConfig.GetText("custom_text"))" Field="@(x => x.CustomText)" Sortable="true" Filterable="true" >
                <Template>
                    <input type="string" @bind="res.CustomText">
                </Template>
            </Column>
            <Column Context="res" TableItem="TextEntry" Title="@(userConfig.GetText("delete"))" Field="@(x => x.Delete)" Sortable="false" Filterable="false" >
                <Template>
                    @if(actCustomDict.ContainsKey(res.Key))
                    {
                        <input type="checkbox" @bind="res.Delete">
                    }
                </Template>
            </Column>
        </Table>
    </div>
}
<hr />
<AuthorizeView Roles="@Roles.Admin">
    <Authorized>
        <button type="button" class="btn btn-sm btn-primary" @onclick:preventDefault="true" @onclick="Save">@(userConfig.GetText("save"))</button>
    </Authorized>
    <NotAuthorized>
        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
    </NotAuthorized> 
</AuthorizeView>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    public class TextEntry
    {
        public string Key { get; set; } = "";
        public string Text { get; set; } = "";
        public string CustomText { get; set; } = "";
        public bool Delete { get; set; }
    }

    private Language selectedLanguage = new();
    private Dictionary<string, string> actCustomDict = new();
    private Dictionary<string, string> actDict = new();
    private bool dictsLoaded = false;
    private string searchString = "";
    private List<TextEntry> results = new();
    private bool displayResults = false;
    private bool ignoreHelpTexts = true;
    private bool caseSensitive = false;

    protected override void OnInitialized()
    {
        selectedLanguage = globalConfig.uiLanguages.FirstOrDefault() ?? new Language();
    }

    private async Task LoadDicts(Language lang)
    {
        actCustomDict = await userConfig.GetCustomDict(lang.Name);
        try
        {
            actDict = new();
            List<UiText> uiTexts = await apiConnection.SendQueryAsync<List<UiText>>(ConfigQueries.getTextsPerLanguage, new { language = selectedLanguage.Name });
            foreach (UiText text in uiTexts)
            {
                actDict.Add(text.Id, text.Txt);
            }
            dictsLoaded = true;
        }
        catch (Exception exception)
        {
            Log.WriteError("Load dictionary", $"Could not load texts.", exception);
        }
    }

    private async Task Search()
    {
        results = new();
        foreach(var entry in actDict)
        {
            if (!(ignoreHelpTexts && entry.Key.StartsWith("H")) && (caseSensitive ? entry.Value.Contains(searchString) : entry.Value.ToLower().Contains(searchString.ToLower())))
            {
                results.Add(new TextEntry(){ Key = entry.Key, Text = entry.Value, CustomText = actCustomDict.ContainsKey(entry.Key) ? actCustomDict[entry.Key] : ""});
            }
        }
        foreach(var entry in actCustomDict)
        {
            if (!(ignoreHelpTexts && entry.Key.StartsWith("H")) && entry.Value.Contains(searchString))
            {
                if(results.FirstOrDefault(x => x.Key == entry.Key) == null)
                {
                    results.Add(new TextEntry(){ Key = entry.Key, Text = actDict.ContainsKey(entry.Key) ? actDict[entry.Key] : "", CustomText = entry.Value});
                }
            }
        }
        displayResults = true;
    }

    private async Task Save()
    {
        try
        {
            foreach(TextEntry entry in results.Where(e => e.Delete))
            {
                var text = new 
                { 
                    id = entry.Key, 
                    lang = selectedLanguage.Name,
                };
                await apiConnection.SendQueryAsync<object>(ConfigQueries.deleteCustomText, text);
                entry.Delete = false;
                entry.CustomText = "";
            }

            foreach(TextEntry entry in results.Where(e => e.CustomText != ""))
            {
                var text = new 
                { 
                    id = entry.Key, 
                    lang = selectedLanguage.Name,
                    text = entry.CustomText 
                };
                await apiConnection.SendQueryAsync<object>(ConfigQueries.upsertCustomText, text);
            }
            await LoadDicts(selectedLanguage);
            DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save"), "", true);
        }
    }
}
