@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using System.Text.Json


@page "/settings/workflowcustomizing"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("customizing"))</h3>
@(userConfig.GetText("U5314"))
<hr />

@if (InitComplete && configData != null)
{
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAvailableTaskTypes")):</label>
        @foreach (TaskType type in Enum.GetValues(typeof(TaskType)))
        {
            @if(type != TaskType.master)
            {
                <div class="form-group col-sm-1">
                    <input type="checkbox" @bind="taskTypesActiveDict[type]" />
                    <label class="col-form-label">@(userConfig.GetText(type.ToString()))</label>
                </div>
            }
        }
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-3">@(userConfig.GetText("reqPriorities")):</label>
        <div class="col-sm-9">
        <div class="m-2">
            <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="RequestPriority" Items="prioList" PageSize="0" ColumnReorder="true">
                <Column TableItem="RequestPriority" Title="@(userConfig.GetText("numeric_prio"))" Field="@(x => x.NumPrio)" Sortable="true" Filterable="true" />
                <Column Context="prio" TableItem="RequestPriority" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" >
                    <Template>
                        <input type="string" @bind="prio.Name">
                    </Template>
                </Column>
                <Column Context="prio" TableItem="RequestPriority" Title="@(userConfig.GetText("ticket_deadline"))" Field="@(x => x.TicketDeadline)" Sortable="true" Filterable="true" >
                    <Template>
                        <input type="number" @bind="prio.TicketDeadline">
                    </Template>
                </Column>
                <Column Context="prio" TableItem="RequestPriority" Title="@(userConfig.GetText("approval_deadline_days"))" Field="@(x => x.ApprovalDeadline)" Sortable="true" Filterable="true" >
                    <Template>
                        <input type="number" @bind="prio.ApprovalDeadline">
                    </Template>
                </Column>
            </Table>
        </div>
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAllowObjectSearch")):</label>
        <div class="col-sm-2">
            <input type="checkbox" @bind="configData!.ReqAllowObjectSearch">
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAllowManualOwnerAdmin")):</label>
        <div class="col-sm-2">
            <input type="checkbox" @bind="configData!.ReqAllowManualOwnerAdmin">
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAutoCreateImplTasks")):</label>
        <div class="col-sm-2">
            <select class="form-control form-control-sm" @bind="configData!.ReqAutoCreateImplTasks">
                @foreach (AutoCreateImplTaskOptions acitOption in Enum.GetValues(typeof(AutoCreateImplTaskOptions)))
                {
                    <option value="@acitOption">@(userConfig.GetText(acitOption.ToString()))</option>
                }
            </select>
        </div>
    </form>

    <hr />
    <AuthorizeView Roles="admin">
        <Authorized>
            <button class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    <br><br>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    private ConfigData? configData;
    private bool InitComplete = false;

    private List<TaskType> availableTaskTypes { get; set; } = new List<TaskType>();
    private Dictionary<TaskType, bool> taskTypesActiveDict = new Dictionary<TaskType, bool>();

    private List<RequestPriority> prioList = new List<RequestPriority>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            availableTaskTypes = System.Text.Json.JsonSerializer.Deserialize<List<TaskType>>(configData.ReqAvailableTaskTypes) ?? throw new Exception("Config data could not be parsed.");
            taskTypesActiveDict = new Dictionary<TaskType, bool>();
            foreach(TaskType type in Enum.GetValues(typeof(TaskType)))
            {
                taskTypesActiveDict.Add(type, availableTaskTypes.Contains(type));
            }
            prioList = System.Text.Json.JsonSerializer.Deserialize<List<RequestPriority>>(configData.ReqPriorities) ?? throw new Exception("Config data could not be parsed.");
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                availableTaskTypes = new List<TaskType>();
                foreach(TaskType type in taskTypesActiveDict.Keys)
                {
                    if (taskTypesActiveDict[type])
                    {
                        availableTaskTypes.Add(type);
                    }
                }
                configData.ReqAvailableTaskTypes = JsonSerializer.Serialize(availableTaskTypes);
                configData.ReqPriorities = JsonSerializer.Serialize(prioList);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi!(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
