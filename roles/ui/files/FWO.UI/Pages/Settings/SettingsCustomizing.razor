@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using System.Text.Json


@page "/settings/workflowcustomizing"
@attribute [Authorize(Roles = $"{GlobalConst.kAdmin}, {GlobalConst.kAuditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("customizing"))</h3>
    <HelpLink Page="settings/workflowcustomizing"/>
</div>
@(userConfig.GetText("U5314"))
<hr />

@if (InitComplete && configData != null)
{
    <form onsubmit="return false">
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5562"))">
            <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAvailableTaskTypes")):</label>
            @foreach (TaskType type in Enum.GetValues(typeof(TaskType)))
            {
                @if(type != TaskType.master)
                {
                    <div class="form-group col-sm-1">
                        <input type="checkbox" @bind="taskTypesActiveDict[type]" />
                        <label class="col-form-label">@(userConfig.GetText(type.ToString()))</label>
                    </div>
                }
            }
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5563"))">
            <label class="col-form-label col-sm-3">@(userConfig.GetText("reqPriorities")):</label>
            <div class="col-sm-9">
                <div class="m-2 vheight75">
                    <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="RequestPriority" Items="prioList" PageSize="0" ColumnReorder="true">
                        <Column TableItem="RequestPriority" Title="@(userConfig.GetText("numeric_prio"))" Field="@(x => x.NumPrio)" Sortable="true" Filterable="true" />
                        <Column Context="prio" TableItem="RequestPriority" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" >
                            <Template>
                                <input type="string" @bind="prio.Name">
                            </Template>
                        </Column>
                        <Column Context="prio" TableItem="RequestPriority" Title="@(userConfig.GetText("ticket_deadline"))" Field="@(x => x.TicketDeadline)" Sortable="true" Filterable="true" >
                            <Template>
                                <input type="number" min="0" @bind="prio.TicketDeadline">
                            </Template>
                        </Column>
                        <Column Context="prio" TableItem="RequestPriority" Title="@(userConfig.GetText("approval_deadline_days"))" Field="@(x => x.ApprovalDeadline)" Sortable="true" Filterable="true" >
                            <Template>
                                <input type="number" min="0" @bind="prio.ApprovalDeadline">
                            </Template>
                        </Column>
                    </Table>
                </div>
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5564"))">
            <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAllowObjectSearch")):</label>
            <div class="col-sm-2">
                <input type="checkbox" @bind="configData!.ReqAllowObjectSearch">
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5567"))">
            <label class="col-form-label col-sm-3">@(userConfig.GetText("reqActivatePathAnalysis")):</label>
            <div class="col-sm-2">
                <input type="checkbox" @bind="configData!.ReqActivatePathAnalysis">
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5566") + "\r\n" + userConfig.PureLine("H5571") + "\r\n" +
                userConfig.PureLine("H5572") + "\r\n" + userConfig.PureLine("H5573") + "\r\n" + userConfig.PureLine("H5574") + "\r\n" + userConfig.PureLine("H5575"))">
            <label class="col-form-label col-sm-3">@(userConfig.GetText("reqAutoCreateImplTasks")):</label>
            <div class="col-sm-4">
                <Dropdown @bind-SelectedElement="configData!.ReqAutoCreateImplTasks" ElementToString="@(o => userConfig.GetText(o.ToString()))" Elements="Enum.GetValues(typeof(AutoCreateImplTaskOptions)).Cast<AutoCreateImplTaskOptions>()" >
                    <ElementTemplate Context="opt">
                        @(userConfig.GetText(opt.ToString()))
                    </ElementTemplate>
                </Dropdown>
            </div>
        </div>
    </form>

    <hr />
    <AuthorizeView Roles="@GlobalConst.kAdmin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    <br><br>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private bool InitComplete = false;

    private List<TaskType> availableTaskTypes { get; set; } = new List<TaskType>();
    private Dictionary<TaskType, bool> taskTypesActiveDict = new Dictionary<TaskType, bool>();

    private List<RequestPriority> prioList = new List<RequestPriority>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            availableTaskTypes = System.Text.Json.JsonSerializer.Deserialize<List<TaskType>>(configData.ReqAvailableTaskTypes) ?? throw new Exception("Config data could not be parsed.");
            taskTypesActiveDict = new Dictionary<TaskType, bool>();
            foreach(TaskType type in Enum.GetValues(typeof(TaskType)))
            {
                taskTypesActiveDict.Add(type, availableTaskTypes.Contains(type));
            }
            prioList = System.Text.Json.JsonSerializer.Deserialize<List<RequestPriority>>(configData.ReqPriorities) ?? throw new Exception("Config data could not be parsed.");
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                availableTaskTypes = new List<TaskType>();
                foreach(TaskType type in taskTypesActiveDict.Keys)
                {
                    if (taskTypesActiveDict[type])
                    {
                        availableTaskTypes.Add(type);
                    }
                }
                configData.ReqAvailableTaskTypes = JsonSerializer.Serialize(availableTaskTypes);
                configData.ReqPriorities = JsonSerializer.Serialize(prioList);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
