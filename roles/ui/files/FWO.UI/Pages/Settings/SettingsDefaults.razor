@page "/settings/defaults"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@implements IDisposable
@using FWO.Services.EventMediator.Events
@using FWO.Services.EventMediator.Interfaces
@using FWO.Ui.Data
@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig
@inject IEventMediator EventMediator

<div class="input-group">
    <h3>@(userConfig.GetText("standards"))</h3>
    <HelpLink Page="settings/defaults" />
</div>
@(userConfig.GetText("U5311"))
<hr />

@if(configData != null)
{
    <form onsubmit="return false">
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5411"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("default_language"))*:</label>
            <div class="col-sm-2">
                <Dropdown ElementType="Language" ElementToString="@(l => userConfig.GetText(l.Name))" @bind-SelectedElement="selectedLanguage" Elements="globalConfig.UiLanguages">
                    <ElementTemplate Context="language">
                        @(userConfig.GetText(language.Name))
                    </ElementTemplate>
                </Dropdown>
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5449"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("sessionTimeout")):</label>
            <div class="col-sm-2">
                <input type="number" min="1" @bind="configData!.SessionTimeout" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5450"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("sessionTimeoutNoticePeriod")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.SessionTimeoutNoticePeriod" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("maxMessages"))">
            <label for="maxMessages" class="col-form-label col-sm-4">@(userConfig.GetText("maxMessages"))*:</label>
            <div class="col-sm-2">
                <input id="maxMessages" type="number" @bind="configData!.MaxMessages">
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5423"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("messageViewTime"))*:</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.MessageViewTime">
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5425"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("uiHostName")):</label>
            <div class="col-sm-4">
                <input type="text" class="col-sm-12" @bind="configData!.UiHostName" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5466"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("welcomeMessage")):</label>
            <div class="col-sm-4">
                <textarea type="text" rows="10" @bind="@configData!.WelcomeMessage" class="col-sm-12" placeholder="@(userConfig.GetText("welcomeMessage"))" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("useCustomLogo")):</label>
            <div class="col-sm-1">
                <input id="cbx_customLogo" type="checkbox" @bind="configData!.UseCustomLogo">
            </div>
            <div class="col-sm-4">
                <CustomLogoUpload AuthorizedRoles="@Roles.Admin" SupportedFileFormats=".png,.jpg,.jpeg"></CustomLogoUpload>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5412"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("elementsPerFetch"))*:</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.ElementsPerFetch" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5414"))">
            <label for="cbx_auto_fill_right_sidebar" class="col-form-label col-sm-4">@(userConfig.GetText("autoFillRightSidebar")):</label>
            <div class="col-sm-1">
                <input id="cbx_auto_fill_right_sidebar" type="checkbox" class="w-100" @bind="configData!.AutoFillRightSidebar">
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5413"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("maxInitialFetchesRightSidebar")):</label>
            <div class="col-sm-2">
                @if(configData!.AutoFillRightSidebar)
                {
                    <input disabled type="number" min="0" @bind="configData!.MaxInitialFetchesRightSidebar" />
                }
                else
                {
                    <input type="number" min="0" @bind="configData!.MaxInitialFetchesRightSidebar" />
                }
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5422"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("minCollapseAllDevices"))*:</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.MinCollapseAllDevices">
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5447"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("unusedTolerance"))*:</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.UnusedTolerance" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5448"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("creationTolerance"))*:</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.CreationTolerance" />
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5415"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("dataRetentionTime")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.DataRetentionTime" />
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5426"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("autoDiscoverSleepTime")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.AutoDiscoverSleepTime" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5427"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("autoDiscoverStartAt")):</label>
            <div class="col-sm-4">
                <div class="row">
                    <input type="time" step="60" class="ml-13 col-sm-5" @bind="autoDiscStartTime" />
                    <input type="date" class="col-sm-5" @bind="autoDiscStartDate" />
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5424"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("dailyCheckStartAt")):</label>
            <div class="col-sm-2">
                <input type="time" step="60" @bind="configData!.DailyCheckStartAt" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5452"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("maxImportDuration")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.MaxImportDuration" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5453"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("maxImportInterval")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.MaxImportInterval" />
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5565"))">
            <label for="cbx_allow_manual_owner_admin" class="col-form-label col-sm-4">@(userConfig.GetText("reqAllowManualOwnerAdmin")):</label>
            <div class="col-sm-1">
                <input id="cbx_allow_manual_owner_admin" type="checkbox" class="w-100" @bind="configData!.AllowManualOwnerAdmin">
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5454"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("ruleOwnershipMode")):</label>
            <div class="col-sm-2">
                <Dropdown @bind-SelectedElement="configData!.RuleOwnershipMode" ElementToString="@(o => userConfig.GetText(o.ToString()))" Elements="Enum.GetValues(typeof(RuleOwnershipMode)).Cast<RuleOwnershipMode>()">
                    <ElementTemplate Context="opt">
                        @(userConfig.GetText(opt.ToString()))
                    </ElementTemplate>
                </Dropdown>
            </div>
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized>
    </AuthorizeView>
    <br>
    <br>
    <p>@(userConfig.GetText("U5303"))</p>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private Language selectedLanguage = new Language();
    private DateTime autoDiscStartDate = DateTime.Today;
    private DateTime autoDiscStartTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to events for file uploads and logo import
            EventMediator.Subscribe<FileUploadEvent>(nameof(FileUploadService.ReadFileToBytes), _ => OnFileUploadEvent(_.EventArgs));
            EventMediator.Subscribe<FileUploadEvent>(nameof(FileUploadService.ImportCustomLogo), _ => OnFileUploadEvent(_.EventArgs));

            configData = await globalConfig.GetEditableConfig();
            selectedLanguage = globalConfig.UiLanguages.FirstOrDefault(l => l.Name == configData.DefaultLanguage) ?? new Language();
            autoDiscStartDate = autoDiscStartTime = configData.AutoDiscoverStartAt;
        }
        catch(Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if(configData != null)
            {
                configData.DefaultLanguage = selectedLanguage.Name;
                configData.AutoDiscoverStartAt = autoDiscStartDate.Date.Add(autoDiscStartTime.TimeOfDay);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch(Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }

    private void OnFileUploadEvent(FileUploadEventArgs? e)
    {
        if(e is null)
        {
            return;
        }

        if (!e.Success && e.Error is not null )
        {
            DisplayMessageInUi(e.Error.InternalException, userConfig.GetText("change_default"), e.Error.Message ?? "", true);
            return;
        }

        // Fileupload was successful and data is a base64 string
        if(e.Success && e.Data is string && configData is not null)
        {
            configData.CustomLogoData = e.Data;
        }
    }

    /// <summary>
    /// Unsubscribes from file upload events when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        EventMediator.Unsubscribe<FileUploadEvent>(nameof(FileUploadService.ReadFileToBytes));
        EventMediator.Unsubscribe<FileUploadEvent>(nameof(FileUploadService.ImportCustomLogo));
    }
}
