
@using System.Net
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Middleware.Client
@using FWO.Middleware.RequestParameters
@using RestSharp
@using FWO.Basics
@using FWO.Api.Data
@using FWO.Logging
@using FWO.Recert
@using FWO.Ui.Pages.NetworkModelling
@using FWO.Tufin.SecureChange
@using System.Text.Json
@using FWO.Services

@page "/settings/extticketing"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("ext_ticket_settings"))</h3>
    <HelpLink Page="settings/extticketing"/>
</div>
@(userConfig.GetText("U5322"))
<hr />

@if (configData != null)
{
    <form onsubmit="return false">
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5426a"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("externalRequestSleepTime")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" @bind="configData!.ExternalRequestSleepTime" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5427a"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("externalRequestStartAt")):</label>
            <div class="col-sm-4">
                <div class="row">
                    <input type="time" step="60" class="ml-13 col-sm-5" @bind="extReqStartTime" />
                    <input type="date" class="col-sm-5" @bind="extReqStartDate" />
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row mt-2">
             <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5597"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_ticket_system_type")):</label>
                <div class="col-sm-4">
                    <Dropdown ElementType="ExternalTicketSystemType" SelectedElement="actExtTicketSystemType"
                        SelectedElementChanged="InitTaskTypeList"
                        Elements="Enum.GetValues(typeof(ExternalTicketSystemType)).Cast<ExternalTicketSystemType>()" />
                </div>
            </div>
            <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5593"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_ticket_url")):</label>
                <div class="col-sm-8">
                    <input type="text" class="col-sm-8" @bind="extTicketingSystemUrl" />
                </div>
            </div>
             <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5594"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_ticket_auth")):</label>
                <div class="col-sm-8">
                    <input type="text" class="col-sm-8" @bind="extTicketingSystemAuth" />
                </div>
            </div>
            <TabSet WholeWidth="false" DarkMode="false" KeepPanelsAlive="false">
                @{int pos = 0;}
                @foreach(var template in extTicketingSystemTemplates)
                {
                    <Tab Title="@(template.TaskType)" Position=pos++>
                        <ExtTicketTemplates Template="template" />
                    </Tab>
                }
                <Tab Title="  +  " Position=pos>
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5599"))">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("task_type")):</label>
                        <div class="col-sm-4">
                            <Dropdown ElementType="string" @bind-SelectedElement="newTemplate.TaskType" Elements="actTaskTypes" />
                        </div>
                    </div>
                    <ExtTicketTemplates Template="newTemplate" />
                </Tab>
            </TabSet>
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private ExternalTicketSystemType actExtTicketSystemType = ExternalTicketSystemType.Generic;
    private string extTicketingSystemUrl = "";
    private string extTicketingSystemAuth = "";
    private List<ExternalTicketSystem> extTicketSystems = [];
    private List<ExternalTicketTemplate> extTicketingSystemTemplates = [];
    private DateTime extReqStartDate = DateTime.Today;
    private DateTime extReqStartTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);
    private ExternalTicketTemplate newTemplate = new();
    private List<string> actTaskTypes = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            extReqStartDate = extReqStartTime = configData.ExternalRequestStartAt;
            extTicketSystems = System.Text.Json.JsonSerializer.Deserialize<List<ExternalTicketSystem>>(configData.ExtTicketSystems) ?? new();
            if (extTicketSystems.Count() > 0)
            {
                // todo: loop over several systems
                actExtTicketSystemType = extTicketSystems.First().Type;
                InitTaskTypeList(actExtTicketSystemType);
                extTicketingSystemUrl = extTicketSystems.First().Url;
                extTicketingSystemAuth = extTicketSystems.First().Authorization;
                if(extTicketSystems.First().Templates.Count == 0 && 
                    (extTicketSystems.First().TicketTemplate != "" || extTicketSystems.First().TasksTemplate != ""))
                {
                    // backwards compatibility
                    extTicketingSystemTemplates.Add(new()
                    {
                        TaskType = SCTaskType.AccessRequest.ToString(),
                        TicketTemplate = extTicketSystems.First().TicketTemplate,
                        TasksTemplate = extTicketSystems.First().TasksTemplate
                    });
                }
                else
                {
                    extTicketingSystemTemplates = extTicketSystems.First().Templates;
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private void InitTaskTypeList(ExternalTicketSystemType extTicketSystemType)
    {
        actExtTicketSystemType = extTicketSystemType;
        switch(extTicketSystemType)
        {
            case ExternalTicketSystemType.Generic:
                actTaskTypes = [];
                break;
            case ExternalTicketSystemType.TufinSecureChange:
                actTaskTypes = Enum.GetNames(typeof(SCTaskType)).ToList();
                break;
            case ExternalTicketSystemType.AlgoSec:
                actTaskTypes = [];
                break;
            case ExternalTicketSystemType.ServiceNow:
                actTaskTypes = [];
                break;
        }
        newTemplate.TaskType = actTaskTypes.Count > 0 ? actTaskTypes.First() : "";
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                configData.ExternalRequestStartAt = extReqStartDate.Date.Add(extReqStartTime.TimeOfDay);
                List<ExternalTicketSystem> currentSystems = [];
                // todo: loop over several systems
                if(newTemplate.TicketTemplate != "" || newTemplate.TasksTemplate != "")
                {
                    extTicketingSystemTemplates.Add(new()
                    {
                        TaskType = newTemplate.TaskType.ToString(),
                        TicketTemplate = newTemplate.TicketTemplate,
                        TasksTemplate = newTemplate.TasksTemplate
                    });
                }
                extTicketingSystemTemplates = extTicketingSystemTemplates.Where(t => t.TicketTemplate != "" || t.TasksTemplate != "").ToList();
                ExternalTicketSystem newSystem = new()
                {
                    Type = actExtTicketSystemType,
                    Url = extTicketingSystemUrl,
                    Authorization = extTicketingSystemAuth,
                    Templates = extTicketingSystemTemplates
                };
                newSystem.Sanitize();
                currentSystems.Add(newSystem);
                configData.ExtTicketSystems = System.Text.Json.JsonSerializer.Serialize(currentSystems);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("ext_ticket_settings"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("ext_ticket_settings"), "", true);
        }
    }
}
