
@using System.Net
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Middleware.Client
@using FWO.Middleware.RequestParameters
@using RestSharp
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Logging
@using FWO.Recert
@using FWO.Ui.Pages.NetworkModelling
@using System.Text.Json

@page "/settings/extticketing"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("ext_ticket_settings"))</h3>
    <HelpLink Page="settings/extticketing"/>
</div>
@(userConfig.GetText("U5322"))
<hr />

@if (configData != null)
{
    <form onsubmit="return false">
        <div class="form-group row mt-2">
             <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5593"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_ticket_url")):</label>
                <div class="col-sm-8">
                    <input type="text" class="col-sm-8" @bind="extTicketingSystemUrl" />
                </div>
            </div>
             <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5594"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_ticket_auth")):</label>
                <div class="col-sm-8">
                    <input type="text" class="col-sm-8" @bind="extTicketingSystemAuth" />
                </div>
            </div>
             <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5595"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_ticket_template")):</label>
                <div class="col-sm-8">
                    <textarea rows="10" cols="60" name="text" class="form-control form-control-sm" placeholder=@(userConfig.GetText("ext_ticket_template_ph")) @bind="ticketTemplate"></textarea>   
                </div>
            </div>
             <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5596"))">
                <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ext_task_template")):</label>
                <div class="col-sm-8">
                    <textarea rows="30" cols="60" name="text" class="form-control form-control-sm" placeholder=@(userConfig.GetText("ext_task_template_ph")) @bind="tasksTemplate"></textarea>   
                </div>
            </div>
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private string extTicketingSystemUrl = "";
    private string extTicketingSystemAuth = "";
    private string ticketTemplate = "";
    private string tasksTemplate = "";

    ExternalTicketSystem currentSystem = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            List<ExternalTicketSystem> extTicketSystems = System.Text.Json.JsonSerializer.Deserialize<List<ExternalTicketSystem>>(configData.ExtTicketSystems) ?? new();
            if (extTicketSystems.Count()>0)
            {
                extTicketingSystemUrl = extTicketSystems.First().Url;
                extTicketingSystemAuth = extTicketSystems.First().Authorization;
                ticketTemplate = extTicketSystems.First().TicketTemplate;
                tasksTemplate = extTicketSystems.First().TasksTemplate;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                List<ExternalTicketSystem> currentSystems = new();
                currentSystems.Add(new ExternalTicketSystem(extTicketingSystemUrl, ticketTemplate, tasksTemplate, extTicketingSystemAuth));
                configData.ExtTicketSystems = System.Text.Json.JsonSerializer.Serialize(currentSystems);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("ext_ticket_settings"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("ext_ticket_settings"), "", true);
        }
    }

}
