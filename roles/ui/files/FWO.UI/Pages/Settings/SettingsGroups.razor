@using BlazorTable
@using System.Net
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Ui.Services
@using FWO.Middleware.Client
@using FWO.Config.Api
@using FWO.Middleware.RequestParameters
@using RestSharp

@page "/settings/groups"
@attribute [Authorize(Roles = $"{GlobalConst.kAdmin}, {GlobalConst.kAuditor}")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<h3>@(userConfig.GetText("groups"))</h3>
@(userConfig.GetText("U5214"))
<hr />

<div class="btn-group m-1">
    <button type="button" class="btn btn-sm btn-success" @onclick="NewGroup">@(userConfig.GetText("add_new_group"))</button>
    @if (showSampleRemoveButton)
    {
        <button type="button" class="btn btn-sm btn-danger" @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
    }
</div>

<div class="m-2 vheight75">
    <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="UserGroup" Items="groups" PageSize="0" ColumnReorder="true">
        <Column TableItem="UserGroup" Title="@(userConfig.GetText("group_action"))" Field="(x => x.Name)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditGroup(context)">@(userConfig.GetText("edit_group"))</button>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteGroup(context)">@(userConfig.GetText("delete_group"))</button>
                </div>
            </Template>
        </Column>
        <Column TableItem="UserGroup" Title="@(userConfig.GetText("user_action"))" Field="(x => x.Name)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-success" @onclick="() => AddUserToGroup(context)">@(userConfig.GetText("assign_user"))</button>
                    @if(context.Users.Count > 0)
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveUserFromGroup(context)">@(userConfig.GetText("remove_user"))</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("remove_user"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="UserGroup" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UserGroup" Title="@(userConfig.GetText("owner_group"))" Field="@(x => x.OwnerGroup)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.OwnerGroup))
            </Template>
        </Column>
        <Column TableItem="UserGroup" Title="@(userConfig.GetText("users"))" Field="@(x => x.Users)" Sortable="false" Filterable="false">
            <Template>
                @(context.UserList())
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="@((AddGroupMode ? userConfig.GetText("add_new_group") : userConfig.GetText("edit_group")))" Show="@EditGroupMode" Size=PopupSize.Small OnClose="() => EditGroupMode = false">
    <Body>
        @if (EditGroupMode)
        {
            <form onsubmit="return false">
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control form-control-sm" @bind="newGroupName" />
                    </div>
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("owner_group")):</label>
                    <div class="col-sm-2">
                        @if (AddGroupMode)
                        {
                            <input type="checkbox" @bind="actGroup.OwnerGroup">
                        }
                        else
                        {
                            @(GlobalConfig.ShowBool(actGroup.OwnerGroup))
                        }
                    </div>
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("roles")):</label>
                    <div class="col-sm-10">
                        @if (AddGroupMode)
                        {
                            <Dropdown ElementType="Role" ElementToString="@(r => r.Name)" @bind-SelectedElement="selectedRole" Elements="@(actGroup.OwnerGroup ? ownerGroupRoles : availableRoles)" Nullable="true">
                                <ElementTemplate Context="role">
                                    @role.Name
                                </ElementTemplate>
                            </Dropdown>
                        }
                        else
                        {
                            <label class="m-2">@actGroup.RoleList()</label>
                        }
                    </div>
                </div>
           </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@GlobalConst.kAdmin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => Save()">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("assign_user_to_group") + ": " + actGroup.Name)" Show="@AddUserMode" Size=PopupSize.Large OnClose="() => AddUserMode = false">
    <Body>
        @if (AddUserMode)
        {
            <form>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("active_user")):</label>
                    <div class="col-sm-8">
                        <Dropdown ElementType="UiUser" ElementToString="@(u => u.Dn)" @bind-SelectedElement="selectedUiUser" Elements="uiUsers">
                            <ElementTemplate Context="user">
                                @user.Dn
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <AuthorizeView Roles="@GlobalConst.kAdmin">
            <Authorized>
                <button type="button" class="btn btn-sm btn-success" @onclick="() => AddUserFromUiUsers()" @onclick:preventDefault>@(userConfig.GetText("assign"))</button>
            </Authorized>
            <NotAuthorized>
                <button type="button" class="btn btn-sm btn-success" disabled>@(userConfig.GetText("assign"))</button>
            </NotAuthorized> 
        </AuthorizeView>
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("remove_user_from_group") + ": " + actGroup.Name)" Show="@RemoveUserMode" Size=PopupSize.Large OnClose="() => RemoveUserMode = false">
    <Body>
        @if (RemoveUserMode)
        {
            <form>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("user")):</label>
                    <div class="col-sm-8">
                        <Dropdown ElementType="UiUser" ElementToString="@(u => u.Dn)" @bind-SelectedElement="selectedUserToDelete" Elements="actGroup.Users">
                            <ElementTemplate Context="user">
                                @user.Dn
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@GlobalConst.kAdmin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="async () => await RemoveUserFromGroup()" @onclick:preventDefault>@(userConfig.GetText("remove"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("remove"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<ConfirmDelete @bind-Display="DeleteGroupMode" PerformAction="DeleteGroup" Title="@userConfig.GetText("delete_group")" DeleteMessage="@deleteGroupMessage" DeleteAllowed="DeleteGroupAllowed"/>
<ConfirmDelete @bind-Display="SampleRemoveMode" PerformAction="RemoveSampleData" Title="@userConfig.GetText("remove_sample_data")" DeleteMessage="@sampleRemoveMessage" DeleteAllowed="sampleRemoveAllowed"/>
<InProgress Display="workInProgress"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    private List<UserGroup> groups = new List<UserGroup>();
    private List<UserGroup> sampleGroups = new List<UserGroup>();
    private List<UiUser> uiUsers = new List<UiUser>();
    private List<Role> roles = new List<Role>();
    private List<Role> availableRoles = new List<Role>();
    private List<Role> ownerGroupRoles = new List<Role>();

    private UiUser selectedUiUser = new UiUser();
    private UiUser selectedUserToDelete = new UiUser();
    private Role? selectedRole;
    private bool showSampleRemoveButton = false;

    private UserGroup actGroup = new UserGroup();
    private string newGroupName = "";

    private bool AddGroupMode = false;
    private bool EditGroupMode = false;
    private bool DeleteGroupMode = false;
    private bool AddUserMode = false;
    private bool RemoveUserMode = false;
    private bool SampleRemoveMode = false;

    private bool sampleRemoveAllowed = false;
    private bool DeleteGroupAllowed = false;

    private string sampleRemoveMessage = "";
    private string deleteGroupMessage = "";
    private bool workInProgress = false;


    protected override async Task OnInitializedAsync()
    {
        try
        { 
            groups = await GroupAccess.GetGroupsFromInternalLdap(middlewareClient, userConfig, DisplayMessageInUi);
            CollectSampleGroups();

            uiUsers = await apiConnection.SendQueryAsync<List<UiUser>>(FWO.Api.Client.Queries.AuthQueries.getUsers);
            uiUsers = uiUsers.FindAll(x => x.DbId != 0);

            // get roles from internal ldap
            await GetRolesFromInternalLdap();
            SynchronizeGroupsToRoles();

            availableRoles = roles.FindAll(x => (x.Name != GlobalConst.kAnonymous && x.Name != GlobalConst.kMiddlewareServer));
            ownerGroupRoles = roles.FindAll(x => (x.Name == GlobalConst.kRecertifier || x.Name == GlobalConst.kModeller));
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private void CollectSampleGroups()
    {
        sampleGroups = new List<UserGroup>();
        foreach (var group in groups)
        {
            if (group.Name.EndsWith("_demo"))
            {
                sampleGroups.Add(group);
            }
        }
        showSampleRemoveButton = (sampleGroups.Count > 0);
    }

    private async Task GetRolesFromInternalLdap()
    {
        try
        {
            roles = await RoleAccess.GetRolesFromInternalLdap(middlewareClient);
            if (roles.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("fetch_roles"), userConfig.GetText("E5251"), true);
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_roles"), "", true);
        }
    }
    private void SynchronizeGroupsToRoles()
    {
        foreach (var group in groups)
        {
            group.Roles = new List<string>();
            foreach (var role in roles)
            {
                if (role.Users != null && role.Users.Exists(x => x.Dn == group.Dn))
                {
                    group.Roles.Add(role.Name);
                }
            }
        }
    }

    private void NewGroup()
    {
        selectedRole = null;
        EditGroup(new UserGroup());
        AddGroupMode = true;
    }

    private void EditGroup(UserGroup group)
    {
        actGroup = group;
        newGroupName = actGroup.Name;
        EditGroupMode = true;
    }

    private async Task Save()
    {
        try
        {
            bool shortened = false;
            newGroupName = Sanitizer.SanitizeMand(newGroupName, ref shortened);
            if(shortened)
            {
                DisplayMessageInUi(null, userConfig.GetText("save_group"), userConfig.GetText("U0001"), true);
            }
            if (CheckValues())
            {
                if (AddGroupMode)
                {
                    actGroup.Roles = new List<string>();
                    if(selectedRole != null)
                    {
                        actGroup.Roles.Add(selectedRole.Name);
                    }

                    // insert new group to ldap
                    GroupAddDeleteParameters addGroupParameters = new GroupAddDeleteParameters { GroupName = newGroupName, OwnerGroup = actGroup.OwnerGroup };
                    RestResponse<string> middlewareServerResponse = await middlewareClient.AddGroup(addGroupParameters);
                    
                    if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == null || middlewareServerResponse.Data == "")
                    {
                        DisplayMessageInUi(null, userConfig.GetText("add_new_group"), userConfig.GetText("E5236"), true);
                    }
                    else
                    {
                        actGroup.Dn = middlewareServerResponse.Data;
                        actGroup.Name = newGroupName;
                        groups.Add(actGroup);
                        await AddGroupToRolesInLdap(actGroup);
                        AddGroupMode = false;
                        EditGroupMode = false;
                    }
                }
                else
                {
                    // Update existing group in ldap --> currently only name
                    GroupEditParameters groupEditParameters = new GroupEditParameters { OldGroupName = actGroup.Name, NewGroupName = newGroupName };
                    RestResponse<string> middlewareServerResponse = await middlewareClient.UpdateGroup(groupEditParameters);

                    if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == null || middlewareServerResponse.Data == "")
                    {
                        DisplayMessageInUi(null, userConfig.GetText("edit_group"), userConfig.GetText("E5237"), true);
                    }
                    else
                    {
                        string newDn = middlewareServerResponse.Data;
                        int changedGroup = groups.FindIndex(x => x.Dn == actGroup.Dn);
                        groups[changedGroup].Dn = newDn;
                        groups[changedGroup].Name = newGroupName;
                        EditGroupMode = false;
                    }
                }
                CollectSampleGroups();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_group"), "", true);
        }
    }

    private bool CheckValues()
    {
        if (newGroupName == null || newGroupName == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("save_group"), userConfig.GetText("E5234"), true);
            return false;
        }
        else if(groups.Exists(x => x.Name == newGroupName))
        {
            DisplayMessageInUi(null, userConfig.GetText("save_group"), userConfig.GetText("E5235"), true);
            return false;
        }
        return true;
    }

    private async Task AddGroupToRolesInLdap(UserGroup group)
    {
        try
        {
            foreach(string roleName in group.Roles)
            {
                Role? role = roles.FirstOrDefault(x => x.Name == roleName);
                if (role != null)
                {
                    RoleAddDeleteUserParameters addGroupToRoleParameters = new RoleAddDeleteUserParameters { Role = role.Dn, UserDn = group.Dn };
                    RestResponse<bool> middlewareServerResponse = await middlewareClient.AddUserToRole(addGroupToRoleParameters);
                    if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
                    {
                        DisplayMessageInUi(null, userConfig.GetText("assign_user_group_to_role"), userConfig.GetText("E5246"), true);
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("assign_user_group_to_role"), "", true);
        }
    }

    private void RequestDeleteGroup(UserGroup group)
    {
        actGroup = group;
        if (actGroup.Users.Count > 0)
        {
            deleteGroupMessage = userConfig.GetText("E5238");
            DeleteGroupAllowed = false;
        }
        else
        {
            deleteGroupMessage = userConfig.GetText("U5204") + actGroup.Name + "?";
            DeleteGroupAllowed = true;
        }
        DeleteGroupMode = true;
    }

    private async Task DeleteGroup()
    {
        try
        {
            // remove group from Ldap
            GroupAddDeleteParameters groupDeleteParameters = new GroupAddDeleteParameters { GroupName = actGroup.Name };
            RestResponse<bool> middlewareServerResponse = await middlewareClient.DeleteGroup(groupDeleteParameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_group"), userConfig.GetText("E5239"), true);
            }
            else
            {
                groups.Remove(actGroup);
                DeleteGroupMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_group"), "", true);
        }
        StateHasChanged();
    }

    private void AddUserToGroup(UserGroup group)
    {
        AddUserMode = true;
        actGroup = group;
        selectedUiUser = uiUsers.Count > 0 ? uiUsers.First() : new UiUser();
    }

    private void RemoveUserFromGroup(UserGroup group)
    {
        RemoveUserMode = true;
        actGroup = group;
        selectedUserToDelete = actGroup.Users.Count > 0 ? actGroup.Users.First() : new UiUser();
    }

    private async Task AddUserFromUiUsers()
    {
        if (selectedUiUser.Dn == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("assign_user_to_group"), userConfig.GetText("E5240"), true);
        }
        else if (actGroup.Users.Contains(selectedUiUser))
        {
            DisplayMessageInUi(null, userConfig.GetText("assign_user_to_group"), userConfig.GetText("E5241"), true);
        }
        else
        {
            // assign user to group in LDAP
            try
            {
                GroupAddDeleteUserParameters groupAddParameters = new GroupAddDeleteUserParameters { UserDn = selectedUiUser.Dn, GroupDn = actGroup.Dn };
                RestResponse<bool> middlewareServerResponse = await middlewareClient.AddUserToGroup(groupAddParameters);
                if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
                {
                    DisplayMessageInUi(null, userConfig.GetText("assign_user_to_group"), userConfig.GetText("E5242"), true);
                }
                else
                {
                    actGroup.Users.Add(selectedUiUser);
                    groups[groups.FindIndex(x => x.Name == actGroup.Name)] = actGroup;
                    AddUserMode = false;
                }
            }
            catch (System.Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("assign_user_to_group"), "", true);
            }
        }
    }

    private async Task RemoveUserFromGroup()
    {
        if (selectedUserToDelete.Dn != "")
        {
            // remove user from group in LDAP
            try
            {
                GroupAddDeleteUserParameters removeUserFromGroupParameters = new GroupAddDeleteUserParameters { GroupDn = actGroup.Dn, UserDn = selectedUserToDelete.Dn };
                RestResponse<bool> middlewareServerResponse = await middlewareClient.RemoveUserFromGroup(removeUserFromGroupParameters);
                if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
                {
                    DisplayMessageInUi(null, userConfig.GetText("remove_user_from_group"), userConfig.GetText("E5243"), true);
                }
                else
                {
                    actGroup.Users.Remove(selectedUserToDelete);
                    groups[groups.FindIndex(x => x.Name == actGroup.Name)] = actGroup;
                    RemoveUserMode = false;
                }
            }
            catch (System.Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("remove_user_from_group"), "", true);
            }
        }
        else
        {
            DisplayMessageInUi(null, userConfig.GetText("remove_user_from_group"), userConfig.GetText("E5244"), true);
        }
    }

    private void RequestRemoveSampleData()
    {
        if (sampleGroups.Exists(group => (group.Users.Exists(user => !user.Name.EndsWith("_demo")))))
        {
            sampleRemoveMessage = userConfig.GetText("E5245");
            sampleRemoveAllowed = false;
        }
        else
        {
            sampleRemoveMessage = userConfig.GetText("U5205");
            sampleRemoveAllowed = true;
        }
        SampleRemoveMode = true;
    }

    private async Task RemoveSampleData()
    {
        showSampleRemoveButton = false;
        SampleRemoveMode = false;
        workInProgress = true;
        foreach (var group in sampleGroups)
        {
            actGroup = group;
            await DeleteGroup();
        }
        workInProgress = false;
        StateHasChanged();
    }

    private void Cancel()
    {
        AddGroupMode = false;
        EditGroupMode = false;
        DeleteGroupMode = false;
        AddUserMode = false;
        RemoveUserMode = false;
        SampleRemoveMode = false;
    }
}
