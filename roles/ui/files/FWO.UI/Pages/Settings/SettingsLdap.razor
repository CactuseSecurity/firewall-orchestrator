@using BlazorTable
@using System.Net
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Middleware.Client
@using FWO.Middleware.RequestParameters
@using RestSharp


@page "/settings/ldap"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<h3>@(userConfig.GetText("ldap_conns"))</h3>
@(userConfig.GetText("U5211"))
<hr />

<button class="btn btn-success m-2" @onclick="Add">@(userConfig.GetText("add_new_ldap"))</button>

<div class="m-2">
    <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="UiLdapConnection" Items="connectedLdaps" PageSize="0" ColumnReorder="true">
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Clone(context)">@(userConfig.GetText("clone"))</button>
                    <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">@(userConfig.GetText("edit"))</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">@(userConfig.GetText("delete"))</button>
                </div>
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("active"))" Field="@(x => x.Active)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.Active))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("host"))" Field="@(x => x.Address)" Sortable="true">
            <Template>
                @(context.Host())
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("type"))" Field="@(x => x.Type)" Sortable="true">
            <Template>
                @(Enum.GetName(typeof(LdapType), context.Type))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("search_user"))" Field="@(x => x.SearchUser)" Sortable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.SearchUser != null && context.SearchUser != ""))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("write_user"))" Field="@(x => x.WriteUser)" Sortable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.IsWritable()))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("role_handling"))" Field="@(x => x.RoleSearchPath)" Sortable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.HasRoleHandling()))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("group_handling"))" Field="@(x => (x.GroupSearchPath))" Sortable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.HasGroupHandling()))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("tenant"))" Field="@(x => x.TenantId)" Sortable="true">
            <Template>
                @(context.TenantId != null ? tenants.FirstOrDefault(x => x.Id == context.TenantId)?.Name ?? "" : "" )
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("global_tenant_name"))" Field="@(x => x.GlobalTenantName)" Sortable="true"/>
    </Table>
</div>

<PopUp Title="@(userConfig.GetText("edit_ldap"))" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="ldapName" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapName" type="text" class="form-control form-control-sm" @bind="actLdapConnection.Name" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapAddress" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("address"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapAddress" type="text" class="form-control form-control-sm" @bind="actLdapConnection.Address" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapPort" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                    <div class="col-sm-2">
                        <input id="ldapPort" type="text" class="form-control form-control-sm" @bind="actLdapConnection.Port" />
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" id="ldapTls" type="checkbox" @bind="actLdapConnection.Tls">
                        <label class="form-check-label" for="ldapTls"><small>Tls</small></label>
                    </div>
                    <label for="ldapTenantLevel" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant_level")):</label>
                    <div class="col-sm-2">
                        <input id="ldapTenantLevel" type="text" class="form-control form-control-sm" @bind="actLdapConnection.TenantLevel" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapType" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                    <div class="col-sm-4">
                        <select id="ldapType" class="form-control form-control-sm" @bind="actLdapConnection.Type">
                            @foreach (int type in Enum.GetValues(typeof(LdapType)))
                            {
                                <option value="@type">@(Enum.GetName(typeof(LdapType), type))</option>
                            }
                        </select>
                    </div>
                    <label for="ldapPattern" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("pattern_length")):</label>
                    <div class="col-sm-2">
                        <input id="ldapPattern" type="text" class="form-control form-control-sm" @bind="actLdapConnection.PatternLength" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapUserSearchPath" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("user_search_path"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapUserSearchPath" type="text" class="form-control form-control-sm" @bind="actLdapConnection.UserSearchPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapRoleSearchPath" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("role_search_path")):</label>
                    <div class="col-sm-8">
                        <input id="ldapRoleSearchPath" type="text" class="form-control form-control-sm" @bind="actLdapConnection.RoleSearchPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapGroupSearchPath" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("group_search_path")):</label>
                    <div class="col-sm-8">
                        <input id="ldapGroupSearchPath" type="text" class="form-control form-control-sm" @bind="actLdapConnection.GroupSearchPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapSearchUser" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("search_user"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapSearchUser" type="text" class="form-control form-control-sm" @bind="actLdapConnection.SearchUser" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapSearchUserPwd" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("search_user_pwd"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapSearchUserPwd" type="password" class="form-control form-control-sm" @bind="actLdapConnection.SearchUserPwd" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapWriteUser" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("write_user")):</label>
                    <div class="col-sm-8">
                        <input id="ldapWriteUser" type="text" class="form-control form-control-sm" @bind="actLdapConnection.WriteUser" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapWriteUserPwd" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("write_user_pwd")):</label>
                    <div class="col-sm-8">
                        <input id="ldapWriteUserPwd" type="password" class="form-control form-control-sm" @bind="actLdapConnection.WriteUserPwd" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="deviceTenant" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant")):</label>
                    <div class="col-sm-8">
                        <select id="deviceTenant" class="form-control form-control-sm" @bind="actLdapConnection.TenantIdAsString">
                            <option value="null">@(userConfig.GetText("none"))</option>
                            @foreach (Tenant tenant in tenants)
                            {
                                <option value="@tenant.Id">@(tenant.Name)</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapGlobTenName" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("global_tenant_name")):</label>
                    <div class="col-sm-8">
                        <input id="ldapGlobTenName" type="text" class="form-control form-control-sm" @bind="actLdapConnection.GlobalTenantName" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapActive" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("active")):</label>
                    <div class="col-sm-8">
                        <input id="ldapActive" type="checkbox" @bind="actLdapConnection.Active">
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-dark" @onclick="TestConnection">@(userConfig.GetText("test_connection"))</button>
                    <button class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-dark" disabled>@(userConfig.GetText("test_connection"))</button>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("delete_ldap_conn"))" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <p>@(deleteMessage)</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(actLdapConnection)">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    private List<UiLdapConnection> connectedLdaps = new List<UiLdapConnection>();

    private List<Tenant> tenants = new List<Tenant>();

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool AddMode = false;

    private UiLdapConnection newLdapConnection = new UiLdapConnection();
    private UiLdapConnection actLdapConnection = new UiLdapConnection();

    private string deleteMessage = "";
    private bool wasActive = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            RestResponse<List<LdapGetUpdateParameters>> ldapMiddlewareServerResponse = await middlewareClient.GetLdaps();
            if (ldapMiddlewareServerResponse.StatusCode != HttpStatusCode.OK || ldapMiddlewareServerResponse.Data == null)
            {
                DisplayMessageInUi!(null, userConfig.GetText("fetch_ldap_conn"), userConfig.GetText("E5204"), true);
            }
            else
            {
                connectedLdaps = new List<UiLdapConnection>();
                foreach (LdapGetUpdateParameters conn in ldapMiddlewareServerResponse.Data)
                {
                    connectedLdaps.Add(new UiLdapConnection(conn));
                }
            }

            tenants = await apiConnection.SendQueryAsync<List<Tenant>>(FWO.Api.Client.Queries.AuthQueries.getTenants);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private void Edit(UiLdapConnection ldapConnection)
    {
        actLdapConnection = new UiLdapConnection(ldapConnection);
        wasActive = ldapConnection.Active;
        EditMode = true;
    }

    private void RequestDelete(UiLdapConnection ldapConnection)
    {
        actLdapConnection = ldapConnection;
        // Checks if delete possible. Todo: further checks?
        if (connectedLdaps.Count == 1)
        {
            DisplayMessageInUi!(null, userConfig.GetText("delete_ldap_conn"), userConfig.GetText("E5261"), true);
        }
        else if (actLdapConnection.HasRoleHandling())
        {
            DisplayMessageInUi!(null, userConfig.GetText("delete_ldap_conn"), userConfig.GetText("E5262"), true);
        }
        else
        {
            deleteMessage = $"Are you sure you want to delete ldapConnection {actLdapConnection.Address}?";
            DeleteMode = true;
        }
    }

    private async Task Delete(UiLdapConnection ldapConnection)
    {
        try
        {
            LdapDeleteParameters ldapDeleteParameters = new LdapDeleteParameters { Id = ldapConnection.Id };
            RestResponse<int> ldapMiddlewareServerResponse = await middlewareClient.DeleteLdap(ldapDeleteParameters);
            if (ldapMiddlewareServerResponse.StatusCode != HttpStatusCode.OK)
            {
                DisplayMessageInUi!(null, userConfig.GetText("delete_ldap_conn"), userConfig.GetText("E5203"), true);
            }
            else
            {
                if (ldapMiddlewareServerResponse.Data == ldapConnection.Id)
                {
                    connectedLdaps.Remove(ldapConnection);
                    DeleteMode = false;
                }
            }
        }
        catch (Exception exception)
        {
            // Log.WriteDebug("Delete Ldap Connection", $"Exception occurred: {exception}");
            DisplayMessageInUi!(exception, userConfig.GetText("delete_ldap_conn"), "", true);
        }
    }

    private void Add()
    {
        AddMode = true;
        newLdapConnection = new UiLdapConnection() { TenantLevel = 1 };
        Edit(newLdapConnection);
    }

    private void Clone(UiLdapConnection ldapConnection)
    {
        AddMode = true;
        newLdapConnection = new UiLdapConnection(ldapConnection);
        newLdapConnection.Id = 0;
        Edit(newLdapConnection);
    }

    private async Task TestConnection()
    {
        try
        {
            LdapGetUpdateParameters ldapParams = new LdapGetUpdateParameters()
            {
                Address = actLdapConnection.Address,
                Port = actLdapConnection.Port,
                Tls = actLdapConnection.Tls,
                SearchUser = actLdapConnection.SearchUser,
                SearchUserPwd = actLdapConnection.SearchUserPwd,
                WriteUser = actLdapConnection.WriteUser,
                WriteUserPwd = actLdapConnection.WriteUserPwd
            };
            RestResponse<int> middlewareServerResponse = await middlewareClient.TestConnection(ldapParams);
            if (middlewareServerResponse.StatusCode == HttpStatusCode.OK)
            {
                switch (middlewareServerResponse.Data)
                {
                    case 0: 
                        DisplayMessageInUi!(null, userConfig.GetText("test_connection"), userConfig.GetText("E5266"), false);
                        break;
                    case 1: 
                        DisplayMessageInUi!(null, userConfig.GetText("test_connection"), userConfig.GetText("E5268"), true);
                        break;
                    case 2: 
                        DisplayMessageInUi!(null, userConfig.GetText("test_connection"), userConfig.GetText("E5269"), true);
                        break;
                    case 3: 
                        DisplayMessageInUi!(null, userConfig.GetText("test_connection"), userConfig.GetText("E5270"), true);
                        break;
                    default: 
                        DisplayMessageInUi!(null, userConfig.GetText("test_connection"), userConfig.GetText("E5267"), true);
                        break;
                }
            }
            else
            {
                DisplayMessageInUi!(null, userConfig.GetText("test_connection"), userConfig.GetText("E5267"), true);
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("test_connection"), "", true);
        }
    }

    private async Task Save()
    {
        try
        {
            if (actLdapConnection.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("U0001"), true);
            }
            if (CheckValues())
            {    
                if (AddMode)
                {
                    RestResponse<int> ldapMiddlewareServerResponse = await middlewareClient.AddLdap(actLdapConnection.ToApiParams());
                    if (ldapMiddlewareServerResponse.StatusCode != HttpStatusCode.OK)
                    {
                        DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5201"), true);
                    }
                    else
                    {
                        actLdapConnection.Id = ldapMiddlewareServerResponse.Data;
                        connectedLdaps.Add(actLdapConnection);
                        AddMode = false;
                        EditMode = false;
                    }
                }
                else
                {
                    RestResponse<int> ldapMiddlewareServerResponse = await middlewareClient.UpdateLdap(actLdapConnection.ToApiParams());
                    if (ldapMiddlewareServerResponse.StatusCode != HttpStatusCode.OK)
                    {
                        DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5202"), true);
                    }
                    else
                    {
                        int udId = ldapMiddlewareServerResponse.Data;
                        EditMode = (udId == actLdapConnection.Id ? false : true);
                        connectedLdaps[connectedLdaps.FindIndex(x => x.Id == actLdapConnection.Id)] = actLdapConnection;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            // Log.WriteDebug("Save Ldap Connection", $"Exception occurred: {exception}");
            DisplayMessageInUi!(exception, userConfig.GetText("save_ldap_conn"), "", true);
        }
    }

    private bool CheckValues()
    {
        if (actLdapConnection.Address == null || actLdapConnection.Address == "" ||
            actLdapConnection.SearchUser == null || actLdapConnection.SearchUser == "" ||
            actLdapConnection.SearchUserPwd == null || actLdapConnection.SearchUserPwd == "" ||
            actLdapConnection.UserSearchPath == null || actLdapConnection.UserSearchPath == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5102"), true);
            return false;
        }
        if (actLdapConnection.Port < 1 || actLdapConnection.Port > 65535)
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5103"), true);
            return false;
        }
        if (actLdapConnection.PatternLength < 0)
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5263"), true);
            return false;
        }
        if (connectedLdaps.FirstOrDefault(x => x.Address == actLdapConnection.Address && x.Port == actLdapConnection.Port && x.Id != actLdapConnection.Id) != null)
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5264"), true);
            return false;
        }
        if (actLdapConnection.HasRoleHandling() && !actLdapConnection.IsInternal())
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5265"), true);
            return false;
        }
        if (!AddMode && wasActive && !actLdapConnection.Active && connectedLdaps.Where(x => x.Active).Count() == 1)
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5260"), true);
            return false;
        }
        return true;
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
    }
}
