@using BlazorTable
@using FWO.Api.Data
@using FWO.ApiClient
@using FWO.Config.Api

@page "/settings/ldap"
@attribute [Authorize(Roles = "admin, auditor")]

@inject APIConnection apiConnection
@inject UserConfig userConfig

<h3 class="m-2">@(userConfig.GetText("ldap_conns"))</h3>
@(userConfig.GetText("U5211"))
<hr />

<button class="btn btn-success m-2" @onclick="Add">@(userConfig.GetText("add_new_ldap"))</button>

<div class="m-2">
    <Table class="table table-bordered table-responsive" TableItem="UiLdapConnection" Items="connectedLdaps" PageSize="0" ColumnReorder="true">
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Clone(context)">@(userConfig.GetText("clone"))</button>
                    <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">@(userConfig.GetText("edit"))</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">@(userConfig.GetText("delete"))</button>
                </div>
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("host"))" Field="@(x => x.Address)" Sortable="true" Filterable="true">
            <Template>
                @(context.Host())
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("type"))" Field="@(x => x.Type)" Sortable="true" Filterable="true">
            <Template>
                @(Enum.GetName(typeof(LdapType), context.Type))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("search_user"))" Field="@(x => x.SearchUser)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.SearchUser != null && context.SearchUser != ""))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("write_user"))" Field="@(x => x.WriteUser)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.IsWritable()))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("role_handling"))" Field="@(x => x.RoleSearchPath)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.HasRoleHandling()))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("group_handling"))" Field="@(x => (x.GroupSearchPath))" Sortable="true" Filterable="true">
            <Template>
                @(GlobalConfig.ShowBool(context.HasGroupHandling()))
            </Template>
        </Column>
        <Column TableItem="UiLdapConnection" Title="@(userConfig.GetText("tenant"))" Field="@(x => x.TenantId)" Sortable="true" Filterable="true">
            <Template>
                @(context.TenantId != null ? tenants.Find(x => x.Id == context.TenantId).Name : "" )
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="@(userConfig.GetText("edit_ldap"))" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="ldapName" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapName" type="text" class="form-control form-control-sm" @bind="actLdapConnection.Name" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapAddress" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("address"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapAddress" type="text" class="form-control form-control-sm" @bind="actLdapConnection.Address" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapPort" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                    <div class="col-sm-2">
                        <input id="ldapPort" type="text" class="form-control form-control-sm" @bind="actLdapConnection.Port" />
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" id="ldapTls" type="checkbox" @bind="actLdapConnection.Tls">
                        <label class="form-check-label" for="ldapTls"><small>Tls</small></label>
                    </div>
                    <label for="ldapTenantLevel" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant_level")):</label>
                    <div class="col-sm-2">
                        <input id="ldapTenantLevel" type="text" class="form-control form-control-sm" @bind="actLdapConnection.TenantLevel" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapType" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                    <div class="col-sm-4">
                        <select id="ldapType" class="form-control form-control-sm" @bind="actLdapConnection.Type">
                            @foreach (int type in Enum.GetValues(typeof(LdapType)))
                            {
                                <option value="@type">@(Enum.GetName(typeof(LdapType), type))</option>
                            }
                        </select>
                    </div>
                    <label for="ldapPattern" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("pattern_length")):</label>
                    <div class="col-sm-2">
                        <input id="ldapPattern" type="text" class="form-control form-control-sm" @bind="actLdapConnection.PatternLength" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapUserSearchPath" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("user_search_path"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapUserSearchPath" type="text" class="form-control form-control-sm" @bind="actLdapConnection.UserSearchPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapRoleSearchPath" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("role_search_path")):</label>
                    <div class="col-sm-8">
                        <input id="ldapRoleSearchPath" type="text" class="form-control form-control-sm" @bind="actLdapConnection.RoleSearchPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapGroupSearchPath" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("group_search_path")):</label>
                    <div class="col-sm-8">
                        <input id="ldapGroupSearchPath" type="text" class="form-control form-control-sm" @bind="actLdapConnection.GroupSearchPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapSearchUser" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("search_user"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapSearchUser" type="text" class="form-control form-control-sm" @bind="actLdapConnection.SearchUser" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapSearchUserPwd" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("search_user_pwd"))*:</label>
                    <div class="col-sm-8">
                        <input id="ldapSearchUserPwd" type="password" class="form-control form-control-sm" @bind="actLdapConnection.SearchUserPwd" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapWriteUser" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("write_user")):</label>
                    <div class="col-sm-8">
                        <input id="ldapWriteUser" type="text" class="form-control form-control-sm" @bind="actLdapConnection.WriteUser" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="ldapWriteUserPwd" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("write_user_pwd")):</label>
                    <div class="col-sm-8">
                        <input id="ldapWriteUserPwd" type="password" class="form-control form-control-sm" @bind="actLdapConnection.WriteUserPwd" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="deviceTenant" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant")):</label>
                    <div class="col-sm-8">
                        <select id="deviceTenant" class="form-control form-control-sm" @bind="actLdapConnection.TenantIdAsString">
                            <option value="null">@(userConfig.GetText("none"))</option>
                            @foreach (Tenant tenant in tenants)
                            {
                                <option value="@tenant.Id">@(tenant.Name)</option>
                            }
                        </select>
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("delete_ldap_conn"))" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <p>@(deleteMessage)</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(actLdapConnection)">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    private List<UiLdapConnection> connectedLdaps = new List<UiLdapConnection>();

    private List<Tenant> tenants = new List<Tenant>();

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool AddMode = false;

    private UiLdapConnection newLdapConnection;
    private UiLdapConnection actLdapConnection;

    private string deleteMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            connectedLdaps = (await apiConnection.SendQueryAsync<UiLdapConnection[]>(FWO.ApiClient.Queries.AuthQueries.getLdapConnections)).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_ldap_conn"), null, true);
        }
        try
        {
            tenants = (await apiConnection.SendQueryAsync<Tenant[]>(FWO.ApiClient.Queries.AuthQueries.getTenants)).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_tenants"), null, true);
        }
    }

    private void Edit(UiLdapConnection ldapConnection)
    {
        actLdapConnection = new UiLdapConnection(ldapConnection);
        EditMode = true;
    }

    private void RequestDelete(UiLdapConnection ldapConnection)
    {
        actLdapConnection = ldapConnection;
        // Checks if delete possible. Todo: further checks?
        if (connectedLdaps.Count == 1)
        {
            DisplayMessageInUi(null, userConfig.GetText("delete_ldap_conn"), userConfig.GetText("E5261"), true);
        }
        else if (actLdapConnection.HasRoleHandling())
        {
            DisplayMessageInUi(null, userConfig.GetText("delete_ldap_conn"), userConfig.GetText("E5262"), true);
        }
        else
        {
            deleteMessage = $"Are you sure you want to delete ldapConnection {actLdapConnection.Address}?";
            DeleteMode = true;
        }
    }

    private async Task Delete(UiLdapConnection ldapConnection)
    {
        try
        {
            var Variables = new { id = ldapConnection.Id };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.deleteLdapConnection, Variables)).DeletedId;
            if (delId == ldapConnection.Id)
            {
                connectedLdaps.Remove(ldapConnection);
                DeleteMode = false;
            }
        }
        catch (Exception exception)
        {
            // Log.WriteDebug("Delete Ldap Connection", $"Exception occurred: {exception}");
            DisplayMessageInUi(exception, userConfig.GetText("delete_ldap_conn"), null, true);
        }
    }

    private void Add()
    {
        AddMode = true;
        newLdapConnection = new UiLdapConnection() { TenantLevel = 1 };
        Edit(newLdapConnection);
    }

    private void Clone(UiLdapConnection ldapConnection)
    {
        AddMode = true;
        newLdapConnection = new UiLdapConnection(ldapConnection);
        newLdapConnection.Id = 0;
        Edit(newLdapConnection);
    }

    private async Task Save()
    {
        try
        {
            if (CheckValues())
            {    
                if (AddMode)
                {
                    var Variables = new
                    {
                        name = actLdapConnection.Name,
                        address = actLdapConnection.Address,
                        port = actLdapConnection.Port,
                        type = actLdapConnection.Type,
                        patternLength = actLdapConnection.PatternLength,
                        searchUser = actLdapConnection.SearchUser,
                        tls = actLdapConnection.Tls,
                        tenantLevel = actLdapConnection.TenantLevel,
                        searchUserPwd = actLdapConnection.SearchUserPwd,
                        searchpathForUsers = actLdapConnection.UserSearchPath,
                        searchpathForRoles = actLdapConnection.RoleSearchPath,
                        searchpathForGroups = actLdapConnection.GroupSearchPath,
                        writeUser = actLdapConnection.WriteUser,
                        writeUserPwd = actLdapConnection.WriteUserPwd,
                        tenantId = actLdapConnection.TenantId
                    };
                    actLdapConnection.Id = (await apiConnection.SendQueryAsync<NewReturning>(FWO.ApiClient.Queries.AuthQueries.newLdapConnection, Variables)).ReturnIds[0].NewId;
                    connectedLdaps.Add(actLdapConnection);
                    AddMode = false;
                    EditMode = false;
                }
                else
                {
                    var Variables = new
                    {
                        id = actLdapConnection.Id,
                        name = actLdapConnection.Name,
                        address = actLdapConnection.Address,
                        port = actLdapConnection.Port,
                        type = actLdapConnection.Type,
                        patternLength = actLdapConnection.PatternLength,
                        searchUser = actLdapConnection.SearchUser,
                        tls = actLdapConnection.Tls,
                        tenantLevel = actLdapConnection.TenantLevel,
                        searchUserPwd = actLdapConnection.SearchUserPwd,
                        searchpathForUsers = actLdapConnection.UserSearchPath,
                        searchpathForRoles = actLdapConnection.RoleSearchPath,
                        searchpathForGroups = actLdapConnection.GroupSearchPath,
                        writeUser = actLdapConnection.WriteUser,
                        writeUserPwd = actLdapConnection.WriteUserPwd,
                        tenantId = actLdapConnection.TenantId
                    };
                    int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.updateLdapConnection, Variables)).UpdatedId;
                    EditMode = (udId == actLdapConnection.Id ? false : true);
                    connectedLdaps[connectedLdaps.FindIndex(x => x.Id == actLdapConnection.Id)] = actLdapConnection;
                }
            }
        }
        catch (Exception exception)
        {
            // Log.WriteDebug("Save Ldap Connection", $"Exception occurred: {exception}");
            DisplayMessageInUi(exception, userConfig.GetText("save_ldap_conn"), null, true);
        }
    }

    private bool CheckValues()
    {
        if (actLdapConnection.Address == null || actLdapConnection.Address == "" ||
            actLdapConnection.SearchUser == null || actLdapConnection.SearchUser == "" ||
            actLdapConnection.SearchUserPwd == null || actLdapConnection.SearchUserPwd == "" ||
            actLdapConnection.UserSearchPath == null || actLdapConnection.UserSearchPath == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5102"), true);
            return false;
        }
        if (actLdapConnection.Port < 1 || actLdapConnection.Port > 65535)
        {
            DisplayMessageInUi(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5103"), true);
            return false;
        }
        if (actLdapConnection.PatternLength < 0)
        {
            DisplayMessageInUi(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5263"), true);
            return false;
        }
        if (connectedLdaps.FirstOrDefault(x => x.Address == actLdapConnection.Address && x.Port == actLdapConnection.Port && x.Id != actLdapConnection.Id) != null)
        {
            DisplayMessageInUi(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5264"), true);
            return false;
        }
        if (actLdapConnection.HasRoleHandling() && !actLdapConnection.IsInternal())
        {
            DisplayMessageInUi(null, userConfig.GetText("save_ldap_conn"), userConfig.GetText("E5265"), true);
            return false;
        }
        return true;
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
    }
}
