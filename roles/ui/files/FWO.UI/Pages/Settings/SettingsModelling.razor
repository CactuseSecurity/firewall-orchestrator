@using System.Text.Json
@using FWO.Ui.Data
@using FWO.Ui.Pages.NetworkModelling

@page "/settings/modelling"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("modelling_settings"))</h3>
    <HelpLink Page="settings/modelling" />
</div>
@(userConfig.GetText("U5322"))
<hr />

@if(configData != null && initComplete)
{
    <form onsubmit="return false">
        <button type="button" class="btn btn-sm btn-dark ms-5" data-toggle="tooltip" title="@(userConfig.PureLine("H5602"))"
        @onclick="PredefServices">
            @(userConfig.GetText("predef_services"))
        </button>
        <hr />
        <div class="form-group row mt-2">
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5603"))">
                <label for="cbx_allow_server_in_conn" class="col-form-label col-sm-8">@(userConfig.GetText("allowServerInConn")):</label>
                <div class="col-sm-2">
                    <input id="cbx_allow_server_in_conn" type="checkbox" class="w-100" @bind="configData!.AllowServerInConn">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5604"))">
                <label for="cbx_allow_service_in_conn" class="col-form-label col-sm-8">@(userConfig.GetText("allowServiceInConn")):</label>
                <div class="col-sm-2">
                    <input id="cbx_allow_service_in_conn" type="checkbox" class="w-100" @bind="configData!.AllowServiceInConn">
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5605"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("overviewDisplayLines"))*:</label>
                <input type="number" min="0" class="col-sm-3" @bind="configData!.OverviewDisplayLines" />
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5618"))">
                <label for="cbx_iconify" class="col-form-label col-sm-8">@(userConfig.GetText("modIconify"))*:</label>
                <div class="col-sm-2">
                    <input id="cbx_iconify" type="checkbox" class="w-100" @bind="configData!.ModIconify">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5617"))">
                <label for="cbx_reduced_protocol_set" class="col-form-label col-sm-8">@(userConfig.GetText("reducedProtocolSet")):</label>
                <div class="col-sm-2">
                    <input id="cbx_reduced_protocol_set" type="checkbox" class="w-100" @bind="configData!.ReducedProtocolSet">
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5627"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("app_server_types"):</label>
            <div class="col-sm-6">
                <div class="row">
                    <label class="col-form-label col-sm-2">@userConfig.GetText("default_app_server_type"):</label>
                    <input type="text" class="col-sm-10" @bind="appServerDefaultTypeName" />
                </div>
                <EditList ElementType="AppServerType" Elements="appServerTypes.Where(x => x.Id != 0).ToArray()" ElementsToAdd="appServerTypesToAdd" ElementsToDelete="appServerTypesToDelete" StdLayout="false">
                    <Display>
                        <div class="row">
                            <div class="col-sm-2 border bg-transparent">@context.Id</div>
                            <div class="col-sm-10 border bg-transparent">@context.Name</div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <input type="number" class="col-sm-2" @bind="actAppServerType.Id" />
                    <input type="text" class="col-sm-8" @bind="actAppServerType.Name" />
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="AddAppServerType" @onclick:preventDefault>@(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))</button>
                </div>
            </div>
        </div>
        <div class="form-group row mt-4" data-toggle="tooltip" title="@(userConfig.PureLine("H9055"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("import_app_server"):</label>
            <div class="row col-sm-6">
                <FileUpload SupportedFileFormats=".csv" AuthorizedRoles="@Roles.Admin" OnImportSuccess="OnAppServerImportSuccess" OnAddAppServerError="OnAddAppServerError" TImportResult="CSVFileUploadErrorModel" OnAfterImportResults="OnAfterImportResults"></FileUpload>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5620"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("common_areas"):</label>
            <div class="col-sm-6">
                <EditList ElementType="CommonArea" Elements="commonAreas.ToArray()" ElementsToDelete="AreasToDelete" StdLayout="false">
                    <Display>
                        <div class="row align-items-center">
                            <div class="col-sm-4 border bg-transparent">@((MarkupString)context.Area.Content.DisplayHtml())</div>
                            <div class="col-sm-4">
                                <div class="row align-items-center">
                                    <div class="col-form-label col-sm-8" @onclick="() => context.UseInSrc = !context.UseInSrc">@(userConfig.GetText("use_in_src")):</div>
                                    <div class="col-sm-3">
                                        <input id="cbx_use_in_src" type="checkbox" class="w-100" @bind="context.UseInSrc">
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="row align-items-center">
                                    <div class="col-form-label col-sm-8" @onclick="() => context.UseInDst = !context.UseInDst">@(userConfig.GetText("use_in_dst")):</div>
                                    <div class="col-sm-3">
                                        <input id="cbx_use_in_dst" type="checkbox" class="w-100" @bind="context.UseInDst">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="SearchArea" @onclick:preventDefault>
                        @(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))
                    </button>
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5637"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("extra_params"):</label>
            <div class="col-sm-3">
                <EditList ElementType="string" Elements="ExtraConfigs.ToArray()" ElementsToAdd="ExtraConfigsToAdd" ElementsToDelete="ExtraConfigsToDelete" StdLayout="false">
                    <Display>
                        <div class="row">
                            <div class="col-sm-12 border bg-transparent">@context</div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <input type="text" class="col-sm-10" @bind="actExtraConfig" />
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="AddExtraConfig" @onclick:preventDefault>@(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))</button>
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row">
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5606"))">
                <label for="cbx_network_area_required" class="col-form-label col-sm-8">@(userConfig.GetText("networkAreaRequired")):</label>
                <div class="col-sm-2">
                    <input id="cbx_network_area_required" type="checkbox" @bind="namingConvention.NetworkAreaRequired">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5609"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("networkAreaPattern"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.NetworkAreaPattern" />
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5610"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("appRolePattern"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.AppRolePattern" />
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5607"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("fixedPartLength"):</label>
                <input type="number" min="0" class="col-sm-4" @bind="namingConvention.FixedPartLength" />
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5619"))">
                <label for="cbx_use_app_part" class="col-form-label col-sm-8">@(userConfig.GetText("useAppPart")):</label>
                <div class="col-sm-2">
                    <input id="cbx_use_app_part" type="checkbox" @bind="namingConvention.UseAppPart">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5608"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("freePartLength"):</label>
                <input type="number" min="0" class="col-sm-4" @bind="namingConvention.FreePartLength" />
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5636"))">
                <label for="cbx_create_app_zones" class="col-form-label col-sm-8">@(userConfig.GetText("app_zone_creation")):</label>
                <div class="col-sm-2">
                    <input id="cbx_create_app_zones" type="checkbox" @bind="configData!.CreateAppZones">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5635"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("app_zone_pattern"):</label>
                <input disabled="@(!configData.CreateAppZones)" type="text" class="col-sm-4" @bind="namingConvention.AppZone" />               
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5633"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("appServerPrefix"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.AppServerPrefix" />
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5645"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("networkPrefix"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.NetworkPrefix" />
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5646"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("ipRangePrefix"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.IpRangePrefix" />
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5643"))">
                <label for="cbx_dns_lookup" class="col-form-label col-sm-8">@(userConfig.GetText("dns_lookup")):</label>
                <div class="col-sm-2">
                    <input id="cbx_dns_lookup" type="checkbox" @bind="configData!.DnsLookup">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5644"))">
                <label for="cbx_overwrite_names" class="col-form-label col-sm-8">@(userConfig.GetText("overwrite_exiting_names")):</label>
                <div class="col-sm-2">
                    <input id="cbx_overwrite_names" type="checkbox" @bind="configData!.OverwriteExistingNames">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5647"))">
                <label for="cbx_replace_appserver" class="col-form-label col-sm-8">@(userConfig.GetText("auto_replace_app_server")):</label>
                <div class="col-sm-2">
                    <input id="cbx_replace_appserver" type="checkbox" @bind="configData!.AutoReplaceAppServer">
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5611"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("importAppDataPath"):</label>
            <div class="col-sm-6">
                <EditList ElementType="string" Elements="appDataPaths.ToArray()" ElementsToAdd="PathsToAdd" ElementsToDelete="PathsToDelete" StdLayout="false">
                    <Display>
                        <div class="row">
                            <div class="col-sm-12 border bg-transparent">@context</div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <input type="text" class="col-sm-10" @bind="actPath" />
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="AddPath" @onclick:preventDefault>@(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))</button>
                </div>
            </div>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5612"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importAppDataSleepTime")):</label>
            <input type="number" min="0" class="col-sm-2" @bind="configData!.ImportAppDataSleepTime" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5613"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importAppDataStartAt")):</label>
            <input type="time" step="60" class="col-sm-2" @bind="appDataTime" />
            <input type="date" class="col-sm-2" @bind="appDataDate" />
        </div>

        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5640"))">
            <label class="col-sm-4 col-form-label col-form-label">@(userConfig.GetText("ownerGroupLdap")):</label>
            <div class="col-sm-2">
                <Dropdown ElementType="UiLdapConnection" ElementToString="@(l => l.Name)" @bind-SelectedElement="selectedLdap" Elements="connectedLdaps">
                    <ElementTemplate Context="ldap">
                        @ldap.Name
                    </ElementTemplate>
                </Dropdown>
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row align-items-center col-sm-5" data-toggle="tooltip" title="@(userConfig.PureLine("H5642"))">
                <label for="cbx_manage_owner_ldap_groups" class="col-form-label col-sm-10">@(userConfig.GetText("manageGroupsInLdap")):</label>
                <input id="cbx_manage_owner_ldap_groups" type="checkbox" class="col-sm-2" @bind="configData!.ManageOwnerLdapGroups">
            </div>
            <div class="form-group row col-sm-7" data-toggle="tooltip" title="@(userConfig.PureLine("H5641"))">
                <label class="col-form-label col-sm-6">@(userConfig.GetText("ownerGroupPattern")):</label>
                <input type="input" class="col-sm-6" @bind="configData!.OwnerLdapGroupNames" />
            </div>
        </div>

        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5614"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("importSubnetDataPath"):</label>
            <div class="col-sm-6">
                <EditList ElementType="string" Elements="SubnetDataPaths.ToArray()" ElementsToAdd="PathsToAddSubnet" ElementsToDelete="PathsToDeleteSubnet" StdLayout="false">
                    <Display>
                        <div class="row">
                            <div class="col-sm-12 border bg-transparent">@context</div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <input type="text" class="col-sm-10" @bind="SubnetActPath" />
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="AddPathSubnet" @onclick:preventDefault>@(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))</button>
                </div>
            </div>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5615"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importSubnetDataSleepTime")):</label>
            <input type="number" min="0" class="col-sm-2" @bind="configData!.ImportSubnetDataSleepTime" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5616"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importSubnetDataStartAt")):</label>
            <input type="time" step="60" class="col-sm-2" @bind="subnetDataTime" />
            <input type="date" class="col-sm-2" @bind="subnetDataDate" />
        </div>
        <hr />
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5622"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modReqInterfaceName")):</label>
            <input type="text" class="col-sm-6" @bind="configData!.ModReqInterfaceName" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5630"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modReqEmailReceiver")):</label>
            <div class="col-sm-3">
                <Dropdown @bind-SelectedElement="configData!.ModReqEmailReceiver" ElementToString="@(o => userConfig.GetText(o.ToString()))" Elements="selectableRecipientOptions">
                    <ElementTemplate Context="opt">
                        @(userConfig.GetText(opt.ToString()))
                    </ElementTemplate>
                </Dropdown>
            </div>
            <label for="cbx_email_requester_in_cc" class="col-form-label col-sm-2">@(userConfig.GetText("modReqEmailRequesterInCc")):</label>
            <div class="col-sm-1">
                <input id="cbx_email_requester_in_cc" type="checkbox" @bind="configData!.ModReqEmailRequesterInCc">
            </div>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5623"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modReqEmailSubject")):</label>
            <input type="text" class="col-sm-6" @bind="configData!.ModReqEmailSubject" />
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5624"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modReqEmailBody")):</label>
            <textarea class="col-sm-7 mt-2" rows="4" name="text" @bind="configData!.ModReqEmailBody"></textarea>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5625"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modReqTicketTitle")):</label>
            <input type="text" class="col-sm-6" @bind="configData!.ModReqTicketTitle" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5626"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modReqTaskTitle")):</label>
            <input type="text" class="col-sm-6" @bind="configData!.ModReqTaskTitle" />
        </div>
        <hr />
        <div class="form-group row mt-2">
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5634"))">
                <label for="cbx_rollout_active" class="col-form-label col-sm-8">@(userConfig.GetText("modRolloutActive")):</label>
                <div class="col-sm-2">
                    <input id="cbx_rollout_active" type="checkbox" class="w-100" @bind="configData!.ModRolloutActive">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5631"))">
                <label for="cbx_rollout_resolve_service_groups" class="col-form-label col-sm-8">@(userConfig.GetText("modRolloutResolveServiceGroups")):</label>
                <div class="col-sm-2">
                    <input id="cbx_rollout_resolve_service_groups" type="checkbox" class="w-100" @bind="configData!.ModRolloutResolveServiceGroups">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5632"))">
                <label for="cbx_rollout_bundle_tasks" class="col-form-label col-sm-8">@(userConfig.GetText("modRolloutBundleTasks")):</label>
                <div class="col-sm-2">
                    <input id="cbx_rollout_bundle_tasks" type="checkbox" class="w-100" @bind="configData!.ModRolloutBundleTasks">
                </div>
            </div>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5639"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("modRolloutErrorText")):</label>
            <input type="text" class="col-sm-6" @bind="configData!.ModRolloutErrorText" />
        </div>
        <hr />
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5648"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("modelledMarker"):</label>
                <input type="text" class="col-sm-4" @bind="configData!.ModModelledMarker" />
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5649"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("modelledMarkerLocation"):</label>
                <input type="text" class="col-sm-4" @bind="configData!.ModModelledMarkerLocation" />
            </div>
            <div class="row col-sm-3" data-toggle="tooltip" title="@(userConfig.PureLine("H5650"))">
                 <button type="button" class="col-sm-6 btn btn-sm btn-primary" @onclick="VarianceOptions" 
                    @onclick:preventDefault>@(userConfig.GetText("rule_recognition_options"))</button>
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5651"))">
                <label for="cbx_var_ana_sync" class="col-form-label col-sm-8">@(userConfig.GetText("varianceAnalysisSync")):</label>
                <div class="col-sm-2">
                    <input id="cbx_var_ana_sync" type="checkbox" class="w-100" @bind="configData!.VarianceAnalysisSync">
                </div>
            </div>
            <div class="row col-sm-4 align-items-center" data-toggle="tooltip" title="@(userConfig.PureLine("H5654"))">
                <label for="cbx_var_ana_refresh" class="col-form-label col-sm-8">@(userConfig.GetText("varianceAnalysisRefresh")):</label>
                <div class="col-sm-2">
                    <input id="cbx_var_ana_refresh" type="checkbox" class="w-100" @bind="configData!.VarianceAnalysisRefresh">
                </div>
            </div>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5652"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("varianceAnalysisSleepTime")):</label>
            <input type="number" min="0" class="col-sm-2" @bind="configData!.VarianceAnalysisSleepTime" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5653"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("varianceAnalysisStartAt")):</label>
            <input type="time" step="60" class="col-sm-2" @bind="varAnalysisTime" />
            <input type="date" class="col-sm-2" @bind="varAnalysisDate" />
        </div>
        <hr />
    </form>
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized>
    </AuthorizeView>
    <br>
    <br>
    <p>@(userConfig.GetText("U5303"))</p>

    <VarianceOptionsSelection @bind-Display="varOptMode" @bind-ConfigValue="ruleRecognitionOption"/>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
    </div>
}
<PredefServices @bind-Display="predefServices" />
<SearchNwObject @bind-Display="searchArea" ObjectList="pureAreaList" Add="AddArea" CommonAreaMode="true" />
<PopUp Title="@(userConfig.GetText("appserver_import"))" Show="@ShowCSVImportPopUp" Size=PopupSize.Large OnClose="() => ShowCSVImportPopUp = false">
    <Body>
        @if(CSVImportSuccess is not null && CSVImportSuccess.Count > 0)
        {
            <div class="mt-3">
                <Collapse StartToggled="true" Style="success" Title="@(userConfig.GetText("success"))">
                    <Table PageSize="0" TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="string" Items="CSVImportSuccess">
                        <Column TableItem="string" Title="@(userConfig.GetText("entrydata"))" Type="typeof(string)" Field="@(_ => new string(_))" Sortable="true" Filterable="true" />
                    </Table>
                </Collapse>
            </div>
        }
        @if(CSVImportErrors is not null && CSVImportErrors.Count > 0)
        {
            <div class="mt-1">
                <Collapse StartToggled="false" Style="danger" Title="@(userConfig.GetText("errors"))">
                    <Table PageSize="0" TableClass="table table-bordered table-sm th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="CSVFileUploadErrorModel" Items="CSVImportErrors">
                        <Column TableItem="CSVFileUploadErrorModel" Title="@(userConfig.GetText("entrydata"))" Field="@(_ => _.EntryData)" Sortable="true" Filterable="true" />
                        <Column TableItem="CSVFileUploadErrorModel" Title="@(userConfig.GetText("error_message"))" Field="@(_ => _.Message)" Sortable="true" Filterable="true" />
                        <Column TableItem="CSVFileUploadErrorModel" Title="@(userConfig.GetText("type"))" Field="@(_ => _.MessageType)" Sortable="true" />
                    </Table>
                </Collapse>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button type="button" class="btn btn-sm btn-primary" @onclick="() => ShowCSVImportPopUp = false">@(userConfig.GetText("ok"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private List<string> appDataPaths = [];
    private List<string> SubnetDataPaths = [];
    private List<string> PathsToAdd = [];
    private List<string> PathsToDelete = [];
    private List<string> PathsToAddSubnet = [];
    private List<string> PathsToDeleteSubnet = [];
    private string actPath = "";
    private string SubnetActPath = "";

    private List<AppServerType> appServerTypes = [];
    private List<AppServerType> appServerTypesToAdd = [];
    private List<AppServerType> appServerTypesToDelete = [];
    private AppServerType actAppServerType = new();
    private string appServerDefaultTypeName = "";

    private List<string> ExtraConfigs = [];
    private List<string> ExtraConfigsToAdd = [];
    private List<string> ExtraConfigsToDelete = [];
    private string actExtraConfig = "";

    private List<ModellingNwGroup> allAreas = [];
    private List<ModellingNwGroupWrapper> pureAreaList = [];
    private List<CommonAreaConfig> commAreaConfigItems = [];
    private List<CommonArea> commonAreas = [];
    private List<CommonArea> AreasToDelete = [];
    private bool predefServices = false;
    private bool searchArea = false;
    private ModellingNamingConvention namingConvention = new();
    private DateTime appDataDate = DateTime.Today;
    private DateTime appDataTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);
    private DateTime subnetDataDate = DateTime.Today;
    private DateTime subnetDataTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);
    private DateTime varAnalysisDate = DateTime.Today;
    private DateTime varAnalysisTime = DateTime.Now.AddSeconds(-DateTime.Now.Second);
    private List<EmailRecipientOption> selectableRecipientOptions = [ EmailRecipientOption.OwnerGroupOnly,
        EmailRecipientOption.AllOwnerResponsibles, EmailRecipientOption.OwnerMainResponsible, EmailRecipientOption.FallbackToMainResponsibleIfOwnerGroupEmpty ];

    private List<UiLdapConnection> connectedLdaps = [];
    private UiLdapConnection selectedLdap = new();
    private RuleRecognitionOption ruleRecognitionOption = new();

    private bool initComplete = false;
    private bool varOptMode = false;
    private bool ShowCSVImportPopUp { get; set; }
    private List<CSVFileUploadErrorModel>? CSVImportErrors;
    private List<string>? CSVImportSuccess;

    private void OnAddAppServerError((Exception Exception, string Message) error)
    {
        DisplayMessageInUi(error.Exception, userConfig.GetText("add_app_server"), error.Message, false);
    }

    private void OnAfterImportResults((List<string>? Success, List<CSVFileUploadErrorModel>? Errors) importResult)
    {
        CSVImportSuccess = importResult.Success;
        CSVImportErrors = importResult.Errors;

        ShowCSVImportPopUp = true;
    }
    private void OnAppServerImportSuccess()
    {
        DisplayMessageInUi(null, userConfig.GetText("import_app_server"), userConfig.GetText("importAppServerDataSuccess"), false);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            appDataPaths = JsonSerializer.Deserialize<List<string>>(configData.ImportAppDataPath) ?? new();
            SubnetDataPaths = JsonSerializer.Deserialize<List<string>>(configData.ImportSubnetDataPath) ?? new();
            ExtraConfigs = JsonSerializer.Deserialize<List<string>>(configData.ModExtraConfigs) ?? new();
            namingConvention = JsonSerializer.Deserialize<ModellingNamingConvention>(configData.ModNamingConvention) ?? new();
            if (configData.ModAppServerTypes != "")
            {
                appServerTypes = JsonSerializer.Deserialize<List<AppServerType>>(configData.ModAppServerTypes) ?? new();
                if (appServerTypes.Count > 0)
                {
                    appServerDefaultTypeName = appServerTypes.FirstOrDefault(x => x.Id == 0)?.Name ?? "";
                }
            }
            allAreas = await apiConnection.SendQueryAsync<List<ModellingNwGroup>>(ModellingQueries.getNwGroupObjects,
                new { grpType = (int)ModellingTypes.ModObjectType.NetworkArea });
            RefreshAreas();
            appDataDate = appDataTime = configData.ImportAppDataStartAt;
            subnetDataDate = subnetDataTime = configData.ImportSubnetDataStartAt;
            varAnalysisDate = varAnalysisTime = configData.VarianceAnalysisStartAt;

            // get all ldap connections for dropdown
            connectedLdaps = await apiConnection.SendQueryAsync<List<UiLdapConnection>>(AuthQueries.getAllLdapConnections);

            // get config value of selected ldap connection for owner data (both groups and main responsible user), default value = 1 = internal ldap
            selectedLdap = connectedLdaps.FirstOrDefault(x => x.Id == configData.OwnerLdapId) ?? new();

            ruleRecognitionOption = string.IsNullOrEmpty(configData.RuleRecognitionOption) ? new() : JsonSerializer.Deserialize<RuleRecognitionOption>(configData.RuleRecognitionOption) ?? new();
            initComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private void RefreshAreas()
    {
        if (configData != null && configData.ModCommonAreas != "")
        {
            commAreaConfigItems = JsonSerializer.Deserialize<List<CommonAreaConfig>>(configData.ModCommonAreas) ?? new();
        }
        commonAreas = new();
        foreach (var areaInfo in commAreaConfigItems)
        {
            ModellingNwGroup? area = allAreas.FirstOrDefault(a => a.Id == areaInfo.AreaId);
            if (area != null)
            {
                commonAreas.Add(new() { Area = new() { Content = area }, UseInSrc = areaInfo.UseInSrc, UseInDst = areaInfo.UseInDst });
            }
        }
        pureAreaList = commonAreas.ConvertAll(x => x.Area);
    }

    public bool AddArea(ModellingNwGroup area)
    {
        commonAreas.Add(new() { Area = new() { Content = area } });
        return true;
    }

    private void AddExtraConfig()
    {
        if (actExtraConfig != "")
        {
            ExtraConfigsToAdd.Add(actExtraConfig);
            actExtraConfig = "";
        }
    }

    private void AddPath()
    {
        if (actPath != "")
        {
            PathsToAdd.Add(actPath);
            actPath = "";
        }
    }

    private void AddPathSubnet()
    {
        if (!string.IsNullOrWhiteSpace(SubnetActPath))
        {
            PathsToAddSubnet.Add(SubnetActPath);
            SubnetActPath = "";
        }
    }

    private void AddAppServerType()
    {
        if (actAppServerType.Id > 0 && actAppServerType.Name != ""
            && ( appServerTypesToAdd.FirstOrDefault(a => a.Id == actAppServerType.Id) == null )
            && ( appServerTypes.FirstOrDefault(a => a.Id == actAppServerType.Id) == null ))
        {
            appServerTypesToAdd.Add(actAppServerType);
            actAppServerType = new();
        }
    }

    private void PredefServices()
    {
        predefServices = true;
    }

    private void SearchArea()
    {
        searchArea = true;
    }

    private void VarianceOptions()
    {
        varOptMode = true;
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                PrepareConfigData();
                await globalConfig.WriteToDatabase(configData, apiConnection);

                PathsToDelete = [];
                PathsToAdd = [];
                PathsToDeleteSubnet = [];
                PathsToAddSubnet = [];
                AreasToDelete = [];
                appServerTypesToAdd = [];
                appServerTypesToDelete = [];
                ExtraConfigsToAdd = [];
                ExtraConfigsToDelete = [];
                RefreshAreas();
                DisplayMessageInUi(null, userConfig.GetText("modelling_settings"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("modelling_settings"), "", true);
        }
    }

    private void PrepareConfigData()
    {
        PrepareAppDataPaths();
        PrepareSubnetDataPaths();
        PrepareExtraConfigs();
        configData!.ModNamingConvention = JsonSerializer.Serialize(namingConvention);
        PrepareAppServerTypes();
        PrepareCommonAreas();
        configData!.ImportAppDataStartAt = appDataDate.Date.Add(appDataTime.TimeOfDay);
        configData!.ImportSubnetDataStartAt = subnetDataDate.Date.Add(subnetDataTime.TimeOfDay);
        configData!.VarianceAnalysisStartAt = varAnalysisDate.Date.Add(varAnalysisTime.TimeOfDay);
        configData!.OwnerLdapId = selectedLdap.Id;
        configData!.RuleRecognitionOption = JsonSerializer.Serialize(ruleRecognitionOption);
    }

    private void PrepareAppDataPaths()
    {
        foreach (var path in PathsToDelete)
        {
            appDataPaths.Remove(path);
        }
        foreach (var path in PathsToAdd)
        {
            appDataPaths.Add(path);
        }
        configData!.ImportAppDataPath = JsonSerializer.Serialize(appDataPaths);
    }

    private void PrepareSubnetDataPaths()
    {
        foreach (string path in PathsToDeleteSubnet)
        {
            SubnetDataPaths.Remove(path);
        }
        foreach (string path in PathsToAddSubnet)
        {
            SubnetDataPaths.Add(path);
        }
        configData!.ImportSubnetDataPath = JsonSerializer.Serialize(SubnetDataPaths);
    }

    private void PrepareCommonAreas()
    {
        commAreaConfigItems = commonAreas.ConvertAll(x => x.ToConfigItem());
        foreach (var area in AreasToDelete)
        {
            CommonAreaConfig? existingItem = commAreaConfigItems.FirstOrDefault(x => x.AreaId == area.Area.Content.Id);
            if (existingItem != null)
            {
                commAreaConfigItems.Remove(existingItem);
            }
        }
        configData!.ModCommonAreas = JsonSerializer.Serialize(commAreaConfigItems);
    }

    private void PrepareAppServerTypes()
    {
        AppServerType? defaultType = appServerTypes.FirstOrDefault(x => x.Id == 0);
        if (defaultType != null)
        {
            defaultType.Name = appServerDefaultTypeName;
        }
        else
        {
            appServerTypes.Add(new() { Id = 0, Name = appServerDefaultTypeName });
        }
        foreach (var appServerType in appServerTypesToDelete)
        {
            appServerTypes.Remove(appServerType);
        }
        foreach (var appServerType in appServerTypesToAdd)
        {
            appServerTypes.Add(appServerType);
        }
        configData!.ModAppServerTypes = JsonSerializer.Serialize(appServerTypes);
    }

    private void PrepareExtraConfigs()
    {
        foreach (var config in ExtraConfigsToDelete)
        {
            ExtraConfigs.Remove(config);
        }
        foreach (var config in ExtraConfigsToAdd)
        {
            ExtraConfigs.Add(config);
        }
        configData!.ModExtraConfigs = JsonSerializer.Serialize(ExtraConfigs);
    }
}
