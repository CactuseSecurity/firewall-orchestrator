@using FWO.Data.Middleware
@using FWO.Logging
@using FWO.Middleware.Client
@using FWO.Recert
@using RestSharp
@using System.Net

@page "/settings/owners"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig
@inject MiddlewareClient middlewareClient

@if(InitComplete)
{
    <div class="input-group">
        <h3>@(userConfig.GetText("owners"))</h3>
        <HelpLink Page="settings/owners"/>
    </div>
    @(userConfig.GetText("U5216"))
    <hr />
    <div class="btn-group m-1">
        @if(userConfig.AllowManualOwnerAdmin)
        {
            <button type="button" class="btn btn-sm btn-success" @onclick="AddOwner">@(userConfig.GetText("add_owner"))</button>
        }
        <AuthorizeView Roles="@Roles.Admin" Context="ctx">
            <Authorized>
                @if (!recertCalcInProgress)
                {
                    <button type="button" class="btn btn-sm btn-info" @onclick:preventDefault="true" @onclick="@(RecalcRecerts)">@(userConfig.GetText("recalc_recerts"))</button>
                }
                else
                {
                    <Loading/>
                }
            </Authorized>
            <NotAuthorized>
                <button type="button" disabled class="btn btn-sm btn-info">@(userConfig.GetText("recalc_recerts"))</button>
            </NotAuthorized>
        </AuthorizeView>

        @if (showCleanupButton)
        {
            <button type="button" class="btn btn-sm btn-danger" @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
        }
        @if (userConfig.AllowManualOwnerAdmin)
        {
            <button type="button" class="btn btn-sm btn-success" @onclick="ManageLifeCycles">@(userConfig.GetText("manage_lifecycles"))</button>
        }
        <br><br>
    </div>

    <div class="m-2 vheight75">
        <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="FwoOwner" Items="owners" PageSize="0" ColumnReorder="true">
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("owners"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                <Template>
                    <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-primary" @onclick="async () => await DisplayOwner(context)">@(userConfig.GetText("details"))</button>
                    @if(userConfig.AllowManualOwnerAdmin)
                    {
                        <button type="button" class="btn btn-sm btn-warning" @onclick="async () => await EditOwner(context)">@(userConfig.GetText("edit"))</button>
                        @if(!context.IsDefault)
                        {
                            <AuthorizeView Roles="@Roles.Admin" Context="ctx">
                                <Authorized>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteOwner(context)">@(userConfig.GetText("delete"))</button>
                                </Authorized>
                                <NotAuthorized>
                                    <button type="button" disabled class="btn btn-sm btn-danger">@(userConfig.GetText("delete"))</button>
                                </NotAuthorized>
                            </AuthorizeView>
                        }
                    }
                    </div>
                </Template>
            </Column>
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("main_responsible"))" Field="@(x => x.Dn)" Sortable="true" Filterable="true" >
                <Template>
                    @(new DistName(context.Dn).UserName)
                </Template>
            </Column>
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("group"))" Field="@(x => x.GroupDn)" Sortable="true" Filterable="true" >
                <Template>
                    @(new DistName(context.GroupDn).Group)
                </Template>
            </Column>
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("tenant"))" Field="@(x => x.TenantId)" Sortable="true">
                <Template>
                    @(context.TenantId != null ? tenants.FirstOrDefault(x => x.Id == context.TenantId)?.Name ?? "" : "" )
                </Template>
            </Column>
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("recert_interval"))" Field="@(x => x.RecertInterval)" Sortable="true" Filterable="true" />
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("ext_app_id"))" Field="@(x => x.ExtAppId)" Sortable="true" Filterable="true" />
            <Column TableItem="FwoOwner" Title="@(userConfig.GetText("import_source"))" Field="@(x => x.ImportSource)" Sortable="true" Filterable="true" />
        </Table>
    </div>

    <PopUp Title="@(userConfig.GetText(Readonly ? "owner" : "edit_owner"))" Show="@EditOwnerMode" Size=PopupSize.XLarge OnClose="() => EditOwnerMode = false">
        <Body>
            @if (EditOwnerMode)
            {
                <div class="col-sm-12">
                    <div class="form-group row me-2">
                        <div class="col-sm-1">
                            <div class="form-group row">
                                <label class="col-sm-6 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                                <label class="col-sm-6 col-form-label col-form-label-sm">@(actOwner.Id)</label>
                            </div>
                        </div>
                        <div class="col-sm-11 me-auto">
                            <div class="form-group row me-auto" data-toggle="tooltip" title="@(userConfig.PureLine("H5582"))">
                                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                                @if(Readonly)
                                {
                                    <label class="col-sm-10 me-auto">@actOwner.Name</label>
                                }
                                else
                                {
                                    <input type="text" class="col-sm-10 me-auto" @bind="actOwner.Name" />
                                }
                            </div>
                        </div>
                    </div>
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5583"))">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("main_responsible"))*:</label>
                        @if(Readonly)
                        {
                            <label class="col-sm-9 me-auto">@actOwner.Dn</label>
                        }
                        else
                        {
                            <div class="col-sm-7">
                                <input type="text" class="form-control form-control-sm" @bind="actOwner.Dn" />
                            </div>
                            <div class="col-sm-2">
                                <button type="button" class="btn btn-sm btn-success form-control form-control-sm" @onclick="() => SearchUser()">@(userConfig.GetText("search"))</button>
                            </div>
                        }
                    </div>
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5584"))">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("group"))*:</label>
                        @if(Readonly)
                        {
                            <label class="col-sm-9 me-auto">@actOwner.GroupDn</label>
                        }
                        else
                        {
                            <div class="col-sm-7">
                                <input type="text" class="form-control form-control-sm" @bind="actOwner.GroupDn" />
                            </div>
                            <div class="col-sm-2">
                                <button type="button" class="btn btn-sm btn-success form-control form-control-sm" @onclick="() => SearchGroup()">@(userConfig.GetText("search"))</button>
                            </div>
                        }
                    </div>
                    <div class="form-group row mt-2">
                        <label class="col-sm-3 col-form-label col-form-label-sm" data-toggle="tooltip" title="@(userConfig.PureLine("H5585"))">@(userConfig.GetText("tenant")):</label>
                        @if(Readonly)
                        {
                            <label class="col-sm-5">@(actOwner.TenantId != null ? tenants.FirstOrDefault(x => x.Id == actOwner.TenantId)?.Name ?? "" : "" )</label>
                        }
                        else
                        {
                            <div class="col-sm-5">
                                <Dropdown ElementType="Tenant" ElementToString="@(t => t.Name)" @bind-SelectedElement="selectedTenant" Elements="tenants" Nullable="true">
                                    <ElementTemplate Context="tenant">
                                        @tenant.Name
                                    </ElementTemplate>
                                </Dropdown>
                            </div>
                        }
                        <div class="form-check form-check-inline col-sm-3" data-toggle="tooltip" title="@(userConfig.PureLine("H5591"))">
                            @if(Readonly && userConfig.AllowManualOwnerAdmin)
                            {
                                <input id="cbx_comm_svc_possible" disabled class="form-check-input" type="checkbox" @bind="actOwner.CommSvcPossible">
                            }
                            else
                            {
                                <input id="cbx_comm_svc_possible" class="form-check-input" type="checkbox" @bind="actOwner.CommSvcPossible">
                            }
                            <label for="cbx_comm_svc_possible" class="form-check-label"><small>@(userConfig.GetText("comm_svc_possible"))</small></label>
                        </div>
                    </div>
                    <div class="form-group row mt-2">
                        <label class="col-sm-3 col-form-label col-form-label-sm" data-toggle="tooltip" title="@(userConfig.PureLine("H5586"))">@(userConfig.GetText("ext_app_id")):</label>
                        <div class="col-sm-5">
                            @if(Readonly)
                            {
                                <label>@actOwner.ExtAppId</label>
                            }
                            else
                            {
                                <input type="text" class="form-control form-control-sm" @bind="actOwner.ExtAppId" />
                            }
                        </div>
                        <label class="col-sm-2 col-form-label col-form-label-sm" data-toggle="tooltip" title="@(userConfig.PureLine("H5592"))">@(userConfig.GetText("import_source")):</label>
                        <label class="col-sm-2 col-form-label col-form-label-sm">@(actOwner.ImportSource)</label>
                    </div>
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5587"))">
                        <div class="col-sm-6">
                            <div class="form-group row">
                                <label class="col-sm-6 col-form-label col-form-label-sm">@(userConfig.GetText("recert_interval")):</label>
                                <div class="col-sm-6">
                                    @if(Readonly)
                                    {
                                        <label>@actOwner.RecertInterval</label>
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control form-control-sm" @bind="actOwner.RecertInterval" />
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="form-check form-check-inline col-sm-3" data-toggle="tooltip" title="@(userConfig.PureLine("H5591a"))">
                            @if(Readonly)
                            {
                                <input id="cbx_recert_activated" disabled class="form-check-input" type="checkbox" @bind="actOwner.RecertActive">
                            }
                            else
                            {
                                <input id="cbx_recert_activated" class="form-check-input" type="checkbox" @bind="actOwner.RecertActive">
                            }
                            <label for="cbx_recert_activated" class="form-check-label"><small>@(userConfig.GetText("recert_activated"))</small></label>
                        </div>
                    </div>
                    <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5588"))">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("recert_check_every")):</label>
                        <div class="form-group row col-sm-9">
                            <div class="col-sm-2">
                                @if(Readonly)
                                {
                                    <label>@actRecCheckParams.RecertCheckOffset</label>
                                }
                                else
                                {
                                    <input type="number" min="1" class="form-control form-control-sm" @bind="actRecCheckParams.RecertCheckOffset" />
                                }
                            </div>
                            <div class="col-sm-4">
                                @if(Readonly)
                                {
                                    <label>@userConfig.GetText(actRecCheckParams.RecertCheckInterval.ToString())</label>
                                }
                                else
                                {
                                    <Dropdown ElementType="SchedulerInterval" @bind-SelectedElement="actRecCheckParams.RecertCheckInterval" ElementToString="@(i => userConfig.GetText(i.ToString()))"
                                            Elements="Enum.GetValues(typeof(SchedulerInterval)).Cast<SchedulerInterval>().Where(x => x.OfferedForRecert())" >
                                        <ElementTemplate Context="interval">
                                            @(userConfig.GetText(interval.ToString()))
                                        </ElementTemplate>
                                    </Dropdown>
                                }
                            </div>
                            @if(actRecCheckParams.RecertCheckInterval == SchedulerInterval.Weeks)
                            {
                                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("each_on")):</label>
                                <div class="col-sm-4">
                                    @if(Readonly)
                                    {
                                        <label>@userConfig.GetText(((DayOfWeek?)actRecCheckParams?.RecertCheckWeekday)?.ToString() ?? "undefined")</label>
                                    }
                                    else
                                    {
                                        <Dropdown ElementType="DayOfWeek?" ElementToString="@(d => userConfig.GetText(d?.ToString() ?? "undefined"))" @bind-SelectedElement="selectedDayOfWeek" Elements="Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek?>()" Nullable="true">
                                            <ElementTemplate Context="weekday">
                                                @(weekday != null ? userConfig.GetText(weekday.ToString() ?? "undefined") : "-")
                                            </ElementTemplate>
                                        </Dropdown>
                                    }
                                </div>
                            }
                            else if(actRecCheckParams.RecertCheckInterval == SchedulerInterval.Months)
                            {
                                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("each_on")):</label>
                                <div class="col-sm-4">
                                    @if(Readonly)
                                    {
                                        <label>@actRecCheckParams.RecertCheckDayOfMonth</label>
                                    }
                                    else
                                    {
                                        <input type="number" min="0" max ="31" class="form-control form-control-sm" @bind="actRecCheckParams.RecertCheckDayOfMonth" />
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    @if (!actOwner.IsDefault)
                    {
                        <div class="col-sm-12 mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5589"))">
                            <RuleSelector SelectedRules="actRules" @bind-RulesToAdd="rulesToAdd" @bind-RulesToDelete="rulesToDelete" Readonly="Readonly"/>
                        </div>
                        <div class="col-sm-12 mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5590"))">
                            <IpSelector IpAddresses="actIpAddresses" @bind-IpsToAdd="ipsToAdd" @bind-IpsToDelete="ipsToDelete" Readonly="Readonly"/>
                        </div>
                    }
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm" data-toggle="tooltip" title="@(userConfig.PureLine("H5664"))">@(userConfig.GetText("lifecyclestate")):</label>
                    @if (Readonly)
                    {
                        <label class="col-sm-5">@(ownerLifeCycleStates.FirstOrDefault(x => x.Id == actOwner.OwnerLifeCycleStateId)?.Name ?? "")</label>
                                }
                    else
                    {
                        <div class="col-sm-5">                                             
                            <Dropdown ElementType="OwnerLifeCycleState" ElementToString="@(t => t.Name)" @bind-SelectedElement="selectedOwnerLifeCycleState" Elements="ownerLifeCycleStates" Nullable="true">
                                <ElementTemplate Context="lifecycleState">
                                    @lifecycleState.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    }                    
                </div>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                @if(!Readonly || !userConfig.AllowManualOwnerAdmin)
                {
                    <AuthorizeView Roles="@Roles.Admin">
                        <Authorized>
                            <button type="button" class="btn btn-sm btn-primary" @onclick="SaveOwner">@(userConfig.GetText("save"))</button>
                        </Authorized>
                        <NotAuthorized>
                            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                        </NotAuthorized>
                    </AuthorizeView>
                }
                <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>

    <PopUp Title="@(userConfig.GetText("manage_lifecycles"))" Show="@ManageLifeCyclesMode" Size=PopupSize.XLarge OnClose="() => ManageLifeCyclesMode = false">
        <Body>
            @if (ManageLifeCyclesMode)
            {
                <div class="col-sm-12">
                    <div class="btn-group m-1">
                    @if (userConfig.AllowManualOwnerAdmin)
                    {
                            <button type="button" class="btn btn-sm btn-success" @onclick="AddLifeCycle">@(userConfig.GetText("add_lifecycle"))</button>
                    }
                    </div>
                    <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="OwnerLifeCycleState" Items="ownerLifeCycleStates" PageSize="0" ColumnReorder="true">
                        <Column TableItem="OwnerLifeCycleState" Title="@(userConfig.GetText("lifecycles"))" Field="(x => x.Id)" Sortable="false" Filterable="false">                            
                            <Template Context="item">
                                <div class="btn-group">                                    
                                    @if (userConfig.AllowManualOwnerAdmin)
                                    {
                                        <button type="button" class="btn btn-sm btn-warning" @onclick="() =>  EditLifeCyle(item)">@(userConfig.GetText("edit"))</button>
                                            <AuthorizeView Roles="@Roles.Admin" Context="ctx">
                                                <Authorized>
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteLifeCycle(item)">@(userConfig.GetText("delete"))</button>
                                                </Authorized>
                                                <NotAuthorized>
                                                    <button type="button" disabled class="btn btn-sm btn-danger">@(userConfig.GetText("delete"))</button>
                                                </NotAuthorized>
                                            </AuthorizeView>
                                    }
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="OwnerLifeCycleState" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                        <Column TableItem="OwnerLifeCycleState" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                    </Table>
                </div>
            }
        </Body>
    </PopUp>

    <PopUp Title="@(userConfig.GetText("edit_lifecycle"))" Show="@EditLifeCycleMode" Size=PopupSize.XLarge OnClose="() => EditLifeCycleMode = false">
        <Body>
            @if (EditLifeCycleMode)
            {
                <div class="col-sm-12">
                    <div class="form-group row me-2">
                        <div class="col-sm-1">
                            <div class="form-group row">
                                <label class="col-sm-6 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                                <label class="col-sm-6 col-form-label col-form-label-sm">@(actLifeCycleState.Id)</label>
                            </div>
                        </div>
                        <div class="col-sm-11 me-auto">
                            <div class="form-group row me-auto" data-toggle="tooltip" title="@(userConfig.PureLine("H5665"))">
                                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                                @if (Readonly)
                                {
                                    <label class="col-sm-10 me-auto">@actLifeCycleState.Name</label>
                                }
                                else
                                {
                                    <input type="text" class="col-sm-10 me-auto" @bind="actLifeCycleState.Name" />
                                }
                            </div>
                        </div>
                    </div>                    
                </div>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                @if (!Readonly || !userConfig.AllowManualOwnerAdmin)
                {
                    <AuthorizeView Roles="@Roles.Admin">
                        <Authorized>
                            <button type="button" class="btn btn-sm btn-primary" @onclick="SaveLifeCycle">@(userConfig.GetText("save"))</button>
                        </Authorized>
                        <NotAuthorized>
                            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                        </NotAuthorized>
                    </AuthorizeView>
                }
                <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelLifeCycle">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>

    <SearchUser @bind-Display="SearchMode" AddUser="AddUser" AddGroup="AddGroup" UserSearchMode="UserSearchMode" GroupSearchMode="@(!UserSearchMode)" Title="@(actOwner.Name)" OwnerGroupsOnly="true"/>
    <ConfirmDelete @bind-Display="DeleteOwnerMode" PerformAction="DeleteOwner" Title="@userConfig.GetText("delete_owner")" DeleteMessage="@(userConfig.GetText("U5217") + actOwner.Name + "?")"/>
    <ConfirmDelete @bind-Display="DeleteLifeCycleMode" PerformAction="DeleteLifeCycle" Title="@userConfig.GetText("delete_lifecycle")" DeleteMessage="@(userConfig.GetText("U5219") + actLifeCycleState.Name + "?")" />
    <ConfirmDelete @bind-Display="CleanupMode" PerformAction="RemoveSampleData" Title="@userConfig.GetText("remove_sample_data")" DeleteMessage="@cleanupMessage"/>
}
else
{
    <Loading/>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<FwoOwner> owners = [];
    private List<FwoOwner> sampleOwners = [];
    private FwoOwner actOwner = new();
    private OwnerLifeCycleState actLifeCycleState = new();
    private Tenant? selectedTenant;
    private OwnerLifeCycleState? selectedOwnerLifeCycleState;
    private DayOfWeek? selectedDayOfWeek;
    private List<Tenant> tenants = [];
    private List<OwnerLifeCycleState> ownerLifeCycleStates = [];

    private bool showCleanupButton = false;
    private bool CleanupMode = false;
    private string cleanupMessage = "";
    private bool EditOwnerMode = false;
    private bool EditLifeCycleMode = false;
    private bool Readonly = false;
    private bool AddOwnerMode = false;
    private bool AddLifeCycleMode = false;
    private bool DeleteOwnerMode = false;
    private bool DeleteLifeCycleMode = false;
    private bool SearchMode = false;
    private bool UserSearchMode = false;
    private bool InitComplete = false;
    private RecertCheckParams actRecCheckParams = new();
    private bool recertCalcInProgress = false;
    private bool ManageLifeCyclesMode = false;

    private List<NwObjectElement> actIpAddresses = [];
    private List<NwObjectElement> ipsToAdd = [];
    private List<NwObjectElement> ipsToDelete = [];
    private List<Rule> actRules = [];
    private List<Rule> rulesToAdd = [];
    private List<Rule> rulesToDelete = [];


    protected override async Task OnInitializedAsync()
    {
        try
        {
            owners = await apiConnection.SendQueryAsync<List<FwoOwner>>(OwnerQueries.getOwners);
            ownerLifeCycleStates = await apiConnection.SendQueryAsync<List<OwnerLifeCycleState>>(OwnerQueries.getOwnerLifeCycleStates);
            AnalyseSampleOwners();

            RestResponse<List<TenantGetReturnParameters>> middlewareServerResponse = await middlewareClient.GetTenants();
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == null)
            {
                DisplayMessageInUi(null, userConfig.GetText("get_tenant_data"), userConfig.GetText("E5284"), true);
            }
            else
            {
                tenants = [];
                foreach (TenantGetReturnParameters apiTenant in middlewareServerResponse.Data)
                {
                    tenants.Add(new Tenant(apiTenant));
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
        InitComplete = true;
    }

    private async Task RecalcRecerts()
    {
        recertCalcInProgress = true;
        if (await RecertRefresh.RecalcRecerts(apiConnection))
        {
            DisplayMessageInUi(null, userConfig.GetText("fetch_data"), "Error during recertification refresh", true);
        }
        recertCalcInProgress = false;

        Log.WriteAudit(
            Title: $"Owners Settings",
            Text: $"Recertification recalculated",
            UserName: userConfig.User.Name,
            UserDN: userConfig.User.Dn);
    }

    private void AnalyseSampleOwners()
    {
        sampleOwners = [.. owners.Where(o => o.Name.EndsWith(GlobalConst.k_demo))];
        showCleanupButton = (sampleOwners.Count > 0);
    }

    private async Task AddOwner()
    {
        AddOwnerMode = true;
        await EditOwner(new FwoOwner());
    }

    private void ManageLifeCycles()
    {
        ManageLifeCyclesMode = true;
    }

    private void EditLifeCyle(OwnerLifeCycleState ownerLifeCycleState)
    {
        try
        {
            actLifeCycleState = ownerLifeCycleState;
            EditLifeCycleMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }


    private void AddLifeCycle()
    {
        AddLifeCycleMode = true;
        EditLifeCyle(new OwnerLifeCycleState());
    }

    private async Task SaveLifeCycle()
    {
        try
        {
            if (actLifeCycleState.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("edit_lifecycle"), userConfig.GetText("U0001"), true);
            }
            if (CheckValuesLifeCycle())
            {
                if (AddLifeCycleMode)
                {
                    await AddLifeCycleInDb();//
                }
                else
                {
                    await UpdateLifeCycleInDb();
                }                
                EditLifeCycleMode = false;
                AddLifeCycleMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_lifecycle"), "", true);
        }
    }

    private async Task AddLifeCycleInDb()
    {
        // make sure we do not add multiple owners with empty string external app id
        var variables = new
        {
            name = actLifeCycleState.Name,

        };

        ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<ReturnIdWrapper>(OwnerQueries.newLifeCycle, variables)).ReturnIds;  //Next
        if (returnIds == null)
        {
            DisplayMessageInUi(null, userConfig.GetText("add_lifecycle"), userConfig.GetText("E5293"), true);
        }
        else
        {
            actLifeCycleState.Id = returnIds[0].NewId;
            ownerLifeCycleStates.Add(actLifeCycleState);

            Log.WriteAudit(
                Title: $"LifeCycle Settings",
                Text: $"Added LifeCycle: {actLifeCycleState.Name}");

        }
    }

    private async Task UpdateLifeCycleInDb()
    {
        // make sure we do not add multiple owners with empty string external app id
        var Variables = new
        {
            id = actLifeCycleState.Id,
            name = actLifeCycleState.Name,

        };
        int udId = (await apiConnection.SendQueryAsync<ReturnId>(OwnerQueries.updateLifeCycle, Variables)).UpdatedId;   //next
        if (udId != actLifeCycleState.Id)
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_lifecycle"), userConfig.GetText("E5293"), true);
        }
        else
        {
            ownerLifeCycleStates[ownerLifeCycleStates.FindIndex(x => x.Id == actLifeCycleState.Id)] = actLifeCycleState;
            Log.WriteAudit(
                Title: $"LifeCycle Settings",
                Text: $"Edited LifeCycle: {actLifeCycleState.Name}");
        }
    }

    private async Task DisplayOwner(FwoOwner owner)
    {
        Readonly = true;
        await EditOwner(owner);
    }

    private async Task EditOwner(FwoOwner owner)
    {
        try
        {
            actOwner = owner;
            selectedTenant = tenants.FirstOrDefault(x => x.Id == actOwner.TenantId);
            selectedOwnerLifeCycleState = ownerLifeCycleStates.FirstOrDefault(x => x.Id == actOwner.OwnerLifeCycleStateId);
            actRecCheckParams = (actOwner.RecertCheckParamString != null ? System.Text.Json.JsonSerializer.Deserialize<RecertCheckParams>(actOwner.RecertCheckParamString) ?? new RecertCheckParams() : new RecertCheckParams());
            selectedDayOfWeek = (DayOfWeek?)actRecCheckParams?.RecertCheckWeekday;
            if(AddOwnerMode)
            {
                actIpAddresses.Clear();
                actRules.Clear();
            }
            else
            {
                actIpAddresses = await apiConnection.SendQueryAsync<List<NwObjectElement>>(OwnerQueries.getNetworkOwnerships, new { ownerId = actOwner.Id });
                actRules= await apiConnection.SendQueryAsync<List<Rule>>(OwnerQueries.getRuleOwnerships, new { ownerId = actOwner.Id });
            }
            ipsToAdd.Clear();
            ipsToDelete.Clear();
            rulesToAdd.Clear();
            rulesToDelete.Clear();
            EditOwnerMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private async Task SaveOwner()
    {
        try
        {
            actOwner.TenantId = selectedTenant?.Id;
            actOwner.OwnerLifeCycleStateId = selectedOwnerLifeCycleState?.Id;
            if(actRecCheckParams.RecertCheckDayOfMonth == 0)
            {
                actRecCheckParams.RecertCheckDayOfMonth = null;
            }
            actRecCheckParams.RecertCheckWeekday = (int?)selectedDayOfWeek;
            actOwner.RecertCheckParamString = System.Text.Json.JsonSerializer.Serialize(actRecCheckParams);
            if (actOwner.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("edit_owner"), userConfig.GetText("U0001"), true);
            }
            if (CheckValues())
            {
                if(AddOwnerMode)
                {
                    await AddOwnerInDb();
                }
                else
                {
                    await UpdateOwnerInDb();
                }
                AnalyseSampleOwners();
                EditOwnerMode = false;
                AddOwnerMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_owner"), "", true);
        }
    }

    private async Task AddOwnerInDb()
    {
        // make sure we do not add multiple owners with empty string external app id
        var variables = new
        {
            name = actOwner.Name,
            dn = actOwner.Dn,
            groupDn = actOwner.GroupDn,
            tenantId = actOwner.TenantId,
            recertInterval = actOwner.RecertInterval,
            appIdExternal = string.IsNullOrEmpty(actOwner.ExtAppId) ? null : actOwner.ExtAppId,
            recertCheckParams = actOwner.RecertCheckParamString,
            commSvcPossible = actOwner.CommSvcPossible,
            recertActive = actOwner.RecertActive,
            ownerLifeCycleStateId = actOwner.OwnerLifeCycleStateId
        };
        ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<ReturnIdWrapper>(OwnerQueries.newOwner, variables)).ReturnIds;
        if (returnIds == null)
        {
            DisplayMessageInUi(null, userConfig.GetText("add_owner"), userConfig.GetText("E5291"), true);
        }
        else
        {
            actOwner.Id = returnIds[0].NewId;
            await addRuleOwners();
            await addNetworkOwners();
            owners.Add(actOwner);

            Log.WriteAudit(
                Title: $"Owners Settings",
                Text: $"Added Owner: {actOwner.Name} (DN: {actOwner.Dn})",
                UserName: userConfig.User.Name,
                UserDN: userConfig.User.Dn);
        }
    }

    private async Task UpdateOwnerInDb()
    {
        // make sure we do not add multiple owners with empty string external app id
        var Variables = new
        {
            id = actOwner.Id,
            name = actOwner.Name,
            dn = actOwner.Dn,
            groupDn = actOwner.GroupDn,
            tenantId = actOwner.TenantId,
            recertInterval = actOwner.RecertInterval,
            appIdExternal = string.IsNullOrEmpty(actOwner.ExtAppId) ? null : actOwner.ExtAppId,
            recertCheckParams = actOwner.RecertCheckParamString,
            ownerLifeCycleStateId = actOwner.OwnerLifeCycleStateId,
            commSvcPossible = actOwner.CommSvcPossible,            
            recertActive = actOwner.RecertActive            
        };
        int udId = (await apiConnection.SendQueryAsync<ReturnId>(OwnerQueries.updateOwner, Variables)).UpdatedId;
        if(udId != actOwner.Id)
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_owner"), userConfig.GetText("E5291"), true);
        }
        else
        {
            await deleteRuleOwners();
            await addRuleOwners();
            await deleteNetworkOwners();
            await addNetworkOwners();
            owners[owners.FindIndex(x => x.Id == actOwner.Id)] = actOwner;

            Log.WriteAudit(
                Title: $"Owners Settings",
                Text: $"Edited Owner: {actOwner.Name} (DN: {actOwner.Dn})",
                UserName: userConfig.User.Name,
                UserDN: userConfig.User.Dn);
        }
    }

    private async Task addRuleOwners()
    {
        foreach(var rule in rulesToAdd)
        {
            var Variables = new
            {
                ownerId = actOwner.Id,
                ruleMetadataId = rule.Metadata.Id
            };
            await apiConnection.SendQueryAsync<ReturnIdWrapper>(OwnerQueries.newRuleOwnership, Variables);
            actRules.Add(rule);
        }
    }

    private async Task deleteRuleOwners()
    {
        foreach(var rule in rulesToDelete)
        {
            var Variables = new
            {
                ownerId = actOwner.Id,
                ruleMetadataId = rule.Metadata.Id
            };
            await apiConnection.SendQueryAsync<ReturnIdWrapper>(OwnerQueries.deleteRuleOwnership, Variables);
            actRules.Remove(rule);
        }
    }

    private async Task addNetworkOwners()
    {
        foreach(var ipAdd in ipsToAdd)
        {
            var Variables = new
            {
                ownerId = actOwner.Id,
                ip = (ipAdd.Cidr != null && ipAdd.Cidr.Valid ? ipAdd.IpString : null),
                ip_end = (ipAdd.IpEndString != null && ipAdd.Cidr != null && ipAdd.Cidr.Valid  && ipAdd.IpEndString != "" ? ipAdd.IpEndString : null)
            };
            await apiConnection.SendQueryAsync<ReturnIdWrapper>(OwnerQueries.newNetworkOwnership, Variables);
            actIpAddresses.Add(ipAdd);
        }
    }

    private async Task deleteNetworkOwners()
    {
        foreach(var ipDel in ipsToDelete)
        {
            var Variables = new
            {
                ownerId = actOwner.Id,
                id = ipDel.ElemId
            };
            await apiConnection.SendQueryAsync<ReturnId>(OwnerQueries.deleteNetworkOwnership, Variables);
            actIpAddresses.Remove(ipDel);
        }
    }

    private void Cancel()
    {
        EditOwnerMode = false;
        AddOwnerMode = false;
        DeleteOwnerMode = false;
        CleanupMode = false;
        Readonly = false;
    }

    private void CancelLifeCycle()
    {
        EditLifeCycleMode = false;
        AddLifeCycleMode = false;
        DeleteLifeCycleMode = false;
        CleanupMode = false;
        Readonly = false;
    }

    private void RequestDeleteOwner(FwoOwner owner)
    {
        actOwner = owner;
        DeleteOwnerMode = true;
    }

    private async Task DeleteOwner()
    {
        try
        {
            await apiConnection.SendQueryAsync<ReturnId>(OwnerQueries.deleteOwner, new { id = actOwner.Id });
            owners.Remove(actOwner);
            DeleteOwnerMode = false;

            Log.WriteAudit(
                Title: $"Owners Settings",
                Text: $"Deleted Owner: {actOwner.Name} (DN: {actOwner.Dn})",
                UserName: userConfig.User.Name,
                UserDN: userConfig.User.Dn);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_owner"), "", true);
        }
        StateHasChanged();
    }

    private void RequestDeleteLifeCycle(OwnerLifeCycleState ownerLifeCycleState)
    {
        actLifeCycleState = ownerLifeCycleState;
        DeleteLifeCycleMode = true;
    }

    private async Task DeleteLifeCycle()
    {
        try
        {
            await apiConnection.SendQueryAsync<ReturnId>(OwnerQueries.deleteLifeCycle, new { id = actLifeCycleState.Id });
            ownerLifeCycleStates.Remove(actLifeCycleState);
            DeleteLifeCycleMode = false;

            Log.WriteAudit(
                Title: $"LifeCycle Settings",
                Text: $"Deleted LifeCycle: {actLifeCycleState.Name}");
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_lifecycle"), "", true);
        }
        StateHasChanged();
    }

    private void RequestRemoveSampleData()
    {
        cleanupMessage = userConfig.GetText("U5218");
        CleanupMode = true;
    }

    private async Task RemoveSampleData()
    {
        foreach (var owner in sampleOwners)
        {
            actOwner = owner;
            await DeleteOwner();
        }
        CleanupMode = false;
        showCleanupButton = false;
        StateHasChanged();
    }

    private bool CheckValues()
    {
        if (actOwner.Name == null || actOwner.Name == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_owner"), userConfig.GetText("E5102"), true);
            return false;
        }
        if (AddOwnerMode && owners.Exists(x => x.Name == actOwner.Name))
        {
            DisplayMessageInUi(null, userConfig.GetText("add_owner"), userConfig.GetText("E5235"), true);
            return false;
        }
        if (actOwner.Dn == "" && actOwner.GroupDn == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_owner"), userConfig.GetText("E5292"), true);
            return false;
        }
        return true;
    }

    private bool CheckValuesLifeCycle()
    {
        if (actLifeCycleState.Name == null || actLifeCycleState.Name == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_lifecycle"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }

    private void SearchUser()
    {
        UserSearchMode = true;
        SearchMode = true;
    }

    private void SearchGroup()
    {
        UserSearchMode = false;
        SearchMode = true;
    }

    private async Task AddUser(UiUser user)
    {
        actOwner.Dn = user.Dn;
        await DefaultInit.DoNothing(); // qad avoid compiler warning
    }

    private async Task AddGroup(string groupDn)
    {
        actOwner.GroupDn = groupDn;
        await DefaultInit.DoNothing(); // qad avoid compiler warning
    }
}
