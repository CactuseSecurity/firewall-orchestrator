@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Recert

@page "/settings/recertificationgeneral"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("recert_settings"))</h3>
    <HelpLink Page="settings/recertificationgeneral"/>
</div>
@(userConfig.GetText("U5311"))
<hr />

@if (configData != null)
{
    <form onsubmit="return false">
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5417"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recertificationPeriod")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.RecertificationPeriod" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5418"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recertificationNoticePeriod")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.RecertificationNoticePeriod" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5419"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recertificationDisplayPeriod"))*:</label>
            <div class="col-sm-2">
                <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.RecertificationDisplayPeriod" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5420"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("ruleRemovalGracePeriod")):</label>
            <div class="col-sm-2">
                <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.RuleRemovalGracePeriod" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5421"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("commentRequired")):</label>
            <div class="col-sm-2">
                <input type="checkbox" class="w-100" @bind="configData!.CommentRequired" />
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5428"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckActive")):</label>
            <div class="col-sm-2">
                <input type="checkbox" class="w-100" @bind="configData!.RecCheckActive" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5429"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recert_check_every"))*:</label>
            <div class="col-sm-8">
                <div class="form-group row">
                    <div class="col-sm-2">
                        <input type="number" min="1" class="form-control form-control-sm" @bind="recCheckParams.RecertCheckOffset" />
                    </div>
                    <div class="col-sm-4">
                        <Dropdown @bind-SelectedElement="recCheckParams.RecertCheckInterval" ElementToString="@(i => userConfig.GetText(i.ToString()))" Elements="Enum.GetValues(typeof(Interval)).Cast<Interval>().Where(x => (x != Interval.Never && x != Interval.Years))" >
                            <ElementTemplate Context="interval">
                                @(userConfig.GetText(interval.ToString()))
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                    @if(recCheckParams.RecertCheckInterval == Interval.Weeks)
                    {
                        <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("each_on")):</label>
                        <div class="col-sm-4">
                            <Dropdown ElementType="DayOfWeek?" ElementToString="@(d => userConfig.GetText(d?.ToString() ?? "undefined"))" @bind-SelectedElement="selectedDayOfWeek" Elements="Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek?>()" Nullable="true">
                                <ElementTemplate Context="weekday">
                                    @(weekday != null ? userConfig.GetText(weekday.ToString() ?? "undefined") : "-")
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    }
                    else if(recCheckParams.RecertCheckInterval == Interval.Months)
                    {
                        <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("each_on")):</label>
                        <div class="col-sm-2">
                            <input type="number" min="0" max="31" class="form-control form-control-sm" @bind="recCheckParams.RecertCheckDayOfMonth" />
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5430"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckEmailSubject")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecCheckEmailSubject" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5446"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckEmailUpcomingText")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecCheckEmailUpcomingText" />
            </div>
        </div>
            <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5432"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckEmailOverdueText")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecCheckEmailOverdueText" />
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5433"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recAutocreateDeleteTicket")):</label>
            <div class="col-sm-2">
                <input type="checkbox" class="w-100" @bind="configData!.RecAutoCreateDeleteTicket" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5434"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleTicketTitle")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleTicketTitle" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5435"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleTicketReason")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleTicketReason" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5436"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleReqTaskTitle")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleReqTaskTitle" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5437"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleReqTaskReason")):</label>
            <div class="col-sm-8">
                <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleReqTaskReason" />
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5438"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleTicketPriority")):</label>
            <div class="col-sm-4">
                <Dropdown ElementType="RequestPriority" ElementToString="@(p => p.Name)" @bind-SelectedElement="selectedPriority" Elements="PrioList">
                    <ElementTemplate Context="prio">
                        @prio.Name
                    </ElementTemplate>
                </Dropdown>
            </div>
        </div>
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5439"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleInitState")):</label>
            <div class="col-sm-4">
                <Dropdown ElementType="RequestState" ElementToString="@(s => s.Name)" @bind-SelectedElement="selectedState" Elements="states">
                    <ElementTemplate Context="state">
                        @state.Name
                    </ElementTemplate>
                </Dropdown>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5440"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("recalc_recerts")):</label>
            <div class="form-group col-sm-3">
                <input type="checkbox" @bind="configData!.RecRefreshStartup" />
                <label class="col-form-label-marg7">@(userConfig.GetText("at_startup"))</label>
            </div>
            <div class="form-group col-sm-3">
                <input type="checkbox" @bind="configData!.RecRefreshDaily" />
                <label class="col-form-label-marg7">@(userConfig.GetText("daily"))</label>
            </div>
            <div class="form-group col-sm-2">
                <AuthorizeView Roles="@Roles.Admin">
                    <Authorized>
                        @if (!recertCalcInProgress)
                        {
                            <button type="button" class="btn btn-sm btn-info" @onclick:preventDefault="true" @onclick="@( async () => { 
                                recertCalcInProgress = true; 
                                if (await recertRefresh.RecalcRecerts())
                                {
                                    DisplayMessageInUi(null, userConfig.GetText("fetch_data"), "Error during recertification refresh", true);
                                }
                                recertCalcInProgress = false; 
                            })">@(userConfig.GetText("recalc_now"))</button>
                        }
                        else
                        {
                            <div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>
                        }
                        <br>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-info" disabled>@(userConfig.GetText("recalc_now"))</button>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized>
    </AuthorizeView>
    <br><br>
    <p>@(userConfig.GetText("U5304"))</p>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private List<RequestPriority> PrioList = new List<RequestPriority>();
    private RecertCheckParams recCheckParams = new RecertCheckParams();
    private List<RequestState> states = new List<RequestState>();
    private DayOfWeek? selectedDayOfWeek;
    private RequestPriority? selectedPriority;
    private RequestState? selectedState;
    private bool recertCalcInProgress = false;
    private RecertRefresh recertRefresh;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            recertRefresh = new RecertRefresh(apiConnection);
            PrioList = System.Text.Json.JsonSerializer.Deserialize<List<RequestPriority>>(userConfig.ReqPriorities) ?? throw new Exception("Config data could not be parsed.");
            recCheckParams = System.Text.Json.JsonSerializer.Deserialize<RecertCheckParams>(userConfig.RecCheckParams) ?? throw new Exception("Config data could not be parsed.");
            states = await apiConnection.SendQueryAsync<List<RequestState>>(FWO.Api.Client.Queries.RequestQueries.getStates);
            selectedDayOfWeek = (DayOfWeek?)recCheckParams.RecertCheckWeekday;
            selectedPriority = PrioList.FirstOrDefault(p => p.NumPrio == configData.RecDeleteRuleTicketPriority);
            selectedState = states.FirstOrDefault(s => s.Id == configData.RecDeleteRuleInitState);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                if(recCheckParams.RecertCheckDayOfMonth == 0)
                {
                    recCheckParams.RecertCheckDayOfMonth = null;
                }
                recCheckParams.RecertCheckWeekday = (int?)selectedDayOfWeek;
                configData.RecDeleteRuleTicketPriority = selectedPriority?.NumPrio ?? 3;
                configData.RecDeleteRuleInitState = selectedState?.Id ?? 0;
                configData.RecCheckParams = System.Text.Json.JsonSerializer.Serialize(recCheckParams);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
