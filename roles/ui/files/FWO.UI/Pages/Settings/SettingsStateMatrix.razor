@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Ui.Services
@using System.Text.Json

@page "/settings/statematrix"
@attribute [Authorize(Roles = $"{GlobalConst.kAdmin}, {GlobalConst.kAuditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

@if(InitComplete)
{
    <div class="input-group">
        <h3>@(userConfig.GetText("state_matrix"))</h3>
        <HelpLink Page="settings/statematrix"/>
    </div>

    @(userConfig.GetText("U5316"))
    <hr />
    <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5541"))">
        <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("type")):</label>
        <div class="col-sm-3">
            <Dropdown ElementType="TaskType" @bind-SelectedElement="actTaskType" ElementToString="@(t => userConfig.GetText(t.ToString()))" Elements="availableTaskTypes" >
                <ElementTemplate Context="type">
                    @(userConfig.GetText(type.ToString()))
                </ElementTemplate>
            </Dropdown>
        </div>
        <div class="col-sm-3">
            <button type="button" class="btn btn-sm btn-primary" @onclick="InitMatrix">@(userConfig.GetText("select"))</button>
        </div>
    </div>

    @foreach (WorkflowPhases phase in Enum.GetValues(typeof(WorkflowPhases)))
    {
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5542"))">
            <div class="col-sm-1">
                <input type="checkbox" @bind="actStateMatrix.GlobalMatrix[phase].Active" />
            </div>
            <label class="col-form-label col-sm-3"><h4>@(userConfig.GetText(phase.ToString()))</h4></label>
        </div>
        @if(actStateMatrix.GlobalMatrix[phase].Active)
        {
            <h5>@(userConfig.GetText("allowed_transitions"))</h5>
            <button type="button" class="btn btn-sm btn-success" @onclick="() => AddStateToPhase(phase)">@(userConfig.GetText("add_state"))</button>

            <div class="m-2 vheight75" data-toggle="tooltip" title="@(userConfig.PureLine("H5543"))">
                <Table class="table table-bordered th-bg-secondary table-responsive vheight75 overflow-auto sticky-header" TableItem="KeyValuePair<int,List<int>>" Items="actStateMatrix.GlobalMatrix[phase].Matrix" PageSize="0" ColumnReorder="true">
                    <Column TableItem="KeyValuePair<int,List<int>>" Title="@(userConfig.GetText("action"))" Field="(x => x.Key)" Sortable="false" Filterable="false">
                        <Template>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditTargetStates(phase, context.Key)">@(userConfig.GetText("edit"))</button>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveStateFromPhase(phase, context.Key)">@(userConfig.GetText("remove"))</button>
                            </div>
                        </Template>
                    </Column>
                    <Column TableItem="KeyValuePair<int,List<int>>" Title="@(userConfig.GetText("from_state"))" Field="@(x => x.Key)" Sortable="true" Filterable="true" >
                        <Template>
                            @statesDict.Name[context.Key]
                        </Template>
                    </Column>
                    <Column TableItem="KeyValuePair<int,List<int>>" Title="@(userConfig.GetText("to_states"))" Field="@(x => x.Key)" Sortable="false" Filterable="false">
                        <Template>
                            @TargetStateList(actStateMatrix.GlobalMatrix[phase].Matrix[context.Key])
                        </Template>
                    </Column>
                    <Column TableItem="KeyValuePair<int,List<int>>" Title="@(userConfig.GetText("derived_state"))" Field="@(x => x.Key)" Sortable="false" Filterable="false">
                        <Template>
                            @(actStateMatrix.GlobalMatrix[phase].DerivedStates.ContainsKey(context.Key) ? statesDict.Name[actStateMatrix.GlobalMatrix[phase].DerivedStates[context.Key]] : "")
                        </Template>
                    </Column>
                </Table>
            </div>
            <h5 data-toggle="tooltip" title="@(userConfig.PureLine("H5545"))">@(userConfig.GetText("special_states"))</h5>
            <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5551"))">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("lowest_input_state")):</label>
                <div class="col-sm-3">
                    <Dropdown ElementType="int" @bind-SelectedElement="actStateMatrix.GlobalMatrix[phase].LowestInputState" ElementToString="@(s => stateNames[s])" Elements="stateIds" >
                        <ElementTemplate Context="stateId">
                            @stateNames[stateId]
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
            <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5552"))">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("lowest_started_state")):</label>
                <div class="col-sm-3">
                    <Dropdown ElementType="int" @bind-SelectedElement="actStateMatrix.GlobalMatrix[phase].LowestStartedState" ElementToString="@(s => stateNames[s])" Elements="stateIds" >
                        <ElementTemplate Context="stateId">
                            @stateNames[stateId]
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
            <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5553"))">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("lowest_end_state")):</label>
                <div class="col-sm-3">
                    <Dropdown ElementType="int" @bind-SelectedElement="actStateMatrix.GlobalMatrix[phase].LowestEndState" ElementToString="@(s => stateNames[s])" Elements="stateIds" >
                        <ElementTemplate Context="stateId">
                            @stateNames[stateId]
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
        }
    }
    <hr />
    <AuthorizeView Roles="@GlobalConst.kAdmin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="InitSaveMatrix" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
            <button type="button" class="btn btn-sm btn-danger" @onclick="InitResetMatrix" @onclick:preventDefault>@(userConfig.GetText("reset_to_default"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
            <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("reset_to_default"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    <br><br>

    <PopUp Title="@(userConfig.GetText("save_settings"))" Show="@SaveMatrixMode" Size=PopupSize.Small OnClose="() => SaveMatrixMode = false">
        <Body>
            @if (SaveMatrixMode)
            {
                <p>@(userConfig.GetText("U5315"))</p>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="@GlobalConst.kAdmin">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="SaveMatrix">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelSaveMatrix">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>

    <PopUp Title="@(userConfig.GetText("reset_to_default"))" Show="@ResetMatrixMode" Size=PopupSize.Small OnClose="() => ResetMatrixMode = false">
        <Body>
            @if (ResetMatrixMode)
            {
                <p>@(userConfig.GetText("U5318"))</p>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="@GlobalConst.kAdmin">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="ResetMatrix">@(userConfig.GetText("reset_to_default"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("reset_to_default"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelSaveMatrix">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>

    <PopUp Title="@(userConfig.GetText("edit_state") + ": " + statesDict.Name[actStateId])" Show="@EditTargetStatesMode" Size=PopupSize.Small OnClose="() => EditTargetStatesMode = false">
        <Body>
            @if (EditTargetStatesMode)
            {
                <H6 data-toggle="tooltip" title="@(userConfig.PureLine("H5543"))"><b>@(userConfig.GetText("allowed_transitions"))</b></H6>
                <button type="button" class="btn btn-sm btn-success" @onclick="AddStateToTargetStates">@(userConfig.GetText("add_state"))</button>
                <br><br>
                @foreach(var stateId in actToStateIds)
                {
                    <div class="form-group row mt-2">
                        <label class="col-sm-6 col-form-label col-form-label-sm">@statesDict.Name[stateId]</label>
                        <div class="col-sm-6">
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteStateId(stateId)">@(userConfig.GetText("remove"))</button>
                        </div>
                    </div>
                }
                <hr />
                <H6 data-toggle="tooltip" title="@(userConfig.PureLine("H5544"))"><b>@(userConfig.GetText("derived_state"))</b></H6>
                <div class="col-sm-9">
                    <Dropdown ElementType="int" @bind-SelectedElement="actStateMatrix.GlobalMatrix[actPhase].DerivedStates[actStateId]" ElementToString="@(s => stateNames[s])" Elements="stateIds" >
                        <ElementTemplate Context="stateId">
                            @stateNames[stateId]
                        </ElementTemplate>
                    </Dropdown>
                </div>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                <button type="button" class="btn btn-sm btn-primary" @onclick="ApplyEditTargetStates">@(userConfig.GetText("ok"))</button>
            </div>
        </Footer>
    </PopUp>

    <PopUp Title="@(userConfig.GetText("select_state"))" Show="@SelectStateMode" Size=PopupSize.Small OnClose="() => SelectStateMode = false">
        <Body>
            @if (SelectStateMode)
            {
                <div class="col-sm-9">
                    <Dropdown ElementType="int" @bind-SelectedElement="stateIdToAdd" ElementToString="@(s => stateNames[s])" Elements="stateIds" >
                        <ElementTemplate Context="stateId">
                            @stateNames[stateId]
                        </ElementTemplate>
                    </Dropdown>
                </div>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="@GlobalConst.kAdmin">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="ApplySelection">@(userConfig.GetText("select"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("select"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button type="button" class="btn btn-sm btn-secondary" @onclick="CancelSelect">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<RequestState> states = new List<RequestState>();
    private List<int> stateIds = new List<int>();
    private Dictionary<int,string> stateNames = new Dictionary<int,string>();
    private List<int> actToStateIds = new List<int>();
    private List<RequestState> availableStates = new List<RequestState>();
    private RequestStateDict statesDict = new RequestStateDict();

    private GlobalStateMatrix actStateMatrix = new GlobalStateMatrix();

    private int actStateId = 0;
    private int stateIdToAdd = 0;
    private WorkflowPhases actPhase = new WorkflowPhases();

    private bool SelectStateMode = false;
    private bool SaveMatrixMode = false;
    private bool ResetMatrixMode = false;
    private bool EditTargetStatesMode = false;
    private TaskType actTaskType = TaskType.master;
    private List<TaskType> availableTaskTypes { get; set; } = new List<TaskType>();
    private bool InitComplete = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshStates();
        await InitMatrix();
        availableTaskTypes = System.Text.Json.JsonSerializer.Deserialize<List<TaskType>>(userConfig.ReqAvailableTaskTypes) ?? throw new Exception("Config data could not be parsed.");
        InitComplete = true;
    }

    private async Task RefreshStates()
    {
        try
        {
            states = await apiConnection.SendQueryAsync<List<RequestState>>(FWO.Api.Client.Queries.RequestQueries.getStates);
            foreach(var state in states)
            {
                stateIds.Add(state.Id);
                stateNames.Add(state.Id,state.Name);
            }
            statesDict = new RequestStateDict();
            await statesDict.Init(apiConnection);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private async Task InitMatrix()
    {
        try
        {
            await actStateMatrix.Init(apiConnection, actTaskType);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    public string TargetStateList(List<int> statesIn)
    {
        List<string> statesOut = new List<string>();
        foreach(int state in statesIn)
        {
            statesOut.Add(statesDict.Name[state]);
        }
        return string.Join(", ", statesOut);
    }

    private void AddStateToPhase(WorkflowPhases phase)
    {
        actPhase = phase;
        availableStates = new List<RequestState>();
        foreach(var state in states.Where(x => !actStateMatrix.GlobalMatrix[actPhase].Matrix.ContainsKey(x.Id)))
        {
            availableStates.Add(state);
        }
        stateIdToAdd = (availableStates.Count > 0 ? availableStates.First().Id : 0);
        SelectStateMode = true;
    }

    private void ApplySelection()
    {
        if(EditTargetStatesMode)
        {
            actToStateIds.Add(stateIdToAdd);
        }
        else
        {
            actStateMatrix.GlobalMatrix[actPhase].Matrix.Add(stateIdToAdd, new List<int>());
            actStateMatrix.GlobalMatrix[actPhase].DerivedStates.Add(stateIdToAdd, stateIdToAdd);
        }
        SelectStateMode = false;
    }

    private void EditTargetStates(WorkflowPhases phase, int key)
    {
        actPhase = phase;
        actStateId = key;
        actToStateIds = actStateMatrix.GlobalMatrix[actPhase].Matrix[actStateId];
        EditTargetStatesMode = true;
    }
    
    private void AddStateToTargetStates()
    {
        availableStates = new List<RequestState>();
        foreach(var state in states.Where(x => !actStateMatrix.GlobalMatrix[actPhase].Matrix[actStateId].Contains(x.Id)))
        {
            availableStates.Add(state);
        }
        stateIdToAdd = (availableStates.Count > 0 ? availableStates.First().Id : 0);
        SelectStateMode = true;
    }

    private void DeleteStateId(int state)
    {
        actToStateIds.Remove(state);
    }

    private void ApplyEditTargetStates()
    {
        actStateMatrix.GlobalMatrix[actPhase].Matrix[actStateId] = actToStateIds;
        EditTargetStatesMode = false;
    }

    private void RemoveStateFromPhase(WorkflowPhases phase, int key)
    {
        actStateMatrix.GlobalMatrix[phase].Matrix.Remove(key);
        actStateMatrix.GlobalMatrix[phase].DerivedStates.Remove(key);
    }

    private void CancelSelect()
    {
        SelectStateMode = false;
    }

    private void InitSaveMatrix()
    {
        SaveMatrixMode = true;
    }

    private async Task SaveMatrix()
    {
        try
        {
            SaveMatrixMode = false;
            string matrixKey = actTaskType switch
            {
                TaskType.master => "reqMasterStateMatrix",
                TaskType.generic => "reqGenStateMatrix",
                TaskType.access => "reqAccStateMatrix",
                TaskType.rule_delete => "reqRulDelStateMatrix",
                TaskType.rule_modify => "reqRulModStateMatrix",
                TaskType.group_create => "reqGrpCreStateMatrix",
                TaskType.group_modify => "reqGrpModStateMatrix",
                TaskType.group_delete => "reqGrpDelStateMatrix",
                _ => throw new Exception($"Error: wrong task type:" + actTaskType.ToString()),
            };

            ConfigItem item = new ConfigItem 
            { 
                Key = matrixKey, 
                Value = JsonSerializer.Serialize(actStateMatrix),
                User = 0 
            };
            await apiConnection.SendQueryAsync<object>(ConfigQueries.upsertConfigItem, item);
            DisplayMessageInUi(null, userConfig.GetText("save_settings"), userConfig.GetText("U5301"), false);             
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_settings"), "", true);
        }
    }
        
    private void CancelSaveMatrix()
    {
        SaveMatrixMode = false;
        ResetMatrixMode = false;
    }

    private void InitResetMatrix()
    {
        ResetMatrixMode = true;
    }

    private async Task ResetMatrix()
    {
        try
        {
            ResetMatrixMode = false;
            await actStateMatrix.Init(apiConnection, actTaskType, true);
            await SaveMatrix();           
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("reset_to_default"), "", true);
        }
    }
}
