@using BlazorTable
@using System.Linq
@using System.Net
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Api.Client.Queries
@using FWO.Config.Api
@using FWO.Middleware.Client
@using FWO.Middleware.RequestParameters
@using RestSharp

@page "/settings/tenants"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("tenants"))</h3>
    <HelpLink Page="settings/tenants"/>
</div>
@(userConfig.GetText("U5212"))
<hr />

@if (addDeleteAllowed)
{
     <div class="btn-group m-1 sticky-marker-60" data-toggle="tooltip" title="@(userConfig.PureLine("H5231"))">
        <button type="button" class="btn btn-sm btn-success"
            @onclick="NewTenant">@(userConfig.GetText("add_tenant"))</button>
        @if (showCleanupButton)
        {
            <button type="button" class="btn btn-sm btn-danger"
                @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
        }
    </div>
}
<div class="mt-2 vheight75">
    <Table class="table table-sm table-bordered th-bg-secondary table-responsive overflow-auto sticky-header"
        TableItem="Tenant" Items="tenants" PageSize="0" ColumnReorder="true">
        <Column TableItem="Tenant" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)" Sortable="false"
            Filterable="false">
            <Template>
                <div class="btn-group" data-toggle="tooltip" title="@(userConfig.PureLine("H5241"))">
                    @if (context.Id != 1)
                    {
                        <button type="button" class="btn btn-sm btn-warning"
                            @onclick="() => EditTenant(context)">@(userConfig.GetText("edit"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="Tenant" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true"
            Filterable="true" />
        <Column TableItem="Tenant" Title="@(userConfig.GetText("comment"))" Field="@(x => x.Comment)" Sortable="true"
            Filterable="true">
            <Template>
                @if (context.Id != 1)
                {
                    @(context.Comment)
                }
                else
                {
                    <label>@(userConfig.GetText("U5208"))</label>
                }
            </Template>
        </Column>
        <Column TableItem="Tenant" Title="@(userConfig.GetText("project"))" Field="@(x => x.Project)" Sortable="true"
            Filterable="true" />
    </Table>
</div>

<PopUp Title="@(AddTenantMode ? userConfig.GetText("add_tenant"): userConfig.GetText("edit_tenant"))"
    Show="@EditTenantMode" Size=PopupSize.Large OnClose="() => EditTenantMode = false">

    <Body>
        @if (EditTenantMode)
        {
            <form>
                <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5243"))">
                    <label for="tenantName"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    @if (AddTenantMode)
                    {
                        <div class="col-sm-9">
                            <input id="tenantName" type="text" class="form-control form-control-sm" @bind="actTenant.Name" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-9">@actTenant.Name</label>
                    }
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5244"))">
                    <label for="tenantComment"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                    <div class="col-sm-9">
                        <input id="tenantComment" type="text" class="form-control form-control-sm"
                            @bind="actTenant.Comment" />
                    </div>
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5245"))">
                    <label for="tenantProject"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("project")):</label>
                    <div class="col-sm-9">
                        <input id="tenantProject" type="text" class="form-control form-control-sm"
                            @bind="actTenant.Project" />
                    </div>
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5242"))">
                    <label for="tenantDeviceSelection"
                        class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant_vis_devices")):</label>
                    <div class="col-sm-9">
                        <button type="button" class="btn btn-sm btn-warning w-content"
                            @onclick="EditDevicesSelectedForTenant">@(userConfig.GetText("edit"))
                        </button>
                    </div>
                </div>
                <div class="col-sm-12 mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5249"))">
                    <IpSelector IpAddresses="actIpAddresses" @bind-IpsToAdd="ipsToAdd" @bind-IpsToDelete="ipsToDelete" />
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, fw-admin">
                <Authorized>
                    @if (addDeleteAllowed && !AddTenantMode)
                    {
                        @if (actTenant.Id != 1)
                        {
                            <button type="button" class="btn btn-sm btn-danger"
                                @onclick="() => RequestDeleteTenant(actTenant)">@(userConfig.GetText("delete_tenant"))</button>
                        }
                    }
                    <button type="button" class="btn btn-primary"
                        @onclick="() => LeaveModifyTenantMode(cancel:false)">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized>
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary"
                @onclick="() => LeaveModifyTenantMode(cancel:true)">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("edit_vis_devices") + ": " + actTenant.Name)" Show="@EditDevicesSelectedForTenantMode" Size=PopupSize.Large OnClose="() => LeaveEditDevicesSelectedForTenantMode(cancel:true)">
    <Body>
        @if (EditDevicesSelectedForTenantMode)
        {
            <DeviceSelectionTenants Environment="Tenant" autoSelectMgmt="false" @bind-DeviceFilter="devicesSelectedForTenant" @bind-CollapseAll="collapseDevices" @bind-SelectAll="selectAll"></DeviceSelectionTenants>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-success" @onclick="() => LeaveEditDevicesSelectedForTenantMode(cancel:false)" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-success" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized>
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="() => LeaveEditDevicesSelectedForTenantMode(cancel:true)">
                @(userConfig.GetText("cancel"))
            </button>
        </div>
    </Footer>
</PopUp>

<ConfirmDelete @bind-Display="DeleteTenantMode" PerformAction="DeleteTenant"
    Title="@userConfig.GetText("delete_tenant")" DeleteMessage="@deleteTenantMessage"
    DeleteAllowed="DeleteTenantAllowed" />
<ConfirmDelete @bind-Display="SampleRemoveMode" PerformAction="RemoveSampleData"
    Title="@userConfig.GetText("remove_sample_data")" DeleteMessage="@sampleRemoveMessage"
    DeleteAllowed="sampleRemoveAllowed" />
<InProgress Display="workInProgress" />


@code
{
        [CascadingParameter]
        Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

        [CascadingParameter]
        private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private List<Tenant> tenants = new List<Tenant>();
    private List<Tenant> sampleTenants = new List<Tenant>();
    private DeviceFilter devicesSelectedForTenant = new DeviceFilter();
    private bool collapseDevices = false;
    private List<UiUser> uiUsers = new List<UiUser>();

    private Tenant actTenant = new Tenant();
    private bool selectAll = true;

    private bool AddTenantMode = false;
    private bool EditTenantMode = false;
    private bool DeleteTenantMode = false;
    private bool DeleteTenantAllowed = false;
    private string deleteTenantMessage = "";
    private bool EditDevicesSelectedForTenantMode = false;
    private bool SampleRemoveMode = false;
    private bool showCleanupButton = false;
    private bool sampleRemoveAllowed = false;
    private string sampleRemoveMessage = "";
    private bool workInProgress = false;

    private List<NwObjectElement> actIpAddresses = new List<NwObjectElement>();
    private List<NwObjectElement> ipsToAdd = new List<NwObjectElement>();
    private List<NwObjectElement> ipsToDelete = new List<NwObjectElement>();

    private bool addDeleteAllowed = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            addDeleteAllowed = authenticationStateTask!.Result.User.IsInRole(Roles.Admin) || authenticationStateTask!.Result.User.IsInRole(Roles.Auditor);
            await GetTenantsFromLdap();
            uiUsers = await apiConnection.SendQueryAsync<List<UiUser>>(AuthQueries.getUsers);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("get_tenant_data"), "", true);
        }
    }

    private async Task GetTenantsFromLdap()
    {
        RestResponse<List<TenantGetReturnParameters>> middlewareServerResponse = await middlewareClient.GetTenants();
        if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == null)
        {
            DisplayMessageInUi(null, userConfig.GetText("get_tenant_data"), userConfig.GetText("E5284"), true);
        }
        else
        {
            tenants = new List<Tenant>();
            foreach (TenantGetReturnParameters apiTenant in middlewareServerResponse.Data)
            {
                Tenant newTenant = new Tenant(apiTenant);
                // foreach (TenantViewGateway tenantGateway in apiTenant.UnfilteredGateways)
                //    newTenant.UnfilteredGatewayIds.Append(tenantGateway.Id);
                // foreach (TenantViewGateway tenantGateway in apiTenant.SharedGateways)
                //    newTenant.SharedGatewayIds.Append(tenantGateway.Id);
                tenants.Add(newTenant);
            }
            AnalyseSampleTenants();
        }
    }

    private void AnalyseSampleTenants()
    {
        sampleTenants = new List<Tenant>();
        foreach (var tenant in tenants)
        {
            if (tenant.Name.EndsWith("_demo"))
            {
                sampleTenants.Add(tenant);
            }
        }
        showCleanupButton = (sampleTenants.Count > 0);
    }

    private async Task NewTenant()
    {
        AddTenantMode = true;
        await EditTenant(new Tenant());
    }

    private async Task EditTenant(Tenant tenant)
    {
        try
        {
            actTenant = tenant;
            if (AddTenantMode)
            {
                actIpAddresses.Clear();
            }
            else
            {
                actIpAddresses = await apiConnection.SendQueryAsync<List<NwObjectElement>>(AuthQueries.getTenantNetworks, 
                    new { tenantId = actTenant.Id });
            }
            ipsToAdd.Clear();
            ipsToDelete.Clear();
            EditTenantMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_tenant"), "", true);
        }
    }

    private async Task EditDevicesSelectedForTenant()
    {
        try
        {
            await SyncDeviceSelections();
            // TODO: add device filter to tenant
            EditDevicesSelectedForTenantMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("get_tenant_data"), "", true);
        }
    }

    private async Task SyncDeviceSelections()
    {
        List<ManagementSelect> allDevs = await apiConnection.SendQueryAsync<List<ManagementSelect>>(DeviceQueries.getDevicesByManagement);

        InitDevicesToInvisible(allDevs);
        if(!AddTenantMode)
        {
            await RestoreDeviceVisibility(allDevs);
        }
        devicesSelectedForTenant = new DeviceFilter(allDevs);
    }

    private void InitDevicesToInvisible(List<ManagementSelect> allDevs)
    {
        foreach (ManagementSelect mgm in allDevs)
        {
            mgm.Visible = false;
            mgm.Shared = true;
            foreach (DeviceSelect dev in mgm.Devices)
            {
                dev.Visible = false;
                dev.Shared = true;
            }
        }
    }

    private async Task RestoreDeviceVisibility(List<ManagementSelect> allDevs)
    {
        Tenant tenantDevices = (await apiConnection.SendQueryAsync<List<Tenant>>(AuthQueries.getTenants, new { tenant_id = actTenant.Id })).First();

        // set dev visibility for all non-shared managements
        foreach (TenantManagement tenMgm in tenantDevices.TenantManagements)
        {
            foreach (ManagementSelect mgm in allDevs)
            {
                if (mgm.Id == tenMgm.VisibleManagement.Id)
                {
                    mgm.Visible = true;
                    mgm.Shared = tenMgm.Shared;
                }
            }            
        }
        // set explicit gateway visibilities from tenant_to_device table
        foreach (TenantGateway tenGw in tenantDevices.TenantGateways)
        {
            foreach (ManagementSelect mgm in allDevs)
            {
                foreach (DeviceSelect dev in mgm.Devices)
                {
                    if (dev.Id == tenGw.VisibleGateway.Id)
                    {
                        dev.Visible = true;
                        dev.Shared = tenGw.Shared;
                    }
                }
            }
        }
    }

    private async Task addTenantNetworks()
    {
        foreach (var ipAdd in ipsToAdd)
        {
            var Variables = new
            {
                tenantId = actTenant.Id,
                ip = (ipAdd.Cidr != null && ipAdd.Cidr.Valid ? ipAdd.Cidr.CidrString : null),
                ipEnd = (ipAdd.CidrEnd != null && ipAdd.CidrEnd.Valid ? ipAdd.CidrEnd.CidrString : null),
                name = ipAdd.Name,
                comment = ipAdd.Comment
            };
            await apiConnection.SendQueryAsync<NewReturning>(AuthQueries.addTenantNetwork, Variables);
        }
    }

    private async Task deleteTenantNetworks()
    {
        foreach (var ipDel in ipsToDelete)
        {
            var Variables = new
            {
                tenantId = actTenant.Id,
                tenNetId = ipDel.ElemId
            };
            await apiConnection.SendQueryAsync<ReturnId>(AuthQueries.deleteTenantNetwork, Variables);
        }
    }

    private void RequestDeleteTenant(Tenant tenant)
    {
        try
        {
            actTenant = tenant;
            if (uiUsers.Exists(user => (user.Tenant != null && user.Tenant.Name == actTenant.Name)))
            {
                deleteTenantMessage = userConfig.GetText("E5283");
                DeleteTenantAllowed = false;
            }
            else
            {
                deleteTenantMessage = userConfig.GetText("U5210") + actTenant.Name + "?";
                DeleteTenantAllowed = true;
            }

            DeleteTenantMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_tenant"), "", true);
        }
    }

    private async Task DeleteTenant()
    {
        try
        {
            // delete tenant from Ldap
            TenantDeleteParameters deleteTenantParameters = new TenantDeleteParameters { Name = actTenant.Name, Id = actTenant.Id };
            RestResponse<bool> middlewareServerResponse = await middlewareClient.DeleteTenant(deleteTenantParameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_tenant"), userConfig.GetText("E5282"), true);
            }
            else
            {
                tenants.Remove(actTenant);
            }
            DeleteTenantMode = false;
            EditTenantMode = false;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_tenant"), "", true);
        }
        StateHasChanged();
    }

    private void RequestRemoveSampleData()
    {
        try
        {
            if (sampleTenants.Exists(tenant => (uiUsers.Exists(user => (user.Tenant != null && user.Tenant.Name == tenant.Name)))))
            {
                sampleRemoveMessage = userConfig.GetText("E5283");
                sampleRemoveAllowed = false;
            }
            else
            {
                sampleRemoveMessage = userConfig.GetText("U5209");
                sampleRemoveAllowed = true;
            }
            SampleRemoveMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("remove_sample_data"), "", false);
        }
    }

    private async Task RemoveSampleData()
    {
        SampleRemoveMode = false;
        workInProgress = true;
        try
        {
            foreach (var tenant in sampleTenants)
            {
                actTenant = tenant;
                await DeleteTenant();
            }
            showCleanupButton = false;
            workInProgress = false;
            StateHasChanged();
        }
        catch (System.Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("remove_sample_data"), "", false);
        }
    }

    // save tenant data to LDAP and DB
    private async Task LeaveModifyTenantMode(bool cancel = true)
    {
        if (cancel)
        {
            AddTenantMode = false;
            EditTenantMode = false;
            DeleteTenantMode = false;
            SampleRemoveMode = false;
        }
        else
        {
            try
            {
                if (actTenant.Sanitize())
                {
                    DisplayMessageInUi(null, userConfig.GetText("save_tenant"), userConfig.GetText("U0001"), true);
                }
                if (actTenant.Name == "")
                {
                    DisplayMessageInUi(null, userConfig.GetText("save_tenant"), userConfig.GetText("E5234"), true);
                }
                else if (AddTenantMode)
                {
                    await AddTenant();
                }
                else
                {
                    await UpdateTenant();
                }
                AnalyseSampleTenants();
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("save_tenant"), "", true);
            }
        }
    }

    private async Task AddTenant()
    {
        if (tenants.Exists(x => x.Name == actTenant.Name))
        {
            DisplayMessageInUi(null, userConfig.GetText("add_tenant"), userConfig.GetText("E5235"), true);
        }
        else
        {
            // add tenant in local Ldap and db
            RestResponse<int> middlewareServerResponse = await middlewareClient.AddTenant(actTenant.ToApiParams());
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("add_tenant"), userConfig.GetText("E5281"), true);
            }
            else
            {
                actTenant.Id = middlewareServerResponse.Data;
                await AddMgtAndDevMappings();
                await addTenantNetworks();
                tenants.Add(actTenant);
                AddTenantMode = false;
                EditTenantMode = false;
            }
        }
    }

    private async Task UpdateTenant()
    {
        RestResponse<bool> middlewareServerResponse = await middlewareClient.UpdateTenant(actTenant.ToApiUpdateParams());
        if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
        {
            DisplayMessageInUi(null, userConfig.GetText("edit_tenant"), userConfig.GetText("E5285"), true);
        }
        else
        {
            await deleteTenantNetworks();
            await addTenantNetworks();
            EditTenantMode = false;
        }
    }

    private async Task LeaveEditDevicesSelectedForTenantMode(bool cancel = true)
    {
        if (!cancel && !AddTenantMode)
        {
            await DeleteMgtAndDevMappings();
            await AddMgtAndDevMappings();
         }
        EditDevicesSelectedForTenantMode = false;
    }

    private async Task DeleteMgtAndDevMappings()
    {
        try
        {
            // delete all tenant to device and management mappings for the current tenant
            await apiConnection.SendQueryAsync<NewReturning>(AuthQueries.deleteAllGatewaysOfTenant, new { tenantId = actTenant.Id });
            await apiConnection.SendQueryAsync<NewReturning>(AuthQueries.deleteAllManagementsOfTenant, new { tenantId = actTenant.Id });
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_device_from_tenant"), "", false);
        }
    }

    private async Task AddMgtAndDevMappings()
    {
        try
        {
            // saving tenant to device and management mappings
            foreach (ManagementSelect mgm in devicesSelectedForTenant.Managements)
            {
                if (mgm.Visible)
                {
                    await apiConnection.SendQueryAsync<NewReturning>(AuthQueries.addTenantToManagement, new { tenantId = actTenant.Id, mgmId = mgm.Id, shared = mgm.Shared });
                    foreach (DeviceSelect gw in mgm.Devices)
                    {
                        if (gw.Visible)
                        {
                            await apiConnection.SendQueryAsync<NewReturning>(AuthQueries.addTenantToGateway, new { tenantId = actTenant.Id, gwId = gw.Id, shared = gw.Shared });
                        }
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_device_to_tenant"), "", false);
        }
    }
}
