@using BlazorTable
@using System.Net
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Middleware.Client
@using FWO.Config.Api
@using FWO.Middleware.RequestParameters
@using FWO.Ui.Services
@using RestSharp

@page "/settings/users"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig
@inject GlobalConfig globalConfig

<div class="input-group">
    <h3>@(userConfig.GetText("users"))</h3>
    <HelpLink Page="settings/users"/>
</div>
@(userConfig.GetText("U5213"))
<hr />

<div class="btn-group m-1" data-toggle="tooltip" title="@(userConfig.PureLine("H5261"))">
    <button type="button" class="btn btn-sm btn-success" @onclick="AddUser">@(userConfig.GetText("add_new_user"))</button>
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-info" @onclick="Resynchronize">@(userConfig.GetText("synchronize"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-info" disabled>@(userConfig.GetText("synchronize"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    @if (showSampleRemoveButton)
    {
        <button type="button" class="btn btn-sm btn-danger" @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
    }
</div>

<div class="m-2 vheight75">
    <Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="UiUser" Items="uiUsers" PageSize="0" ColumnReorder="true">
        <Column TableItem="UiUser" Title="@(userConfig.GetText("actions"))" Field="(x => x.DbId)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group" data-toggle="tooltip" title="@(userConfig.PureLine("H5271"))">
                    <button type="button" class="btn btn-sm btn-success" @onclick="() => Clone(context)">@(userConfig.GetText("clone"))</button>
                    @if(context.isInternal())
                    {
                        <button type="button" class="btn btn-sm btn-warning" @onclick="() => Edit(context)">@(userConfig.GetText("edit"))</button>
                    }
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">@(userConfig.GetText("delete"))</button>
                    @if(context.isInternal())
                    {
                        <button type="button" class="btn btn-sm btn-info" @onclick="() => RequestResetPassword(context)">@(userConfig.GetText("reset_password"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("from_ldap"))" Field="@(x => x.LdapConnection.Name)" Sortable="true" Filterable="true">
            <Template>
                <div data-toggle="tooltip" title="@(userConfig.PureLine("H5279"))">
                    @context.LdapConnection.Name
                </div>
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("tenant"))" Field="@(x => x.Tenant)" Sortable="true">
            <Template>
                <div data-toggle="tooltip" title="@(userConfig.PureLine("H5273"))">
                    @(context.Tenant != null ? (context.Tenant.Id == 1 && context.LdapConnection.GlobalTenantName != null && 
                        context.LdapConnection.GlobalTenantName != "" ? context.LdapConnection.GlobalTenantName : context.Tenant.Name) : "" )
                </div>
            </Template>       
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("email"))" Field="@(x => x.Email)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("language"))" Field="@(x => x.Language)" Sortable="true" Filterable="true" >
            <Template>
                <div data-toggle="tooltip" title="@(userConfig.PureLine("H5275"))">
                    @((context.Language != null && context.Language != "") ? userConfig.GetText(context.Language) : "" )
                </div>
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("last_login"))" Field="@(x => x.LastLogin)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("last_pw_change"))" Field="@(x => x.LastPasswordChange)" Sortable="true" Filterable="true" >
            <Template>
                <div data-toggle="tooltip" title="@(userConfig.PureLine("H5277"))">
                    @context.LastPasswordChange
                </div>
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("pwd_chg_req"))" Field="@(x => x.PasswordMustBeChanged)" Sortable="true" Filterable="true" >
            <Template>
                <div data-toggle="tooltip" title="@(userConfig.PureLine("H5278"))">
                    @(GlobalConfig.ShowBool(context.PasswordMustBeChanged))
                </div>
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="@((AddMode ? userConfig.GetText("add_user") : userConfig.GetText("edit_user")))" Show="@EditMode" Size=PopupSize.Large OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5272"))">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <input id="userName" type="text" class="form-control form-control-sm" @bind="actUser.Name" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actUser.Name</label>
                    }
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5280"))">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("into_ldap"))*:</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <Dropdown ElementType="UiLdapConnection" ElementToString="@(l => l.Name)" SelectedElement="selectedLdap" Elements="writableLdaps" SelectedElementChanged="SetAvailableTenants">
                                <ElementTemplate Context="ldap">
                                    @ldap.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actUser.LdapConnection.Name</label>
                    }
                </div>
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5273"))">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("tenant")):</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <Dropdown ElementType="Tenant" ElementToString="@(t => t.Name)" @bind-SelectedElement="selectedTenant" Elements="availableTenants">
                                <ElementTemplate Context="tenant">
                                    @tenant.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@(actUser.Tenant != null ? actUser.Tenant.Name : "")</label>
                    }
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">Dn:</label>
                    <label class="col-sm-8">@actUser.Dn</label>
                </div>
                @if (AddMode)
                {
                    <div class="form-group row mt-2">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("password"))*:</label>
                        <div class="col-sm-8">
                            <input type="password" class="form-control form-control-sm" @bind="actUser.Password" />
                        </div>
                    </div>
                }
                <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5274"))">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("email")):</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control form-control-sm" @bind="actUser.Email" />
                    </div>
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("groups")):</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <Dropdown ElementType="UserGroup" ElementToString="@(g => g.Name)" @bind-SelectedElement="selectedGroup" Elements="groups.OrderBy(x => x.Name).ToList()" Nullable="true">
                                <ElementTemplate Context="group">
                                    @group.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@(actUser.Groups.Count > 0 ? actUser.GroupList() : "")</label>
                    }
                </div>
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("roles"))*:</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <Dropdown ElementType="Role" ElementToString="@(r => r.Name)" @bind-SelectedElement="selectedRole" Elements="availableRoles" Nullable="true">
                                <ElementTemplate Context="role">
                                    @role.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@((actUser.Roles.Count > 0) ? actUser.RoleList() : "")</label>
                    }
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@Roles.Admin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => Save()">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("reset_password"))" Show="@ResetPasswordMode" Size=PopupSize.Large OnClose="() => ResetPasswordMode = false">
    <Body>
        @if (ResetPasswordMode)
        {
            <form onsubmit="return false">
                <div class="form-group row">
                    <label for="userName" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                    <label class="col-sm-8">@actUser.Name</label>
                </div>
                <div class="form-group row mt-2">
                    <label for="userPassword" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("password"))*:</label>
                    <div class="col-sm-8">
                        <input id="userPassword" type="password" class="form-control form-control-sm" @bind="actUser.Password" />
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@Roles.Admin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => ResetPassword()">@(userConfig.GetText("set"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("set"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<ConfirmDelete @bind-Display="DeleteMode" PerformAction="Delete" Title="@userConfig.GetText("delete_user")" DeleteMessage="@deleteMessage"/>
<ConfirmDelete @bind-Display="SampleRemoveMode" PerformAction="RemoveSampleData" Title="@userConfig.GetText("remove_sample_data")" DeleteMessage="@sampleRemoveMessage" DeleteAllowed="sampleRemoveAllowed"/>
<InProgress Display="workInProgress"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<UiLdapConnection> connectedLdaps = new List<UiLdapConnection>();
    private List<UiLdapConnection> writableLdaps = new List<UiLdapConnection>();
    UiLdapConnection internalLdap = new UiLdapConnection();

    private List<UiUser> ldapUsers = new List<UiUser>();
    private List<UiUser> uiUsers = new List<UiUser>();
    private List<UiUser> sampleUsers = new List<UiUser>();
    private List<Tenant> tenants = new List<Tenant>();
    private List<Tenant> availableTenants = new List<Tenant>();
    private List<UserGroup> groups = new List<UserGroup>();
    private List<Role> roles = new List<Role>();
    private List<Role> availableRoles = new List<Role>();

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool SampleRemoveMode = false;
    private bool sampleRemoveAllowed = false;
    private bool AddMode = false;
    private bool showSampleRemoveButton = false;
    private bool ResetPasswordMode = false;

    private UiUser newUser = new UiUser();
    private UiUser actUser = new UiUser();
    private UiLdapConnection? selectedLdap;
    private Tenant? selectedTenant;
    private Role? selectedRole;
    private UserGroup? selectedGroup;

    private string deleteMessage = "";
    private string sampleRemoveMessage = "";
    private bool workInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        if (await FetchFromDb())
            await SynchronizeGroupsAndRoles();
    }

    private async Task<bool> FetchFromDb()
    {
        try
        {
            connectedLdaps = await apiConnection.SendQueryAsync<List<UiLdapConnection>>(FWO.Api.Client.Queries.AuthQueries.getLdapConnections);
            writableLdaps = connectedLdaps.FindAll(x => x.IsWritable());
            internalLdap = connectedLdaps.FirstOrDefault(x => x.IsInternal()) ?? throw new Exception(userConfig.GetText("E5207"));

            // Get the tenants
            tenants = await apiConnection.SendQueryAsync<List<Tenant>>(FWO.Api.Client.Queries.AuthQueries.getTenants);

            // Get users from uiusers table
            RestResponse<List<UserGetReturnParameters>> middlewareServerResponse = await middlewareClient.GetUsers();
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == null)
            {
                DisplayMessageInUi(null, userConfig.GetText("fetch_users_local"), userConfig.GetText("E5209"), true);
            }
            else
            {
                uiUsers = new List<UiUser>();
                sampleUsers = new List<UiUser>();
                foreach (UserGetReturnParameters apiUser in middlewareServerResponse.Data)
                {
                    UiUser user = new UiUser(apiUser);
                    user.LdapConnection = connectedLdaps.FirstOrDefault(x => x.Id == user.LdapConnection.Id) ?? throw new ArgumentNullException(nameof(user.LdapConnection.Id));
                    if(user.Tenant != null)
                    {
                        user.Tenant.Name = tenants.FirstOrDefault(x => x.Id == user.Tenant.Id)?.Name ?? throw new ArgumentNullException(nameof(user.Tenant.Id));
                    }
                    uiUsers.Add(user);
                }
                AnalyseSampleUsers();
            }
            return true;
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
            return false;
        }
    }

    private void AnalyseSampleUsers()
    {
        sampleUsers = new List<UiUser>();
        foreach (var user in uiUsers)
        {
            if (user.Name.EndsWith("_demo"))
            {
                sampleUsers.Add(user);
            }
        }
        showSampleRemoveButton = (sampleUsers.Count > 0);
    }

    private async Task SynchronizeGroupsAndRoles()
    {
        // get groups from internal ldap
        await GetGroupsFromInternalLdap();
        SynchronizeUsersToGroups();

        // get roles from internal ldap
        await GetRolesFromInternalLdap();
        SynchronizeUsersToRoles();

        availableRoles = roles.Where(x => (x.Name != Roles.Anonymous && x.Name != Roles.MiddlewareServer)).OrderBy(x => x.Name).ToList();
    }

    private void SynchronizeUsersToGroups()
    {
        try
        {
            foreach (var user in uiUsers)
            {
                user.Groups = new List<string>();
                foreach (var group in groups)
                {
                    if (group.Users != null && group.Users.Exists(x => x.Dn == user.Dn))
                    {
                        user.Groups.Add(group.Name);
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("sync_users"), "", true);
        }
    }

    private void SynchronizeUsersToRoles()
    {
        try
        {
            foreach (var user in uiUsers)
            {
                user.Roles = new List<string>();
                foreach (var role in roles)
                {
                    if (role.Users != null && role.Users.Exists(x => x.Dn == user.Dn))
                    {
                        user.Roles.Add(role.Name);
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("sync_users"), "", true);
        }
    }

    private async Task Resynchronize()
    {
        await FetchFromDb();

        // Get all users from internal ldap
        await GetUsersFromInternalLdap();

        // Synchronize both
        await SynchronizeUsers();

        await SynchronizeGroupsAndRoles();
    }

    private async Task SynchronizeUsers()
    {
        try
        {
            foreach (var ldapUser in ldapUsers)
            {
                UiUser? relatedUiUser = uiUsers.FirstOrDefault(x => x.Dn == ldapUser.Dn);
                if (relatedUiUser != null)
                {
                    // Update related user
                    if (relatedUiUser.Email != ldapUser.Email)
                    {
                        relatedUiUser.Email = ldapUser.Email;
                        await updateUserInDb(relatedUiUser);
                    }
                }
                else
                {
                    // Add new user to UiUsers table
                    await addUserToDb(ldapUser);
                    uiUsers.Add(ldapUser);
                }
            }
            // Todo: CleanUpUser for deleted users?
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("sync_users"), "", true);
        }
    }

    private async Task GetUsersFromInternalLdap()
    {
        try
        {
            ldapUsers.Clear();

            // get users from Ldap
            LdapUserGetParameters userGetParameters = new LdapUserGetParameters { LdapId = internalLdap.Id, SearchPattern = "" };
            RestResponse<List<LdapUserGetReturnParameters>> middlewareServerResponse = await middlewareClient.GetLdapUsers(userGetParameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == null)
            {
                DisplayMessageInUi(null, userConfig.GetText("get_user_from_ldap"), userConfig.GetText("E5208"), true);
            }
            else
            {
                foreach (var user in middlewareServerResponse.Data)
                {
                    DistName distname = new DistName(user.UserDn);
                    UiUser newUser = new UiUser() 
                    { 
                        Dn = user.UserDn, 
                        Name = distname.UserName, 
                        Email = user.Email, 
                        PasswordMustBeChanged = false,
                        LdapConnection = internalLdap
                    };
                    string tenantName = distname.getTenant(internalLdap.TenantLevel);
                    if (tenantName != "")
                    {
                        newUser.Tenant = new Tenant(){ Name = tenantName };
                    }
                    ldapUsers.Add(newUser);
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_users_ldap"), "", true);
        }
    }

    private async Task GetGroupsFromInternalLdap()
    {
        try
        {
            groups = await GroupAccess.GetGroupsFromInternalLdap(middlewareClient, userConfig, DisplayMessageInUi);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_groups"), "", true);
        }
    }

    private async Task GetRolesFromInternalLdap()
    {
        try
        {
            roles = await RoleAccess.GetRolesFromInternalLdap(middlewareClient);
            if (roles.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("fetch_roles"), userConfig.GetText("E5251"), true);
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_roles"), "", true);
        }
    }

    private async Task updateUserInDb(UiUser user)
    {
        try
        {
            var Variables = new
            {
                id = user.DbId,
                email = user.Email
            };
            await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.AuthQueries.updateUserEmail, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("update_user_local"), "", false);
        }
    }

    private async Task addUserToDb(UiUser user)
    {
        try
        {
            Tenant? actTenant = tenants.FirstOrDefault(x => x.Name == user.Tenant?.Name);
            if (user.Tenant != null && actTenant != null)
            {
                user.Tenant.Id = actTenant.Id;
            }

            var Variables = new
            {
                uuid = user.Dn,
                uiuser_username = user.Name,
                email = user.Email,
                tenant = (user.Tenant != null ? user.Tenant.Id : (int?)null),
                passwordMustBeChanged = user.PasswordMustBeChanged,
                ldapConnectionId = user.LdapConnection.Id
            };
            ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.AuthQueries.addUser, Variables)).ReturnIds;
            if(returnIds != null)
            {
                user.DbId = returnIds[0].NewId;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_user_local"), "", false);
        }
    }

    private void SetAvailableTenants(UiLdapConnection? newLdap)
    {
        try
        {
            selectedLdap = newLdap;
            availableTenants = new List<Tenant>();
            if(selectedLdap != null)
            {
                if (selectedLdap.TenantId != null && selectedLdap.TenantId != 0)
                {
                    Tenant? ten = tenants.FirstOrDefault(x => x.Id == selectedLdap.TenantId);
                    if (ten != null) availableTenants.Add(ten);
                }
                else if (selectedLdap.TenantLevel > 0)
                {
                    availableTenants = tenants;
                }
            }
            if(selectedTenant != null && !availableTenants.Contains(selectedTenant) && availableTenants.Count > 0)
            {
                selectedTenant = availableTenants.First();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("get_tenant_data"), "", false);
        }
    }

    private void AddUser()
    {
        try
        {
            AddMode = true;
            newUser = new UiUser(){ Email = "" };
            selectedLdap = writableLdaps.FirstOrDefault();
            SetAvailableTenants(selectedLdap);
            selectedTenant = availableTenants.FirstOrDefault();
            selectedGroup = null;
            newUser.Groups = new List<string>();
            selectedRole = null;
            newUser.Roles = new List<string>();
            Edit(newUser);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_user"), "", false);
        }
    }

    private void Clone(UiUser user)
    {
        try
        {
            AddMode = true;
            newUser = new UiUser(user);
            newUser.Password = "";
            selectedLdap = (newUser.LdapConnection != null ? newUser.LdapConnection : writableLdaps.FirstOrDefault());
            SetAvailableTenants(selectedLdap);
            selectedTenant = newUser.Tenant;
            selectedGroup = (newUser.Groups != null ? groups.FirstOrDefault(x => x.Name == newUser.Groups.FirstOrDefault()) : null);
            newUser.Groups = new List<string>();
            selectedRole = (newUser.Roles != null ? roles.FirstOrDefault(x => x.Name == newUser.Roles.FirstOrDefault()) : null);
            newUser.Roles = new List<string>();
            Edit(newUser);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_user"), "", false);
        }
    }

    private void Edit(UiUser user)
    {
        actUser = new UiUser(user);
        if(actUser.LdapConnection == null)
        {
            actUser.LdapConnection = new UiLdapConnection();
        }
        if (actUser.Tenant != null && actUser.Tenant.Id == 1 && actUser.LdapConnection.GlobalTenantName != null && actUser.LdapConnection.GlobalTenantName != "")
        {
            actUser.Tenant.Name = actUser.LdapConnection.GlobalTenantName;
        }
        EditMode = true;
    }

    private void SynchronizeUserData(UiUser user)
    {
        if(selectedLdap != null)
        {
            user.LdapConnection = selectedLdap;
            user.Tenant = (selectedLdap.TenantLevel > 0 ? selectedTenant : null);
            // todo: further dn specification maybe in ldapconnection?
            user.Dn = (selectedLdap.Type == (int)LdapType.ActiveDirectory ? "cn=": "uid=") + user.Name + 
                (selectedLdap.TenantLevel > 0 ? ",ou=" + (selectedTenant?.Id == 1 && selectedLdap.GlobalTenantName != null && selectedLdap.GlobalTenantName != "" ? selectedLdap.GlobalTenantName : selectedTenant?.Name) : "") + "," + selectedLdap.UserSearchPath;
        }
        user.Groups = new List<string>();
        if(selectedGroup != null)
        {
            user.Groups.Add(selectedGroup.Name);
        }
        user.PasswordMustBeChanged = true;
        user.Roles = new List<string>();
        if(selectedRole != null)
        {
            user.Roles.Add(selectedRole.Name);
            if (selectedRole.Name == Roles.Auditor)
            {
                user.PasswordMustBeChanged = false;
            }
        }
    }

    private async Task Save()
    {
        try
        {
            if (actUser.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("U0001"), true);
            }
            if (AddMode)
            {
                SynchronizeUserData(actUser); 

                if (CheckValues())
                {
                    // insert new user to ldap
                    UserAddParameters parameters = new UserAddParameters
                    {
                        Email = actUser.Email, 
                        LdapId = actUser.LdapConnection.Id, 
                        Password = actUser.Password, 
                        UserDn = actUser.Dn,
                        TenantId = (actUser.Tenant != null ? actUser.Tenant.Id : 0),
                        PwChangeRequired = actUser.PasswordMustBeChanged
                    };
                    RestResponse<int> middlewareServerResponse = await middlewareClient.AddUser(parameters);
                    if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == 0)
                    {
                        DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("E5213"), true);
                    }
                    else
                    {
                        actUser.DbId = middlewareServerResponse.Data;
                        uiUsers.Add(actUser);
                        await AddUserToGroupsInLdap(actUser);
                        await AddUserToRolesInLdap(actUser);
                        AddMode = false;
                        EditMode = false;
                    }
                }
            }
            else
            {
                // Update existing user in ldap --> currently only email
                UserEditParameters parameters = new UserEditParameters {Email = actUser.Email, LdapId = actUser.LdapConnection.Id, UserId = actUser.DbId };
                RestResponse<bool> middlewareServerResponse = await middlewareClient.UpdateUser(parameters);
                if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
                {
                    DisplayMessageInUi(null, userConfig.GetText("update_user"), userConfig.GetText("E5214"), true);
                }
                else
                {
                    uiUsers[uiUsers.FindIndex(x => x.DbId == actUser.DbId)].Email = actUser.Email;
                    EditMode = false;
                }
            }
            AnalyseSampleUsers();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_user"), "", true);
        }
    }

    private bool CheckValues()
    {
        string errorMsg;
        if (actUser.Name == null || actUser.Name == "" || actUser.Password == null || actUser.Password == "" || actUser.Roles.Count == 0)
        {
            DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("E5211"), true);
            return false;
        }
        if (!PasswordPolicy.CheckPolicy(actUser.Password, globalConfig, userConfig, out errorMsg))
        {
            DisplayMessageInUi(null, userConfig.GetText("add_user"), errorMsg, true);
            return false;
        }
        if (actUser.LdapConnection.TenantLevel > 0 && (actUser.Tenant == null || !tenants.Exists(x => x.Name == actUser.Tenant.Name)))
        {
            DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("E5212"), true);
            return false;
        }
        if (uiUsers.Exists(x => x.Dn == actUser.Dn))
        {
            DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("E5210"), true);
            return false;
        }
        return true;
    }

    private async Task AddUserToGroupsInLdap(UiUser user)
    {
        try
        {
            foreach(string groupName in user.Groups)
            {
                UserGroup? group = groups.FirstOrDefault(x => x.Name == groupName);
                if (group != null)
                {
                    GroupAddDeleteUserParameters addUserParameters = new GroupAddDeleteUserParameters { GroupDn = group.Dn, UserDn = user.Dn };
                    RestResponse<bool> middlewareServerResponse = await middlewareClient.AddUserToGroup(addUserParameters);
                    if ((middlewareServerResponse.StatusCode != HttpStatusCode.OK) || (middlewareServerResponse.Data == false))
                    {
                        DisplayMessageInUi(null, userConfig.GetText("assign_user_to_group"), userConfig.GetText("E5242"), true);
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("assign_user_to_group"), "", true);
        }
    }

    private async Task AddUserToRolesInLdap(UiUser user)
    {
        try
        {
            foreach(string roleName in user.Roles)
            {
                Role? role = roles.FirstOrDefault(x => x.Name == roleName);
                if (role != null)
                {
                    RoleAddDeleteUserParameters parameters = new RoleAddDeleteUserParameters { Role = role.Dn, UserDn = user.Dn };
                    RestResponse<bool> middlewareServerResponse = await middlewareClient.AddUserToRole(parameters);
                    if ((middlewareServerResponse.StatusCode != HttpStatusCode.OK) || (middlewareServerResponse.Data == false))
                    {
                        DisplayMessageInUi(null, userConfig.GetText("assign_user_group_to_role"), userConfig.GetText("E5255"), true);
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("assign_user_group_to_role"), "", true);
        }
    }

    private void RequestDelete(UiUser user)
    {
        try
        {
            actUser = user;
            if (actUser.Dn == userConfig.User.Dn)
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_user"), userConfig.GetText("E5215"), true);
            }
            else
            {
                deleteMessage = userConfig.GetText("U5201") + actUser.Name + "?";
                if (!actUser.isInternal())
                {
                    deleteMessage += userConfig.GetText("U5202");
                }
                DeleteMode = true;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_user"), "", true);
        }
    }

    private async Task Delete()
    {
        try
        {
            // delete user from Ldap
            UserDeleteParameters parameters = new UserDeleteParameters
            { 
                LdapId = actUser.LdapConnection.Id,
                UserId = actUser.DbId
            };
            RestResponse<bool> middlewareServerResponse = await middlewareClient.DeleteUser(parameters);
            if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_user"), userConfig.GetText("E5216"), true);
            }
            else
            {
                uiUsers.Remove(actUser);
                DeleteMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_user"), "", true);
        }
        StateHasChanged();
    }

    private async Task CleanUpUser(UiUser user)
    {
        try
        {
            var Variables = new { id = user.DbId };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.AuthQueries.deleteUser, Variables)).DeletedId;
            if (delId == user.DbId)
            {
                uiUsers.Remove(user);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_user_local"), "", false);
        }
    }

    private void RequestResetPassword(UiUser user)
    {
        if(!(new DistName(user.Dn)).IsInternal())
        {
            DisplayMessageInUi(null, userConfig.GetText("reset_password"), userConfig.GetText("E5217"), true);
        }
        else
        {
            actUser = user;
            actUser.Password = "";
            ResetPasswordMode = true;
        }
    }

    private async Task ResetPassword()
    {
        try
        {
            string errorMsg = "";
            if (actUser.Password == null || actUser.Password == "")
            {
                DisplayMessageInUi(null, userConfig.GetText("reset_password"), userConfig.GetText("E5218"), true);
            }
            else if (!PasswordPolicy.CheckPolicy(actUser.Password, globalConfig, userConfig, out errorMsg))
            {
                DisplayMessageInUi(null, userConfig.GetText("reset_password"), errorMsg, true);
            }
            else
            {
                UserResetPasswordParameters parameters = new UserResetPasswordParameters 
                { 
                    LdapId = actUser.LdapConnection.Id, 
                    NewPassword = actUser.Password, 
                    UserId = actUser.DbId
                };
                RestResponse<string> middlewareServerResponse = await middlewareClient.SetPassword(parameters);
                if (middlewareServerResponse.StatusCode != HttpStatusCode.OK)
                {
                    DisplayMessageInUi(null, userConfig.GetText("reset_password"), userConfig.GetText("E5219"), true);
                }
                else
                {
                    if (middlewareServerResponse.Data != null)
                    {
                        errorMsg = middlewareServerResponse.Data;
                    }
                    if(errorMsg != "")
                    {
                        DisplayMessageInUi(null, userConfig.GetText("reset_password"), errorMsg, true);
                    }
                }
                ResetPasswordMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("reset_password"), "", true);
        }
    }

    private void RequestRemoveSampleData()
    {
        if (sampleUsers.Exists(user => user.DbId == userConfig.User.DbId))
        {
            sampleRemoveMessage = userConfig.GetText("E5220");
            sampleRemoveAllowed = false;
        }
        else
        {
            sampleRemoveMessage = userConfig.GetText("U5203");
            sampleRemoveAllowed = true;
        }
        SampleRemoveMode = true;
    }

    private async Task RemoveSampleData()
    {
        showSampleRemoveButton = false;
        SampleRemoveMode = false;
        workInProgress = true;
        foreach (var user in sampleUsers)
        {
            try
            {
                UserDeleteAllEntriesParameters parameters = new UserDeleteAllEntriesParameters { UserId = user.DbId };
                RestResponse<bool> middlewareServerResponse = await middlewareClient.RemoveUserFromAllEntries(parameters);
                if (middlewareServerResponse.StatusCode != HttpStatusCode.OK || middlewareServerResponse.Data == false)
                {
                    DisplayMessageInUi(null, userConfig.GetText("remove_sample_data"), userConfig.GetText("E5221"), true);
                    showSampleRemoveButton = true;
                }
                else
                {
                    actUser = user;
                    await Delete();
                }
            }
            catch (System.Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("remove_sample_data"), "", false);
            }
        }
        workInProgress = false;
        StateHasChanged();
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        SampleRemoveMode = false;
        ResetPasswordMode = false;
    }
}
