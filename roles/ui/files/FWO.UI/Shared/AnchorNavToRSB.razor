@using FWO.Basics
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable
@code {
    [Parameter]
    public FWO.Ui.Shared.TabSet TabSet { get; set; } = default!;

    [Parameter]
    public FWO.Ui.Data.CollapseState CollapseState { get; set; } = default!;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await ScrollToFragment();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await ScrollToFragment();
    }

    /// <returns>The html element id to an object in the right side bar.</returns>
    /// <summary>
    /// Expects the URI to contain link to rsb object in form of #goto-{obj-link}. Example URI: localhost/report#goto-report-m8-nwobj31473
    /// </summary>
    private string GetIdFromURI()
    {
        var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);
        var fragment = uri.Fragment;
        if (fragment.StartsWith("#goto-"))
        {
            // Handle text fragment (https://example.org/#test:~:text=foo)
            // https://github.com/WICG/scroll-to-text-fragment/
            var elementId = fragment.Substring(1);
            var index = elementId.IndexOf(":~:", StringComparison.Ordinal);
            if (index > 5)
            {
                elementId = elementId.Substring(5, index);
            }
            return elementId.Substring(5);
        }
        return "";
    }

    public async Task ScrollToFragment()
    {
        string elementId = GetIdFromURI();

        if (!string.IsNullOrEmpty(elementId))
        {
            var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);

            // need to check if recert page since tabs are different
            bool recertPage = uri.AbsolutePath == $"/{PageName.Certification}";

            if (elementId.StartsWith("all"))
                TabSet?.SetActiveTab(0);
            else if (elementId.StartsWith("report"))
                TabSet?.SetActiveTab(recertPage ? 0 : 1);
            else if (elementId.StartsWith("rule"))
                TabSet?.SetActiveTab(recertPage ? 1 : 2);
            else
                return;

            // remove chapternum from #goto-report-{reportId}-{type}{chapterNumber}x{id} in report html export
            if (elementId.StartsWith("report"))
                elementId = Regex.Replace(elementId, @"(nwobj|svc|user)\d+x(\d+)", "$1$2");

            CollapseState.Expand(elementId);
            
            bool foundObj = await JSRuntime.InvokeAsync<bool>("scrollIntoRSBView", elementId);

            if (foundObj)
            {
                // remove #goto-{obj-link} fragment from uri
                await JSRuntime.InvokeVoidAsync("removeUrlFragment");
            }
        }
    }
}