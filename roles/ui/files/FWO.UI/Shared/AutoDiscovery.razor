@using BlazorTable
@using FWO.Config.Api
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Api.Client
@using System.Text.Json;
@using FWO.Api.Client.Queries

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<PopUp Title="@(userConfig.GetText("autodiscovery") + headerText)" Show="@Display" Size=PopupSize.XLarge  OnClose="async () => await Close()">
    <Body>
        @if (Display)
        {
            @if(somethingToDo)
            {
                <h6>@(userConfig.GetText("managements"))</h6>
                <Table class="table table-bordered th-bg-secondary table-responsive" TableItem="Management" Items="managementsToDisplay" PageSize="0" ColumnReorder="true">
                    <Column TableItem="Management" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)">
                        <Template>
                            @if(!context.Ignore)
                            {
                                @if(context.Delete)
                                {
                                    @if(context.AwaitDevice)
                                    {
                                        <button type="button" class="btn btn-sm btn-warning" disabled>@(userConfig.GetText("disable"))</button>
                                        <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                                    }
                                    else
                                    {
                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                                            <Authorized Context="ctx">
                                                <button type="button" class="btn btn-sm btn-warning" @onclick="() => ChangeManagementState(context, true)">@(userConfig.GetText("disable"))</button>
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteManagement(context)">@(userConfig.GetText("delete"))</button>
                                            </Authorized>
                                            <NotAuthorized Context="ctx">
                                                <button type="button" class="btn btn-sm btn-warning" disabled>@(userConfig.GetText("disable"))</button>
                                                <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                                            </NotAuthorized> 
                                        </AuthorizeView>
                                    }
                                }
                                else
                                {
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                                        <Authorized Context="ctx">
                                            <button type="button" class="btn btn-sm btn-success" @onclick="() => ConfirmManagement(context)">@(userConfig.GetText("add"))</button>
                                        </Authorized>
                                        <NotAuthorized Context="ctx">
                                            <button type="button" class="btn btn-sm btn-success" disabled>@(userConfig.GetText("add"))</button>
                                        </NotAuthorized> 
                                    </AuthorizeView>
                                }
                            }
                        </Template>
                    </Column>
                    <Column TableItem="Management" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" />
                    <Column TableItem="Management" Title="@(userConfig.GetText("name"))" Field="(x => x.Name)" />
                    <Column TableItem="Management" Title="@(userConfig.GetText("type"))" Field="@(x => x.DeviceType.Id)">
                        <Template>
                            @(context.DeviceType.NameVersion())
                        </Template>
                    </Column>
                    <Column TableItem="Management" Title="@(userConfig.GetText("gateways"))" Field="@(x => x.DeviceType.Id)">
                        <Template>
                            @if(context.Devices.Count() > 0)
                            {
                                <Table class="table table-bordered th-bg-secondary table-responsive" TableItem="Device" Items="context.Devices" PageSize="0" ColumnReorder="true">
                                    <Column TableItem="Device" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)">
                                        <Template Context="Dev">
                                            @if(Dev.Relevant)
                                            {
                                                @if(Dev.Delete)
                                                {
                                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                                                        <Authorized Context="ctx">
                                                            <button type="button" class="btn btn-sm btn-warning" @onclick="() => ChangeDeviceState(Dev, true)">@(userConfig.GetText("disable"))</button>
                                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteDevice(Dev)">@(userConfig.GetText("delete"))</button>
                                                        </Authorized>
                                                        <NotAuthorized Context="ctx">
                                                            <button type="button" class="btn btn-sm btn-warning" disabled>@(userConfig.GetText("disable"))</button>
                                                            <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                                                        </NotAuthorized> 
                                                    </AuthorizeView>
                                                }
                                                else
                                                {
                                                    @if(Dev.AwaitMgmt)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-success" disabled>@(userConfig.GetText("add"))</button>
                                                    }
                                                    else
                                                    {                    
                                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                                                            <Authorized Context="ctx">
                                                                <button type="button" class="btn btn-sm btn-success" @onclick="() => ConfirmDevice(Dev)">@(userConfig.GetText("add"))</button>
                                                            </Authorized>
                                                            <NotAuthorized Context="ctx">
                                                                <button type="button" class="btn btn-sm btn-success" disabled>@(userConfig.GetText("add"))</button>
                                                            </NotAuthorized> 
                                                        </AuthorizeView>
                                                    }
                                                }
                                            }
                                        </Template>
                                    </Column>
                                    <Column TableItem="Device" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" />
                                    <Column TableItem="Device" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" />
                                </Table>
                            }
                        </Template>
                    </Column>
                </Table>
            }
            else if (refAlertText == "")
            {
                @(userConfig.GetText("nothing_more_to_change"))
            }
            @if(refAlertText != "")
            {
                @(refAlertText)
            } 
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if(actAlertId != null)
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                    <Authorized Context="ctx">
                        <button type="button" class="btn btn-sm btn-secondary" @onclick="async () => {await AcknowledgeAlert(actAlertId); await Close();}">@(userConfig.GetText("acknowledge"))</button>
                    </Authorized>
                    <NotAuthorized Context="ctx">
                        <button type="button" class="btn btn-sm btn-secondary" disabled>@(userConfig.GetText("acknowledge"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if(somethingToDo)
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.FwAdmin}")">
                    <Authorized Context="ctx">
                        <button type="button" class="btn btn-sm btn-warning" @onclick="async () => {await doAllChanges(); await Close();}">@(userConfig.GetText("do_all_changes"))</button>
                    </Authorized>
                    <NotAuthorized Context="ctx">
                        <button type="button" class="btn btn-sm btn-warning" disabled>@(userConfig.GetText("do_all_changes"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button type="button" class="btn btn-sm btn-secondary" @onclick="async () => await Close()">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<ConfirmDelete @bind-Display="DeleteManagementMode" PerformAction="DeleteManagement" Title="@userConfig.GetText("delete_management")" DeleteMessage="@deleteMessage"/>
<ConfirmDelete @bind-Display="DeleteDeviceMode" PerformAction="DeleteDevice" Title="@userConfig.GetText("delete_gateway")" DeleteMessage="@deleteMessage"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public List<ActionItem> Actions { get; set; } = new List<ActionItem>();

    [Parameter]
    public bool Display { get; set; }

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Closing { get; set; }

    private List<Management> managementsToDisplay { get; set; } = new List<Management>();
    private List<Management> existingManagements { get; set; } = new List<Management>();
    private List<Device> existingDevices { get; set; } = new List<Device>();
    private string headerText = "";
    private long? actAlertId = null;
    private string refAlertText = "";
    private bool firstCall = true;
    private bool somethingToDo = false;
    private bool DeleteManagementMode = false;
    private Management actManagement = new Management();
    private bool DeleteDeviceMode = false;
    private Device actDevice = new Device();
    private string deleteMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            existingDevices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("autodiscovery"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Display && firstCall)
        {
            await AnalyzeActions();
            await InvokeAsync(StateHasChanged);
            firstCall = false;
        }
    }

    private async Task Close()
    {
        Display = false; 
        firstCall = true; 
        await Closing.InvokeAsync(Display);
        await InvokeAsync(StateHasChanged);
    }

    private void Cancel()
    {
        DeleteManagementMode = false;
        DeleteDeviceMode = false;
    }

    private async Task AnalyzeActions()
    {
        try
        {
            existingManagements = await apiConnection.SendQueryAsync<List<Management>>(FWO.Api.Client.Queries.DeviceQueries.getManagementsDetails);
            managementsToDisplay = new List<Management>();
            headerText = "";
            actAlertId = null;
            refAlertText = "";
            somethingToDo = (Actions.Count() > 0);
            bool singleAlert = (Actions.Count() == 1 && Actions[0].AlertId != null);

            foreach(ActionItem action in Actions)
            {
                ActionCode code = (ActionCode)Enum.Parse(typeof(ActionCode), action.ActionType ?? throw new Exception($"Missing Action Type!"));
                if(singleAlert)
                {
                    actAlertId = action.AlertId;
                    headerText = $"  {userConfig.GetText("alert")}: {action.AlertId}  {userConfig.GetText("action")}: {code.ToString()}";
                }
                switch(code)
                {
                    case ActionCode.AddManagement:
                        Management newMgmt = JsonSerializer.Deserialize<Management>((action.JsonData ?? throw new Exception($"Missing Management Data!")).ToString() ?? throw new Exception($"Could not convert Management Data to string!")) ?? throw new Exception($"Management Data not converted!");
                        if(checkManagementCreateToBeDone(newMgmt))
                        {
                            newMgmt.ActionId = action.Number;
                            newMgmt.Ignore = false;
                            managementsToDisplay.Add(newMgmt);
                        }
                        break;
                    case ActionCode.ReactivateManagement:
                        Management reactMgmt = existingManagements.FirstOrDefault(x => x.Id == action.ManagementId) ?? throw new Exception($"Management doesn't exist anymore!");
                        if(reactMgmt.ImportDisabled)
                        {
                            reactMgmt.ActionId = action.Number;
                            reactMgmt.Ignore = false;
                            managementsToDisplay.Add(reactMgmt);
                        }
                        else
                        {
                            // already reactivated
                            DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E7001"), true);
                        }
                        break;
                    case ActionCode.DeleteManagement:
                        Management? mgmtToDelete = existingManagements.FirstOrDefault(x => x.Id == action.ManagementId);
                        if(mgmtToDelete != null)
                        {
                            mgmtToDelete.ActionId = action.Number;
                            mgmtToDelete.Delete = true;
                            mgmtToDelete.Ignore = false;
                            if(mgmtToDelete.Devices.Count() > 0)
                            {
                                mgmtToDelete.AwaitDevice = true;
                                if(action.AlertId != null)
                                {
                                    refAlertText = userConfig.GetText("E7003");
                                }
                            }
                            managementsToDisplay.Add(mgmtToDelete);
                        }
                        else
                        {
                            // already deleted
                            DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E7001"), true);
                        }
                        break;
                    case ActionCode.AddGatewayToNewManagement:
                        Device newGateway = JsonSerializer.Deserialize<Device>((action.JsonData ?? throw new Exception($"Missing Gateway Data!")).ToString() ?? throw new Exception($"Could not convert Gateway Data to string!")) ?? throw new Exception($"Gateway Data not converted!");
                        newGateway.Delete = false;
                        newGateway.Relevant = true;
                        newGateway.ActionId = action.Number;
                        newGateway.AwaitMgmt = true;
                        Management? lastMgmt = managementsToDisplay.LastOrDefault();
                        if(lastMgmt != null)
                        {
                            appendDevToManagement(newGateway, ref lastMgmt);
                        }
                        else
                        {
                            int mgmtId = await getResultFromAlert(action.RefAlertId);
                            if(mgmtId != 0)
                            {
                                // action from referenced alert has been done 
                                Management? exMgmt = existingManagements.FirstOrDefault(x => x.Id == mgmtId);
                                if (exMgmt != null)
                                {
                                    appendDevToManagement(newGateway, ref exMgmt);
                                    exMgmt.Ignore = true;
                                    managementsToDisplay.Add(exMgmt);
                                }
                            }
                            else
                            {
                                refAlertText = userConfig.GetText("E7002") + action.RefAlertId;
                            }
                        }
                        break;
                    case ActionCode.AddGatewayToExistingManagement:
                        Device newGatewayToEx = JsonSerializer.Deserialize<Device>((action.JsonData ?? throw new Exception($"Missing Gateway Data!")).ToString() ?? throw new Exception($"Could not convert Gateway Data to string!")) ?? throw new Exception($"Gateway Data not converted!");
                        if (checkGatewayCreateToBeDone(newGatewayToEx))
                        {
                            appendToRightManagement(newGatewayToEx, action);
                        }
                        break;
                    case ActionCode.ReactivateGateway:
                        Device gatewayToReact = existingDevices.FirstOrDefault(x => x.Id == action.DeviceId) ?? throw new Exception($"Gateway doesn't exist anymore!");
                        if (gatewayToReact.ImportDisabled)
                        {
                            appendToRightManagement(gatewayToReact, action);
                        }
                        else
                        {
                            // already reactivated
                            DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E7001"), true);
                        }
                        break;
                    case ActionCode.DeleteGateway:
                        Management? mgmtToCut = managementsToDisplay.FirstOrDefault(x => x.Id == action.ManagementId);
                        if(mgmtToCut != null)
                        {
                            markDeviceForDelete(ref mgmtToCut, action);
                        }
                        else
                        {
                            mgmtToCut = existingManagements.FirstOrDefault(x => x.Id == action.ManagementId);
                            if(mgmtToCut != null)
                            {
                                markDeviceForDelete(ref mgmtToCut, action);
                                mgmtToCut.Ignore = true;
                                managementsToDisplay.Add(mgmtToCut);
                            }
                        }
                        break;
                    case ActionCode.WaitForTempLoginFailureToPass:

                        break;
                }
            }
            foreach(ActionItem actToDelete in Actions.Where(x => x.Done == true))
            {
                Actions.Remove(actToDelete);
            }
            if(managementsToDisplay.Count == 0)
            {
                somethingToDo = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("analyze_actions"), "", true);
        }
    }

    private void appendDevToManagement(Device dev, ref Management management)
    {
        List<Device> exDevs = management.Devices.ToList();
        exDevs.Add(dev);
        management.Devices = exDevs.ToArray();
    }

    private void appendToRightManagement(Device dev, ActionItem action)
    {
        dev.ActionId = action.Number;
        dev.Delete = false;
        dev.Relevant = true;
        Management? mgmtToExpand = managementsToDisplay.FirstOrDefault(x => x.Id == action.ManagementId);
        if(mgmtToExpand != null)
        {
            appendDevToManagement(dev, ref mgmtToExpand);
        }
        else
        {
            mgmtToExpand = existingManagements.FirstOrDefault(x => x.Id == action.ManagementId);
            if(mgmtToExpand != null)
            {
                appendDevToManagement(dev, ref mgmtToExpand);
                mgmtToExpand.Ignore = true;
                managementsToDisplay.Add(mgmtToExpand);
            }
        }
    }

    private async Task<int> getResultFromAlert(long? alertId)
    {
        int mgmtId = 0;
        try
        {
            if(alertId != null)
            {
                Alert alert = await apiConnection.SendQueryAsync<Alert>(MonitorQueries.getAlertById, new { alertId = (long)alertId });
                if(alert.ManagementId != null)
                {
                    mgmtId = (int)alert.ManagementId;
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("analyze_actions"), "", true);
        }
        return mgmtId;
    }

    private bool checkManagementCreateToBeDone(Management management)
    {
        if (existingManagements.FirstOrDefault(exMgmt => exMgmt.Name == management.Name && exMgmt.ConfigPath == management.ConfigPath 
            && exMgmt.SuperManagerId == management.SuperManagerId) != null)
        {
            // already created
            DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E7001"), true);
            return false;
        }
        return true;
    }

    private bool checkGatewayCreateToBeDone(Device device)
    {
        if (existingDevices.FirstOrDefault(existingDevice => existingDevice.Name == device.Name 
            && existingDevice.Management.Id == device.Management.Id 
            && existingDevice.LocalRulebase == device.LocalRulebase) != null)
        {
            // already created
            DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E7001"), true);
            return false;
        }
        return true;
    }

    private void markDeviceForDelete(ref Management mgmtToCut, ActionItem action)
    {
        List<Device> exDevs = mgmtToCut.Devices.ToList();
        Device? devToDelete = exDevs.FirstOrDefault(x => x.Id == action.DeviceId);
        if(devToDelete != null)
        {
            devToDelete.Delete = true;
            devToDelete.Relevant = true;
            devToDelete.ActionId = action.Number;
            devToDelete.Management.Id = mgmtToCut.Id;
            mgmtToCut.Devices = exDevs.ToArray();
        }
        else
        {
            // already deleted
            DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E7001"), true);
        }
    }

    private async Task ConfirmManagement(Management discMgmt)
    {
        try
        {
            int devCounter = 0;
            Management? exMgmt = existingManagements.FirstOrDefault(exMgmt => exMgmt.Name == discMgmt.Name && exMgmt.ConfigPath == discMgmt.ConfigPath 
                && exMgmt.SuperManagerId == discMgmt.SuperManagerId);
            if (exMgmt != null)
            {
                if (!exMgmt.ImportDisabled)
                {
                    DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E5106"), true);
                    return;
                }
                await ChangeManagementState(exMgmt, false);
                devCounter = managementsToDisplay[managementsToDisplay.FindIndex(x => x.Id == exMgmt.Id)].Devices.Count();
            }
            else
            {
                var Variables = new
                {
                    name = discMgmt.Name,
                    devTypeId = discMgmt.DeviceType.Id,
                    hostname = discMgmt.Hostname,
                    importCredentialId = discMgmt.ImportCredential.Id,
                    port = discMgmt.Port,
                    importDisabled = discMgmt.ImportDisabled,
                    forceInitialImport = discMgmt.ForceInitialImport,
                    hideInUi = discMgmt.HideInUi,
                    configPath = discMgmt.ConfigPath,
                    domainUid = discMgmt.DomainUid,
                    superManager = discMgmt.SuperManagerId,
                    importerHostname = discMgmt.ImporterHostname,
                    debugLevel = discMgmt.DebugLevel,
                    comment = discMgmt.Comment
                };
                ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.DeviceQueries.newManagement, Variables)).ReturnIds;
                if (returnIds != null)
                {
                    discMgmt.Id = returnIds[0].NewId;
                    // As we know now the ManagementId we can activate following device inserts
                    devCounter = activateDeviceChanges(discMgmt);
                    existingManagements.Add(discMgmt);
                }
            }
            discMgmt.Ignore = true;
            if(devCounter == 0)
            {
                managementsToDisplay.Remove(discMgmt);
                if(managementsToDisplay.Count == 0)
                {
                    somethingToDo = false;
                }
            }
            await AcknowledgeAction(discMgmt.ActionId);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_management"), "", true);
        }
    }

    private int activateDeviceChanges(Management discMgmt)
    {
        bool goAhead = true;
        int devCounter = 0;
        foreach(ActionItem act in Actions.Where(x => x.Number > discMgmt.ActionId))
        {
            if(goAhead && act.ActionType == ActionCode.AddGatewayToNewManagement.ToString())
            {
                act.ManagementId = discMgmt.Id;
                act.ActionType = ActionCode.AddGatewayToExistingManagement.ToString();
                foreach(Device dev in managementsToDisplay[managementsToDisplay.FindIndex(x => x.Id == act.ManagementId)].Devices)
                {
                    dev.AwaitMgmt = false;
                    dev.Management.Id = discMgmt.Id;
                }
                devCounter++;
            }
            else
            {
                goAhead = false;
            }
        }
        return devCounter;
    }

    private async Task ConfirmDevice(Device discoveredDevice)
    {
        try
        {
            Device? exDev = existingDevices.FirstOrDefault(existingDevice => existingDevice.Name == discoveredDevice.Name 
                && existingDevice.Management.Id == discoveredDevice.Management.Id 
                && existingDevice.LocalRulebase == discoveredDevice.LocalRulebase);
            if(exDev != null)
            {
                if(!exDev.ImportDisabled)
                {
                    DisplayMessageInUi(null, "AutoDiscovery", userConfig.GetText("E5107"), true);
                    return;
                }
                else
                {
                    // reactivate device
                    await ChangeDeviceState(exDev, false);
                }
            }
            else
            {    
                // insert new device
                var Variables = new
                {
                    name = discoveredDevice.Name,
                    devTypeId = discoveredDevice.DeviceType.Id,
                    managementId = discoveredDevice.Management.Id,
                    localRulebase = discoveredDevice.LocalRulebase,
                    globalRulebase = discoveredDevice.GlobalRulebase,
                    package = discoveredDevice.Package,
                    importDisabled = discoveredDevice.ImportDisabled,
                    hideInUi = discoveredDevice.HideInUi,
                    comment = discoveredDevice.Comment
                };
                ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.DeviceQueries.newDevice, Variables)).ReturnIds;
                if (returnIds == null)
                {
                    DisplayMessageInUi(null, userConfig.GetText("save_gateway"), userConfig.GetText("E5112"), true);
                }
                else
                {
                    discoveredDevice.Id = returnIds[0].NewId;
                    existingDevices.Add(discoveredDevice);
                    await addDeviceToTenant0(discoveredDevice.Id);
                }
            }
            discoveredDevice.Relevant = false;
            Management mgmtToIgnore = managementsToDisplay[managementsToDisplay.FindIndex(x => x.Id == discoveredDevice.Management.Id)];
            if(mgmtToIgnore.Devices.FirstOrDefault(y => y.Relevant == true) == null)
            {
                managementsToDisplay.Remove(mgmtToIgnore);
                if(managementsToDisplay.Count == 0)
                {
                    somethingToDo = false;
                }
            }
            await AcknowledgeAction(discoveredDevice.ActionId);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_gateway"), "", true);
        }
    }

    private void RequestDeleteManagement(Management management)
    {
        actManagement = management;
        deleteMessage = userConfig.GetText("U5101") + actManagement.Name + "? " + userConfig.GetText("U7002");
        DeleteManagementMode = true;
    }

    private void RequestDeleteDevice(Device device)
    {
        actDevice = device;
        deleteMessage = userConfig.GetText("U5103") + actDevice.Name + "? " + userConfig.GetText("U7002");
        DeleteDeviceMode = true;
    }

    private async Task DeleteManagement()
    {
        try
        {
            if (actManagement.Devices != null && actManagement.Devices.Length > 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_management"), userConfig.GetText("E5101"), true);
            }
            else
            {
                var Variables = new { id = actManagement.Id };
                int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.deleteManagement, Variables)).DeletedId;
                if (delId == actManagement.Id)
                {
                    existingManagements.Remove(actManagement);
                    managementsToDisplay.Remove(actManagement);
                    if(managementsToDisplay.Count == 0)
                    {
                        somethingToDo = false;
                    }
                    await AcknowledgeAction(actManagement.ActionId);
                    DeleteManagementMode = false;
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_management"), "", true);
        }
        StateHasChanged();
    }

    private async Task ChangeManagementState(Management management, bool disable)
    {
        try
        {
            var Variables = new { id = management.Id, importDisabled = disable };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.changeManagementState, Variables)).UpdatedId;
            if (udId == management.Id)
            {
                if(disable)
                {
                    managementsToDisplay.Remove(management);
                    if(managementsToDisplay.Count == 0)
                    {
                        somethingToDo = false;
                    }
                }
                await AcknowledgeAction(management.ActionId);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_management_state"), "", true);
        }
    }

    private async Task DeleteDevice()
    {
        try
        {
            var Variables = new { id = actDevice.Id };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.deleteDevice, Variables)).DeletedId;
            if (delId == actDevice.Id)
            {
                // remove device from existing management
                removeDevFromExMgmt(actDevice, false);
                existingDevices.Remove(actDevice);
                await AcknowledgeAction(actDevice.ActionId);
                DeleteDeviceMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_gateway"), "", true);
        }
        StateHasChanged();
    }

    private async Task ChangeDeviceState(Device device, bool disable)
    {
        try
        {
            var Variables = new { id = device.Id, importDisabled = disable };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.DeviceQueries.changeDeviceState, Variables)).UpdatedId;
            if (udId == device.Id)
            {
                if(disable)
                {
                    removeDevFromExMgmt(device, true);
                    Device? dev = existingDevices.FirstOrDefault(x => x.Id == device.Id);
                    if(dev != null)
                    {
                        dev.ImportDisabled = true;
                    }
                }
                await AcknowledgeAction(device.ActionId);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_management_state"), "", true);
        }
    }

    private void removeDevFromExMgmt(Device device, bool disable)
    {
        Management? hostMgmt = existingManagements.FirstOrDefault(x => x.Id == device.Management.Id);
        if(hostMgmt != null)
        {
            List<Device> devs = hostMgmt.Devices.ToList();
            Device? dev = devs.FirstOrDefault(x => x.Id == device.Id);
            if(dev != null)
            {
                if(disable)
                {
                    dev.ImportDisabled = true;
                }
                else
                {
                    devs.Remove(dev);
                }
            }
            if(devs.FirstOrDefault(x => x.ImportDisabled == false) == null)
            {
                removeFromDisplayedMgmt(device);
            }
        }
    }

    private void removeFromDisplayedMgmt(Device device)
    {
        Management mgmtToDisplay = managementsToDisplay[managementsToDisplay.FindIndex(x => x.Id == device.Management.Id)];
        removeDevFromManagement(device, ref mgmtToDisplay);
        if(mgmtToDisplay.Ignore)
        {
            managementsToDisplay.Remove(mgmtToDisplay);
            if(managementsToDisplay.Count == 0)
            {
                somethingToDo = false;
            }
        }
        else
        {
            managementsToDisplay[managementsToDisplay.FindIndex(x => x.Id == device.Management.Id)].AwaitDevice = false;
        }
    }

    private void removeDevFromManagement(Device dev, ref Management management)
    {
        List<Device> exDevs = management.Devices.ToList();
        exDevs.Remove(dev);
        management.Devices = exDevs.ToArray();
    }

    public async Task AcknowledgeAction(long actionId)
    {
        try
        {
            ActionItem? actToDelete = Actions.FirstOrDefault(x => x.Number == actionId);
            if (actToDelete != null)
            {
                actToDelete.Done = true;
                if(actToDelete.AlertId != null)
                {
                    await AcknowledgeAlert(actToDelete.AlertId);
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("acknowledge_action"), "", true);
        }
    }

    public async Task AcknowledgeAlert(long? alertId)
    {
        try
        {
            if(alertId != null)
            {
                var Variables = new 
                { 
                    id = alertId,
                    ackUser = userConfig.User.DbId,
                    ackTime = DateTime.Now
                };
                await apiConnection.SendQueryAsync<ReturnId>(MonitorQueries.acknowledgeAlert, Variables);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("acknowledge_alert"), "", true);
        }
    }

    private async Task addDeviceToTenant0(int deviceId)
    {
        try
        {
            var Variables = new { tenantId = 1, deviceId = deviceId };
            await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.AuthQueries.addDeviceToTenant, Variables);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_device_to_tenant0"), "", false);
        }
    }

    private async Task doAllChanges()
    {
        try
        {
            List<Management> managementsToDisplayCopy = new List<Management>(managementsToDisplay); // original List will be changed inbetween
            foreach(Management management in managementsToDisplayCopy)
            {
                foreach(Device device in management.Devices)
                {
                    if(device.Relevant && device.Delete)
                    {
                        await ChangeDeviceState(device, true);
                    }
                }
                if(!management.Ignore)
                {
                    if (management.Delete)
                    {
                        await ChangeManagementState(management, true);
                    }
                    else
                    {
                        await ConfirmManagement(management);
                    }
                }
                foreach(Device device in management.Devices)
                {
                    if(device.Relevant && !device.Delete)
                    {
                        device.Management.Id = management.Id;
                        await ConfirmDevice(device);
                    }
                }
            }
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("do_all_changes"), "", false);
        }
    }
}
