@using FWO.Ui.Data
@using FWO.Data.Modelling
@using NetTools
@using System.Net
@using System.Text.Json

@inject UserConfig userConfig
@inject ApiConnection apiConnection

<div class="row">
    <div class="col-sm-8">
        <AuthorizeView Roles="@AuthorizedRoles">
            <Authorized>
                <label class="btn btn-sm @(ImportDisabled ? "btn-primary" : "btn-success")" for="fileUpload">
                    @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Add))
                    <span class="ms-2">@(userConfig.GetText("add"))</span>
                </label>
                <InputFile id="fileUpload" hidden accept=".csv" OnChange="@SingleUpload" />
                @if (InputFileChangeEventArgs is not null && !string.IsNullOrEmpty(InputFileChangeEventArgs.File.Name))
                {
                    <label class="d-inline">@InputFileChangeEventArgs.File.Name</label>
                }
                <button type="button" disabled="@(Loading || ImportDisabled)" class="btn btn-sm @(ImportDisabled ? "btn-primary" : "btn-success") mt-2 w-100" @onclick="ImportCSV">
                    @if (Loading)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
                        </div>
                    }
                    else
                    {
                        @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import))
                    }
                    <span class="ms-1">@(userConfig.GetText("import"))</span>
                </button>
                @if (ShowAlert)
                {
                    <div class="alert alert-warning mt-2" role="alert">
                        <span>@userConfig.GetText("E7014")</span>
                    </div>
                }
            </Authorized>
            <NotAuthorized>
                <button type="button" disabled class="btn btn-sm btn-primary">
                    <span class="ms-2">
                        @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Add))
                        @(userConfig.GetText("add"))
                    </span>
                </button>
                <button type="button" disabled class="btn btn-sm btn-primary mt-2 w-100">
                    @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import))
                    <span class="ms-1">@(userConfig.GetText("import"))</span>
                </button>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code {
    private bool ShowAlert { get; set; }
    InputFileChangeEventArgs? InputFileChangeEventArgs;

    private bool ImportDisabled { get; set; } = true;
    private bool Loading { get; set; }

    [Parameter, EditorRequired]
    public string? AuthorizedRoles { get; set; }

    [Parameter]
    public EventCallback<(Exception, string?)> OnAddAppServerError { get; set; }

    [Parameter]
    public EventCallback<string> OnAddAppServerWarning { get; set; }

    [Parameter]
    public EventCallback OnImportSuccess { get; set; }

    private List<AppServerType> AppServerTypes = new();

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(AuthorizedRoles))
        {
            throw new UnauthorizedAccessException($"Parameter {nameof(AuthorizedRoles)} cannot be empty!");
        }

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        try
        {
            if (userConfig.ModAppServerTypes != "")
            {
                AppServerTypes = JsonSerializer.Deserialize<List<AppServerType>>(userConfig.ModAppServerTypes) ?? new();
            }
        }
        catch (Exception) { }
    }

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        ImportDisabled = true;
        InputFileChangeEventArgs = e;
        ShowAlert = false;

        if (InputFileChangeEventArgs.FileCount == 0)
            return;

        if (!e.File.Name.EndsWith(".csv"))
        {
            ShowAlert = true;
            return;
        }

        ImportDisabled = false;
    }

    private async Task ImportCSV()
    {
        if (ImportDisabled || InputFileChangeEventArgs is null)
            return;

        if (InputFileChangeEventArgs.File is null)
            return;

        Loading = true;
        FileUploadService fileUploadService = new(apiConnection, userConfig);

        try
        {
            await fileUploadService.ReadFileToBytes(InputFileChangeEventArgs);
        }
        catch (Exception ex)
        {
            Loading = false;
            await OnAddAppServerError.InvokeAsync((ex, $"{userConfig.GetText("file_upload_failed")} {ex.Message}"));
            return;
        }

        List<Exception>? importErrors = await fileUploadService.ImportUploadedData(FileUploadCase.ImportAppServerFromCSV, InputFileChangeEventArgs.File.Name ?? "noName");

        if (importErrors.Count > 0)
        {
            Exception exception = importErrors.First();
            string message = $"{userConfig.GetText("import_finished_witherrors")}({importErrors.Count}). {exception.Message}";
            await OnAddAppServerWarning.InvokeAsync(message);
        }
        else
        {
            await OnImportSuccess.InvokeAsync();
        }
        Loading = false;
    }
}
