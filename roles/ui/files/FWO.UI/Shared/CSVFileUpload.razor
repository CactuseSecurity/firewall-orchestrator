@using FWO.Data.Modelling
@using FWO.Services.EventMediator.Events
@using FWO.Services.EventMediator.Interfaces
@using FWO.Ui.Data
@using System.Text.Json

@inject UserConfig UserConfig
@inject GlobalConfig GlobalConfig
@inject ApiConnection ApiConnection
@inject IEventMediator EventMediator

<div class="row">
    <div class="col-sm-8">
        <AuthorizeView Roles="@AuthorizedRoles">
            <Authorized>
                <label class="btn btn-sm @(UploadDisabled ? "btn-primary" : "btn-success")" for="fileUpload">
                    @(ModellingHandlerBase.DisplayButton(UserConfig, "select_file", Icons.Add, "select_file"))
                </label>
                <InputFile id="fileUpload" hidden accept="@SupportedFileFormats" OnChange="@SingleUpload" />
                @if(InputFileChangeEventArgs is not null && !string.IsNullOrEmpty(InputFileChangeEventArgs.File.Name))
                {
                    <label class="d-inline">@InputFileChangeEventArgs.File.Name</label>
                }
                <button type="button" disabled="@(Loading || UploadDisabled)" class="btn btn-sm @(UploadDisabled ? "btn-primary" : "btn-success") mt-2 w-100" @onclick="ImportCSV">
                    @if(Loading)
                    {
                        <Loading/>
                    }
                    <span class="ms-1">@(UserConfig.GetText("import"))</span>
                </button>
            </Authorized>
            <NotAuthorized>
                <button type="button" disabled class="btn btn-sm btn-primary">
                    <span class="ms-2">
                        @(ModellingHandlerBase.DisplayButton(UserConfig, "select_file", Icons.Add, "select_file"))
                    </span>
                </button>
                <button type="button" disabled class="btn btn-sm btn-primary mt-2 w-100">
                    @(ModellingHandlerBase.DisplayButton(UserConfig, "import", Icons.Import, "import"))
                </button>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    required public string? AuthorizedRoles { get; set; }

    [Parameter, EditorRequired]
    required public string SupportedFileFormats { get; set; } = "";

    private InputFileChangeEventArgs? InputFileChangeEventArgs;
    private bool UploadDisabled { get; set; } = true;
    private bool Loading { get; set; }

    private List<AppServerType> AppServerTypes = new();

    protected override void OnParametersSet()
    {
        if(string.IsNullOrWhiteSpace(AuthorizedRoles))
            throw new UnauthorizedAccessException($"Parameter {nameof(AuthorizedRoles)} cannot be empty!");

        if(string.IsNullOrWhiteSpace(SupportedFileFormats))
            throw new ArgumentNullException($"Parameter {nameof(SupportedFileFormats)} cannot be empty!");

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        try
        {
            if(UserConfig.ModAppServerTypes != "")
            {
                AppServerTypes = JsonSerializer.Deserialize<List<AppServerType>>(UserConfig.ModAppServerTypes) ?? new();
            }
        }
        catch(Exception) { }
    }

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        UploadDisabled = true;
        InputFileChangeEventArgs = e;

        if(InputFileChangeEventArgs.FileCount == 0)
            return;

        UploadDisabled = false;
    }

    private async Task ImportCSV()
    {
        if(UploadDisabled || InputFileChangeEventArgs is null)
            return;

        if(InputFileChangeEventArgs.File is null)
            return;

        Loading = true;

        FileUploadService fileUploadService = new(ApiConnection, UserConfig, SupportedFileFormats, GlobalConfig, EventMediator);

        FileUploadEventArgs fileUploadEventArgs = await fileUploadService.ReadFileToBytes(InputFileChangeEventArgs);

        if(!fileUploadEventArgs.Success)
        {
            Loading = false;
            return;
        }

        await fileUploadService.ImportAppServersFromCSV(InputFileChangeEventArgs.File.Name ?? "noName");

        Loading = false;
    }
}