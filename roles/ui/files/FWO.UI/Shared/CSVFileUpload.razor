@using FWO.Api.Client
@using FWO.Api.Client.Data
@using FWO.Api.Client.Queries
@using FWO.Api.Data
@using FWO.Config.File
@using FWO.Basics
@using FWO.Ui.Data
@using NetTools
@using System.Net
@using System.Text.Json
@using FWO.Services
@inject UserConfig userConfig


<div class="row">
    <div class="col-sm-8">
        <label class="btn btn-sm @(ImportDisabled ? "btn-primary" : "btn-success")" for="fileUpload">
            @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Add))
            <span class="ms-2">@(userConfig.GetText("add"))</span>
        </label>
        <InputFile id="fileUpload" hidden accept=".csv" OnChange="@SingleUpload" />
        @if (InputFileChangeEventArgs is not null && !string.IsNullOrEmpty(InputFileChangeEventArgs.File.Name))
        {
            <label class="d-inline">@InputFileChangeEventArgs.File.Name</label>
        }
        <button type="button" disabled="@(Loading || ImportDisabled)" class="btn btn-sm @(ImportDisabled ? "btn-primary" : "btn-success") mt-2 w-100" @onclick="LoadCSV">
            @if (Loading)
            {
                <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
                    </div>
            }
            else
            {
                @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import))
            }            
            <span class="ms-1">@(userConfig.GetText("import"))</span>
        </button>
        @if (ShowAlert)
        {
            <div class="alert alert-warning mt-2" role="alert">
                <span>@userConfig.GetText("E7014")</span>
            </div>
        }
    </div>
</div>
@code {
    private bool ShowAlert { get; set; }
    InputFileChangeEventArgs? InputFileChangeEventArgs;

    private bool ImportDisabled { get; set; } = true;
    private bool Loading { get; set; }

    [Parameter]
    public EventCallback<(Exception, string?)> OnAddAppServerError { get; set; }

    [Parameter]
    public EventCallback<string> OnAddAppServerWarning { get; set; }

    [Parameter]
    public EventCallback OnImportSuccess { get; set; }

    [Parameter]
    public ApiConnection? ApiConnection { get; set; }

    private List<AppServerType> AppServerTypes = new();

    protected override void OnInitialized()
    {
        try
        {
            if (userConfig.ModAppServerTypes != "")
            {
                AppServerTypes = JsonSerializer.Deserialize<List<AppServerType>>(userConfig.ModAppServerTypes) ?? new();
            }
        }
        catch (Exception) { }
    }

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        ImportDisabled = true;
        InputFileChangeEventArgs = e;
        ShowAlert = false;

        if (InputFileChangeEventArgs.FileCount == 0)
            return;

        if (!e.File.Name.EndsWith(".csv"))
        {
            ShowAlert = true;
            return;
        }

        ImportDisabled = false;
    }

    private async Task LoadCSV()
    {
        if (ImportDisabled || InputFileChangeEventArgs is null)
            return;

        if (InputFileChangeEventArgs.File is null)        
            return;        

        Loading = true;

        byte[]? bytes;

        try
        {
            using MemoryStream ms = new MemoryStream();
            await InputFileChangeEventArgs.File.OpenReadStream().CopyToAsync(ms);
            bytes = ms.ToArray();
        }
        catch (Exception ex)
        {
            Loading = false;
            await OnAddAppServerError.InvokeAsync((ex, $"{userConfig.GetText("file_upload_failed")} {ex.Message}"));
            return;
        }

        string text = System.Text.Encoding.UTF8.GetString(bytes);
        string[] lines = text.Split('\r');

        List<Exception>? importErrors = [];

        foreach (string tmpLine in lines)
        {
            string line = tmpLine;

            string[]? entries;

            if (IsHeader(line))
                continue;

            if (!TryGetEntries(line, ';', out entries) && !TryGetEntries(line, ',', out entries))
                continue;

            CSVAppServerImportModel appServer = new()
                {
                    AppServerName = entries[0],
                    AppID = entries[1],
                    AppServerTyp = entries[2],
                    AppIPRangeStart = entries[3]
                };

            if (appServer.AppIPRangeStart.TryGetNetmask(out string netmask))
            {
                (string Start, string End) ip = appServer.AppIPRangeStart.CidrToRangeString();
                appServer.AppIPRangeStart = ip.Start;
                appServer.AppIPRangeEnd = ip.End;
            }
            else if (appServer.AppIPRangeStart.TrySplit('-', 1, out string ipEnd) && IPAddressRange.TryParse(appServer.AppIPRangeStart, out IPAddressRange ipRange))
            {
                appServer.AppIPRangeStart = ipRange.Begin.ToString();
                appServer.AppIPRangeEnd = ipRange.End.ToString();
            }
            else
            {
                appServer.AppIPRangeEnd = appServer.AppIPRangeStart;
            }

            (bool importSuccess, Exception? error) = await AddAppServerToDb(appServer);

            if (!importSuccess && error is not null)
                importErrors.Add(error);
        }

        if (importErrors.Count > 0)
        {
            Exception exception = importErrors.First();
            string message = $"{userConfig.GetText("import_finished_witherrors")}({importErrors.Count}). {exception.Message}";

            await OnAddAppServerWarning.InvokeAsync(message);
        }
        else
        {
            await OnImportSuccess.InvokeAsync();
        }

        Loading = false;
    }

    private bool TryGetEntries(string line, char separator, out string[]? entries)
    {
        entries = null;

        if (line.StartsWith("\n"))
            line = line.Remove(0, 1);

        entries = line.Split(separator);

        if (entries.Length < 3)
            return false;

        for (int i = 0; i < entries.Length; i++)
        {
            string entry = entries[i].Trim('"');
            entries[i] = entry;
        }

        return true;
    }

    private bool IsHeader(string lineText)
    {
        bool splitOnSemicolon = lineText.TrySplit(';', out int splitLength);

        string[] columns;

        if (!splitOnSemicolon)
        {
            bool splitOnComma = lineText.TrySplit(',', out splitLength);

            if (!splitOnComma)
                return false;

            columns = lineText.Split(',');
        }
        else
        {
            columns = lineText.Split(';');
        }

        return ( columns.Length == 4
               && columns[0].Trim('"') == "App-Server-Name"
               && columns[1].Trim('"') == "External-App-ID"
               && columns[2].Trim('"') == "App-Server-Typ"
               && columns[3].Trim('"') == "App-IP-Address-Range" );

    }

    private async Task<(bool, Exception?)> AddAppServerToDb(CSVAppServerImportModel appServer)
    {
        try
        {
            AppServerType? appServerType = AppServerTypes.FirstOrDefault(_ => _.Name == appServer.AppServerTyp);

            if (appServerType is null)
            {
                return new(false, new Exception($"{userConfig.GetText("owner_appservertype_notfound")} At: {appServer.AppServerName}/{appServer.AppID}"));
            }

            List<OwnerIdModel> ownerIds = await ApiConnection.SendQueryAsync<List<OwnerIdModel>>(OwnerQueries.getOwnerId, new { externalAppId = appServer.AppID });

            if (ownerIds is null || !ownerIds.Any())
            {
                return new(false, new Exception($"{userConfig.GetText("owner_appserver_notfound")} At: {appServer.AppServerName}/{appServer.AppID}"));
            }

            var Variables = new
            {
                name = appServer.AppServerName,
                appId = ownerIds.First().Id,
                ip = appServer.AppIPRangeStart,
                ipEnd = appServer.AppIPRangeEnd,
                importSource = GlobalConst.kManual,
                customType = appServerType.Id
            };

            ReturnId[]? returnIds = ( await ApiConnection.SendQueryAsync<NewReturning>(ModellingQueries.newAppServer, Variables) ).ReturnIds;
        }
        catch (Exception exception)
        {
            //if IP already exists, skip displaying error message
            if (exception.Message.Contains("Uniqueness violation"))
                return (true, exception);

            return (false, exception);
        }

        return (true, default);
    }
}
