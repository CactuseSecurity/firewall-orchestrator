@using FWO.Config.Api
@using FWO.Ui.Display
@using FWO.GlobalConstants
@using FWO.Api.Data
@using BlazorTable

@inject UserConfig userConfig


<Table class="table table-bordered th-bg-secondary table-responsive overflow-auto sticky-header" TableItem="ModellingConnection"
        Items="Connections" PageSize="0" ColumnReorder="true" TableRowClass="@(con => getTableRowClass(con))">
    @if(!Readonly)
    {
        <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-primary" @onclick="async () => 
                        { await AppHandler.ShowDetails(context); await AppHandlerChanged.InvokeAsync(AppHandler); }">@(AppHandler.DisplayButton("details", Icons.Display))</button>
                    @if(AppActive)
                    {
                        @if(!context.GetBoolProperty(ConState.InterfaceRejected.ToString()) && !context.GetBoolProperty(ConState.Rejected.ToString()))
                        {
                            <button type="button" class="btn btn-sm btn-warning" @onclick="async () => 
                                { await AppHandler.EditConn(context); await AppHandlerChanged.InvokeAsync(AppHandler); }">@(AppHandler.DisplayButton("edit", Icons.Edit))</button>
                        }
                        <button type="button" class="btn btn-sm btn-danger" @onclick="async () => 
                            { await AppHandler.RequestDeleteConnection(context); await AppHandlerChanged.InvokeAsync(AppHandler); }">@(AppHandler.DisplayButton("delete", Icons.Delete))</button>
                    }
                </div>
            </Template>
        </Column>
    }
    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
    @if(Connections.Count > 0 && Connections.First().IsInterface)
    {
        <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("published"))" Field="@(x => x.IsPublished)" Sortable="true" Filterable="true">
            <Template>
                @(GlobalFunc.ShowBool(context.IsPublished))
            </Template>
        </Column>
    }
    else
    {
        <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("state"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
            <Template>
                @((MarkupString)DisplayState(context))
            </Template>
        </Column>
    }       
    @if(ShowAppName)
    {
        <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("owner"))" Field="@(x => x.App.Name)" Sortable="true" Filterable="true" />
    }        
    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" >
        <Template>
            @((MarkupString)DisplayConditional(context, context.Name))
        </Template>
    </Column>
    <Column TableItem="ModellingConnection" Title="@(Connections.Count > 0 && Connections.First().IsInterface ? userConfig.GetText("interface_description") : userConfig.GetText("func_reason"))"
            Field="@(x => x.Reason)" Sortable="true" Filterable="true" >
        <Template>
            @((MarkupString)DisplayConditional(context, context.Reason))
        </Template>
    </Column>
    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("source"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
        <Template>
            <ExpandableList2 Elements="AppHandler.GetSrcNames(context)" Context="src" AlwaysShowElements="@userConfig.OverviewDisplayLines">
                <ElementTemplate>
                    @((MarkupString)src)
                </ElementTemplate>
            </ExpandableList2>
        </Template>
    </Column>
    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("service"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
        <Template>
            <ExpandableList2 Elements="AppHandler.GetSvcNames(context)" Context="svc" AlwaysShowElements="@userConfig.OverviewDisplayLines">
                <ElementTemplate>
                    @((MarkupString)svc)
                </ElementTemplate>
            </ExpandableList2>
        </Template>
    </Column>
    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("destination"))" Field="@(x => x.Id)" Sortable="true" Filterable="false" >
        <Template>
            <ExpandableList2 Elements="AppHandler.GetDstNames(context)" Context="dest" AlwaysShowElements="@userConfig.OverviewDisplayLines">
                <ElementTemplate>
                    @((MarkupString)dest)
                </ElementTemplate>
            </ExpandableList2>
        </Template>
    </Column>
</Table>


@code
{
    [Parameter]
    public List<ModellingConnection> Connections { get; set; } = new();

    [Parameter]
    public ModellingAppHandler AppHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingAppHandler> AppHandlerChanged { get; set; }

    [Parameter]
    public bool AppActive { get; set; } = false;

    [Parameter]
    public bool Readonly { get; set; } = false;

    [Parameter]
    public bool ShowAppName { get; set; } = false;

    private string getTableRowClass(ModellingConnection conn)
    {
        @* if(conn.IsRequested)
        {
            return "td-bg-light-grey";
        } *@
        return "";
    }

    private string DisplayConditional(ModellingConnection conn, string content)
    {
        if(conn.IsRequested)
        {
            return $"<span class=\"text-secondary\">{content}</span>";
        }
        return content;
    }

    public string DisplayState(ModellingConnection connection)
    {
        List<string> relevantProps = [];
        if(connection.Props != null)
        {
            foreach(var prop in connection.Props)
            {
                switch (prop.Key)
                {
                    case nameof(ConState.InterfaceRequested):
                        if(!connection.Props.ContainsKey(ConState.InterfaceRejected.ToString()))
                        {
                            relevantProps.Add($"<span class=\"text-warning\" data-toggle=\"tooltip\" title=\"{userConfig.PureLine("C9007")}\">!</span>");
                        }
                        break;
                    case nameof(ConState.InterfaceRejected):
                        relevantProps.Add($"<span style=\"color:red\" data-toggle=\"tooltip\" title=\"{userConfig.PureLine("C9011")}\">{GlobalFunc.ShowBool(false)}</span>");
                        break;
                    default:
                        break;
                }
            }
        }
        return relevantProps.Count > 0 ? string.Join(",", relevantProps) : $"<span style=\"color:green\">{GlobalFunc.ShowBool(true)}</span>";
    }
}
