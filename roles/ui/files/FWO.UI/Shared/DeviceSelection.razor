@using FWO.Config.Api
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Ui.Data

@inject UserConfig userConfig
@inject IJSRuntime jsRuntime

<CascadingValue Value="collapseDevices">
    <div class="p-3">
        @if(ShowTitle)
        {
            <h5 class="text-left">@(userConfig.GetText("select_device"))</h5>
        }
        <div class="@cssClass">
            <button type="button" class="btn btn-sm btn-dark" @onclick="ToggleSelectAll">
                @(SelectAll ? selectAllText : clearAllText)
            </button>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="ToggleCollapseDevices">
                @(CollapseAll ? expandAllText : collapseAllText)
            </button>
        </div>
        <br><br>

        <CascadingValue Value="collapseDevices">
            @foreach (ManagementSelect management in DeviceFilter.Managements)
            {
                if (management.Visible)
                {
                    <div class="form-check mb-1">
                        <input class="form-check-input" type="checkbox" id="@management.Id" @bind="management.Selected"
                            @ref="management.UiReference" @oninput="async () => await ToggleSelectManagement(management)" />
                        <Collapse Title="@(management.Name)" StartToggled="@(CollapseAll)" Style="@("primary")">
                            @foreach (DeviceSelect device in management.Devices)
                            {
                                if (device.Visible)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="gwid_@device.Id" @bind="device.Selected"
                                            @oninput="async () => await ToggleSelectDevice(device)" />
                                        <label class="form-check-label" for="gwid_@device.Id">
                                            <small>@device.Name</small>
                                        </label>
                                    </div>
                                }
                            }
                        </Collapse>
                    </div>
                }
            }
        </CascadingValue>
    </div>
</CascadingValue>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public DeviceFilter DeviceFilter { get; set; } = new DeviceFilter();

    [Parameter]
    public EventCallback<DeviceFilter> DeviceFilterChanged { get; set; }

    [Parameter]
    public bool SelectAll { get; set; } = true; // state of the device select/clear all button

    [Parameter]
    public EventCallback<bool> SelectAllChanged { get; set; }

    [Parameter]
    public bool CollapseAll { get; set; }

    [Parameter]
    public EventCallback<bool> CollapseAllChanged { get; set; }

    [Parameter]
    public string Environment { get; set; } = "";

    [Parameter]
    public bool ShowTitle { get; set; } = true;


    private string cssClass = "btn-group w-100 sticky-marker";
    private string selectAllText = "";
    private string clearAllText = "";
    private string collapseAllText = "";
    private string expandAllText = "";
    private CollapseState collapseDevices = new CollapseState();

    protected override void OnInitialized()
    {
        selectAllText = userConfig.GetText("select_all");
        clearAllText = userConfig.GetText("clear_all");
        collapseAllText = userConfig.GetText("collapse_all");
        expandAllText = userConfig.GetText("expand_all");
        DeviceFilter.Managements?.Sort((a, b) => a.Name?.CompareTo(b.Name) ?? -1);
        if (Environment == GlobalConst.kCertification)
        {
            cssClass += "-35";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (ManagementSelect management in DeviceFilter.Managements)
        {
            if (management != null && management.Visible && management.UiReference != null && management.UiReference.HasValue)
            {
                try
                {
                    await SetElementProperty(management.UiReference.Value, "indeterminate",
                        management.Devices.Exists(d => d.Selected) && !management.Devices.TrueForAll(d => !d.Visible || d.Selected)
                        /* some but not all visible devices are selected */ );
                }
                catch (Exception exception)
                {
                    DisplayMessageInUi(exception, userConfig.GetText("device_select_error"), "", true);
                }
            }
        }
    }
    
    public async Task SetElementProperty(ElementReference element, string property, object value)
    {
        await jsRuntime.InvokeVoidAsync("setProperty", element, property, value);
    }

    private async Task SetSelectAll()
    {
        if (DeviceFilter.areAllDevicesSelected())
            SelectAll = false;
        if (!DeviceFilter.isAnyDeviceFilterSet())
            SelectAll = true;
        await SelectAllChanged.InvokeAsync(SelectAll);
    }

    private async Task ToggleSelectAll()
    {
        DeviceFilter.applyFullDeviceSelection(SelectAll);
        SelectAll = !SelectAll;
        await SelectAllChanged.InvokeAsync(SelectAll);
    }

    private async Task ToggleCollapseDevices()
    {
        CollapseAll = !CollapseAll;
        if(CollapseAll)
        {
            collapseDevices.CollapseAll();
        }
        else
        {
            collapseDevices.ExpandAll();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleSelectManagement(ManagementSelect management)
    {
        management.Selected = !management.Selected;
        foreach (DeviceSelect device in management.Devices)
            device.Selected = management.Selected;
        await SetSelectAll();
    }

    private async Task ToggleSelectDevice(DeviceSelect device)
    {
        device.Selected = !device.Selected;
        DeviceFilter.SynchronizeMgmtFilter();
        await SetSelectAll();
    }
}
