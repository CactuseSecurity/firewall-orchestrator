@using FWO.Config.Api
@using FWO.Api.Data
@using FWO.Ui.Data

@inject UserConfig userConfig
@inject IJSRuntime jsRuntime

<CascadingValue Value="collapseDevices">
    <div class="p-3">
        <h5 class="text-left">@(userConfig.GetText("select_device"))</h5>
        <div class="@cssClass">
            <button class="btn btn-sm btn-dark"
                    @onclick="@((async () => {
                        DeviceFilter.applyFullDeviceSelection(SelectAll);
                        SelectAll = !SelectAll;
                        await SelectAllChanged.InvokeAsync(SelectAll);
                    }))">
                @(SelectAll ? selectAllText : clearAllText)
            </button>
            <button class="btn btn-sm btn-secondary"
                    @onclick="@((async () => {
                        CollapseAll = !CollapseAll;
                        if(CollapseAll)
                            collapseDevices.CollapseAll();
                        else
                            collapseDevices.ExpandAll();
                        await InvokeAsync(StateHasChanged);
                    }))">
                @(CollapseAll ? expandAllText : collapseAllText)
            </button>
        </div>
        <br><br>

        <CascadingValue Value="collapseDevices">
            @foreach (ManagementSelect management in DeviceFilter.Managements)
            {
                <div class="form-check mb-1">
                    <input class="form-check-input" type="checkbox" id="@management.Id"
                            @bind="management.Selected"
                            @ref="management.UiReference"
                            @oninput="async () => {
                                management.Selected = !management.Selected;
                                foreach (DeviceSelect device in management.Devices)
                                    device.Selected = management.Selected;
                                await SetSelectAll();
                            }" />
                    <Collapse Title="@(management.Name)" StartToggled="@(CollapseAll)" Style="@("primary")">
                        @foreach (DeviceSelect device in management.Devices)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@device.Id"
                                        @bind="device.Selected"
                                        @oninput="@(async () => {
                                            device.Selected = !device.Selected;
                                            DeviceFilter.SynchronizeMgmtFilter();
                                            await SetSelectAll();
                                        })" />
                                <label class="form-check-label" for="@device.Id">
                                    @device.Name
                                </label>
                            </div>
                        }
                    </Collapse>
                </div>
            }
        </CascadingValue>
    </div>
</CascadingValue>

@code
{
    [Parameter]
    public string FilterInput { get; set; } = "";

    [Parameter]
    public EventCallback<string> FilterInputChanged { get; set; }

    [Parameter]
    public DeviceFilter DeviceFilter { get; set; } = new DeviceFilter();

    [Parameter]
    public EventCallback<DeviceFilter> DeviceFilterChanged { get; set; }

    [Parameter]
    public bool SelectAll { get; set; } // state of the device select/clear all button

    [Parameter]
    public EventCallback<bool> SelectAllChanged { get; set; }

    [Parameter]
    public bool CollapseAll { get; set; }

    [Parameter]
    public EventCallback<bool> CollapseAllChanged { get; set; }

    [Parameter]
    public string Environment { get; set; } = "";

    private string cssClass = "btn-group w-100 sticky-marker";
    private string selectAllText = "";
    private string clearAllText = "";
    private string collapseAllText = "";
    private string expandAllText = "";
    private CollapseState collapseDevices = new CollapseState();

    protected override void OnInitialized()
    {
        selectAllText = userConfig.GetText("select_all");
        clearAllText = userConfig.GetText("clear_all");
        collapseAllText = userConfig.GetText("collapse_all");
        expandAllText = userConfig.GetText("expand_all");
        DeviceFilter.Managements?.Sort((a, b) => a.Name?.CompareTo(b.Name) ?? -1);
        if(Environment == "Cert")
        {
            cssClass += "-35";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (ManagementSelect management in DeviceFilter.Managements)
        {
           await SetElementProperty(management.UiReference!.Value, "indeterminate",
           management.Devices.Exists(d => d.Selected) && !management.Devices.TrueForAll(d => d.Selected)
           /* any but not all devices selected */ );
        }
    }

    public async Task SetElementProperty(ElementReference element, string property, object value)
    {
        await jsRuntime.InvokeVoidAsync("setProperty", element, property, value);
    }

    private async Task SetSelectAll()
    {
        if (DeviceFilter.areAllDevicesSelected())
            SelectAll = false;
        if (!DeviceFilter.isAnyDeviceFilterSet())
            SelectAll = true;
        await SelectAllChanged.InvokeAsync(SelectAll);
    }
}
