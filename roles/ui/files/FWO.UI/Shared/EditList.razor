@using FWO.GlobalConstants
@using FWO.Api.Data

@typeparam ElementType

<ul class="list-group @(StdLayout ? "mb-2" : "")">
	@for (int i = 0; i < ElementsToAdd.Count; i++)
	{
		int j = i;
		<li class="bg-success-subtle @(StdLayout ? StdClass : AltClass) d-flex justify-content-between">
			<div class="@(StdLayout ? "" : AltElemClass)">@(Display(ElementsToAdd[i]))</div>
			<span @onclick="() => {ElementsToAdd.Remove(ElementsToAdd[j]);AfterRemoveAction();}" class="@(StdLayout ? "" : AltButtonClass) badge bg-danger">
				<i class="@(Icons.Close) text-light"></i>
			</span>
		</li>
	}
	@for (int i = 0; i < Elements.Length; i++)
	{
		int j = i;
		<li class="@(StdLayout ? StdClass : AltClass) d-flex justify-content-between">
			<div class="@(StdLayout ? "" : AltElemClass)" style="opacity: @(ElementsToDelete.Contains(Elements[j]) ? "0.5;" : "1;")">@Display(Elements[j])</div>
			<span @onclick="() => ToggleRemoval(j)" class="@(StdLayout ? "" : AltButtonClass) badge @(ElementsToDelete.Contains(Elements[j]) ? "bg-success" : "bg-danger")">
				<i class="oi @(ElementsToDelete.Contains(Elements[j]) ? "oi-action-undo" : "oi-x") text-light"></i>
			</span>
		</li>
	}
</ul>

@code
{
	[Parameter]
	public List<ElementType> ElementsToDelete { get; set; } = new List<ElementType>();

	[Parameter]
	public List<ElementType> ElementsToAdd { get; set; } = new List<ElementType>();

	[Parameter]
	public ElementType[] Elements { get; set; } = new ElementType[0];

	[Parameter]
	public RenderFragment<ElementType> Display { get; set; } = (e) =>
	{
		return __builder =>
		{
			@(e.ToString())
		};
	};

	[Parameter]
	public bool StdLayout { get; set; } = true;

    [Parameter]
    public Func<bool> AfterRemoveAction { get; set; } = DefaultInit.DoNothingSync;

	private string StdClass = "list-group-item pb-2 pt-2";
	private string AltClass = "pb-0 pt-0";
	private string AltElemClass = "col-sm-11";
	private string AltButtonClass = "col-sm-1 align-self-center";

	private void ToggleRemoval(int index)
	{
		if (ElementsToDelete.Contains(Elements[index]))
		{
			ElementsToDelete.Remove(Elements[index]);
		}
		else
		{
			ElementsToDelete.Add(Elements[index]);
		}
	}
}