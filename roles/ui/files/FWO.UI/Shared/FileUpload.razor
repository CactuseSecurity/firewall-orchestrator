@using FWO.Api.Client
@using FWO.Api.Client.Queries
@using FWO.Api.Data
@using FWO.Config.File
@using FWO.GlobalConstants
@using FWO.Ui.Data
@using NetTools
@using System.Net
@using System.Text.Json
@inject UserConfig userConfig


<div class="row">
    <div class="col-sm-8">
        <label class="btn btn-sm @(ImportDisabled ? "btn-primary" : "btn-success")" for="fileUpload">
            @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Add))
            <span class="ms-2">@(userConfig.GetText("add"))</span>
        </label>
        <InputFile id="fileUpload" hidden accept=".csv" OnChange="@SingleUpload" />
        @if (InputFileChangeEventArgs is not null && !string.IsNullOrEmpty(InputFileChangeEventArgs.File.Name))
        {
            <label class="d-inline">@InputFileChangeEventArgs.File.Name</label>
        }
        <button type="button" disabled="@ImportDisabled" class="btn btn-sm @(ImportDisabled ? "btn-primary" : "btn-success") mt-2 w-100" @onclick="LoadCSV">
            @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import))
            <span class="ms-1">@(userConfig.GetText("import"))</span>
        </button>
        @if (ShowAlert)
        {
            <div class="alert alert-warning mt-2" role="alert">
                <span>@userConfig.GetText("E7014")</span>
            </div>
        }
    </div>
</div>
@code {
    private bool ShowAlert { get; set; }
    InputFileChangeEventArgs? InputFileChangeEventArgs;

    private bool ImportDisabled { get; set; } = true;

    [Parameter]
    public EventCallback<(Exception, string?)> OnAddAppServerError { get; set; }

    [Parameter]
    public ApiConnection ApiConnection { get; set; }

    private List<AppServerType> AppServerTypes = new();

    protected override void OnInitialized()
    {
        try
        {
            if (userConfig.ModAppServerTypes != "")
            {
                AppServerTypes = JsonSerializer.Deserialize<List<AppServerType>>(userConfig.ModAppServerTypes) ?? new();
            }
        }
        catch (Exception) { }
    }

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        ImportDisabled = true;
        InputFileChangeEventArgs = e;
        ShowAlert = false;

        if (InputFileChangeEventArgs.FileCount == 0)
            return;

        if (!e.File.Name.EndsWith(".csv"))
        {
            ShowAlert = true;
            return;
        }

        ImportDisabled = false;
    }

    private async Task LoadCSV()
    {
        if (ImportDisabled || InputFileChangeEventArgs is null)
            return;

        using MemoryStream ms = new MemoryStream();
        await InputFileChangeEventArgs.File.OpenReadStream().CopyToAsync(ms);
        byte[]? bytes = ms.ToArray();

        string text = System.Text.Encoding.UTF8.GetString(bytes);
        string[] lines = text.Split('\r');

        foreach (string tmpLine in lines)
        {
            string line = tmpLine;

            if (line.StartsWith("\n"))
                line = line.Remove(0, 1);

            if (IsHeader(line))
                continue;

            string[] entries = line.Split(';');

            if (entries.Length < 3)
                continue;

            CSVAppServerImportModel appServer = new()
                {
                    AppServerName = entries[0],
                    AppID = entries[1],
                    AppServerTyp = entries[2],
                    AppIPRange = entries[3]
                };


            if (TrySplit(appServer.AppIPRange, '-', 1, out string? ipEnd))
            {
                appServer.AppIPRange = appServer.AppIPRange.Split('-')[0];
                appServer.AppIPRangeEnd = ipEnd;
            }

            if (string.IsNullOrEmpty(appServer.AppIPRangeEnd) && !TrySplit(appServer.AppIPRange, '/', 1, out string? subnet))
            {
                appServer.AppIPRange += "/32";
            }

            bool success = await AddAppServerToDb(appServer);

            if (!success)
                return;
        }
    }

    public bool TrySplit(string text, char separator, int index, out string? output)
    {

        string[] splits = text.Split(separator);

        output = null;

        if (splits.Length == 0 || splits.Length < index + 1)
            return false;

        output = splits[index];

        return true;
    }

    private bool IsHeader(string lineText)
    {
        string[] columns = lineText.Split(";");

        return ( columns.Length == 4
            && columns[0] == "App-Server-Name"
            && columns[1] == "External-App-ID"
            && columns[2] == "App-Server-Typ"
            && columns[3] == "App-IP-Address-Range" );
    }

    private async Task<bool> AddAppServerToDb(CSVAppServerImportModel appServer)
    {
        try
        {
            (string Start, string End) ip;

            if (!string.IsNullOrEmpty(appServer.AppIPRangeEnd))
            {
                ip.Start = appServer.AppIPRange;
                ip.End = appServer.AppIPRangeEnd;
            }
            else
            {
                ip = GlobalConstants.GlobalFunc.IpOperations.CidrToRangeString(appServer.AppIPRange);
            }

            AppServerType? appServerType = AppServerTypes.First(_ => _.Name == appServer.AppServerTyp);

            var Variables = new
            {
                name = appServer.AppServerName,
                appId = appServer.AppID,
                ip = ip.Start,
                ipEnd = ip.End,
                importSource = GlobalConst.kManual,
                customType = appServerType.Id
            };

            ReturnId[]? returnIds = ( await ApiConnection.SendQueryAsync<NewReturning>(ModellingQueries.newAppServer, Variables) ).ReturnIds;

        }
        catch (Exception exception)
        {
            (Exception e, string? ipStart) eIP = new();
            eIP.e = exception;
            eIP.ipStart = appServer.AppIPRange;

            await OnAddAppServerError.InvokeAsync(eIP);

            return false;
        }

        return true;
    }
}
