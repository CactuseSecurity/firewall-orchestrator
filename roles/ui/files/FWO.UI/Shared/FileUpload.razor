@using FWO.Ui.Data
@using FWO.Data.Modelling
@using NetTools
@using System.Net
@using System.Text.Json

@inject UserConfig userConfig
@inject ApiConnection apiConnection

<div class="row">
    <div class="col-sm-8">
        @if (UploadCase == FileUploadCase.ImportAppServerFromCSV)
        {
            <AuthorizeView Roles="@AuthorizedRoles">
                <Authorized>
                    <label class="btn btn-sm @(UploadDisabled ? "btn-primary" : "btn-success")" for="fileUpload">
                        @(ModellingHandlerBase.DisplayButton(userConfig, "select_file", Icons.Add, "select_file"))
                    </label>
                    <InputFile id="fileUpload" hidden accept="@SupportedFileFormats" OnChange="@SingleUpload" />
                    @if(InputFileChangeEventArgs is not null && !string.IsNullOrEmpty(InputFileChangeEventArgs.File.Name))
                    {
                        <label class="d-inline">@InputFileChangeEventArgs.File.Name</label>
                    }
                    <button type="button" disabled="@(Loading || UploadDisabled)" class="btn btn-sm @(UploadDisabled ? "btn-primary" : "btn-success") mt-2 w-100" @onclick="ImportCSV">
                        @if(Loading)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">@(userConfig.GetText("loading"))</span>
                            </div>
                        }
                        <span class="ms-1">@(userConfig.GetText("import"))</span>
                    </button>                   
                </Authorized>
                <NotAuthorized>
                    <button type="button" disabled class="btn btn-sm btn-primary">
                        <span class="ms-2">
                            @(ModellingHandlerBase.DisplayButton(userConfig, "select_file", Icons.Add, "select_file"))
                        </span>
                    </button>
                    <button type="button" disabled class="btn btn-sm btn-primary mt-2 w-100">
                        @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import, "import"))
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        }else if (UploadCase == FileUploadCase.CustomLogoUpload)
        {
            <AuthorizeView Roles="@AuthorizedRoles">
                <Authorized>
                    <label class="btn btn-sm @(UploadDisabled ? "btn-primary" : "btn-success")" for="fileUpload">
                        @(ModellingHandlerBase.DisplayButton(userConfig, "select_file", Icons.Add, "select_file"))
                    </label>
                    <InputFile id="fileUpload" hidden accept="@SupportedFileFormats" OnChange="@(async () => await UploadCustomLogo())" />
                    @if(InputFileChangeEventArgs is not null && !string.IsNullOrEmpty(InputFileChangeEventArgs.File.Name))
                    {
                        <label class="d-inline">@InputFileChangeEventArgs.File.Name</label>
                    }
                </Authorized>
                <NotAuthorized>
                </NotAuthorized>
            </AuthorizeView>
        }       
    </div>
</div>
@code {
    InputFileChangeEventArgs? InputFileChangeEventArgs;

    private bool UploadDisabled { get; set; } = true;
    private bool Loading { get; set; }

    [Parameter, EditorRequired]
    public string? AuthorizedRoles { get; set; }

    [Parameter]
    public EventCallback<(Exception, string?)> OnError { get; set; }

    [Parameter]
    public EventCallback OnImportSuccess { get; set; }

    @typeparam TUploadResult

    [Parameter]
    public EventCallback<(List<string>? success, List<TUploadResult>? errors)> OnAfterImportResults { get; set; }

    /// <summary>
    /// Defines a set of supported file formats. E.g.: '.csv,.pdf'
    /// </summary>
    [Parameter, EditorRequired]
    public string SupportedFileFormats { get; set; } = "";

    [Parameter, EditorRequired]
    public FileUploadCase UploadCase { get; set; } = FileUploadCase.Undefined;

    private List<AppServerType> AppServerTypes = new();

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(AuthorizedRoles))
        {
            throw new UnauthorizedAccessException($"Parameter {nameof(AuthorizedRoles)} cannot be empty!");
        }

        if (string.IsNullOrWhiteSpace(SupportedFileFormats))
        {
            throw new ArgumentNullException($"Parameter {nameof(SupportedFileFormats)} cannot be empty!");
        }

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        try
        {
            if (userConfig.ModAppServerTypes != "")
            {
                AppServerTypes = JsonSerializer.Deserialize<List<AppServerType>>(userConfig.ModAppServerTypes) ?? new();
            }
        }
        catch (Exception) { }
    }

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        UploadDisabled = true;
        InputFileChangeEventArgs = e;

        if (InputFileChangeEventArgs.FileCount == 0)
            return;

        UploadDisabled = false;
    }

    private async Task ImportCSV()
    {
        if(UploadDisabled || InputFileChangeEventArgs is null)
            return;

        if (InputFileChangeEventArgs.File is null)
            return;

        Loading = true;
        FileUploadService fileUploadService = new(apiConnection, userConfig, SupportedFileFormats);

        try
        {
            await fileUploadService.ReadFileToBytes(InputFileChangeEventArgs);
        }
        catch (Exception ex)
        {
            Loading = false;
            await OnError.InvokeAsync((ex, $"{userConfig.GetText("file_upload_failed")} {ex.Message}"));
            return;
        }

        (List<string>? success, List<CSVFileUploadErrorModel>? errors) = await fileUploadService.ImportUploadedData<CSVFileUploadErrorModel>(FileUploadCase.ImportAppServerFromCSV, InputFileChangeEventArgs.File.Name ?? "noName");

        if(errors is null || errors.Count == 0)
        {
            await OnImportSuccess.InvokeAsync();
        }
        else
        {
            List<TUploadResult> importErrors = errors.Cast<TUploadResult>().ToList();
            await OnAfterImportResults.InvokeAsync((success, importErrors));
        }

        Loading = false;
    }

    private async Task UploadCustomLogo()
    {
        if(InputFileChangeEventArgs is null)
            return;

        if(InputFileChangeEventArgs.File is null)
            return;

        Loading = true;

        FileUploadService fileUploadService = new(apiConnection, userConfig, SupportedFileFormats);

        try
        {
            await fileUploadService.ReadFileToBytes(InputFileChangeEventArgs);
        }
        catch(Exception ex)
        {
            Loading = false;
            await OnError.InvokeAsync((ex, $"{userConfig.GetText("file_upload_failed")} {ex.Message}"));
            return;
        }

        var bla = await fileUploadService.ImportCustomLogo<ErrorBaseModel>(UploadCase, InputFileChangeEventArgs.File.Name);

        Loading = false;
    }
}
