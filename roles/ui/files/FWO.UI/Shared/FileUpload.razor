@using FWO.Api.Data
@using FWO.Ui.Data
@inject UserConfig userConfig

<div class="d-inline">
    <button type="button" disabled="@ImportDisabled" class="btn btn-sm btn-primary d-inline" @onclick="LoadCSV">
        @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import))
        <span class="ms-1">@(userConfig.GetText("import"))</span>
    </button>
    <InputFile OnChange="@SingleUpload" />
</div>
@if (ShowAlert)
{
    <div class="alert alert-warning mt-2" role="alert">
        <span>@userConfig.GetText("E7014")</span>
    </div>
}

@code {
    private bool ShowAlert { get; set; }
    InputFileChangeEventArgs? InputFileChangeEventArgs;

    private bool ImportDisabled { get; set; } = true;

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        ImportDisabled = true;
        InputFileChangeEventArgs = e;
        ShowAlert = false;

        if (InputFileChangeEventArgs.FileCount == 0)
            return;

        if (!e.File.Name.EndsWith(".csv"))
        {
            ShowAlert = true;
            return;
        }

        ImportDisabled = false;
    }

    private async Task LoadCSV()
    {
        if (ImportDisabled || InputFileChangeEventArgs is null)
            return;

        using MemoryStream ms = new MemoryStream();
        await InputFileChangeEventArgs.File.OpenReadStream().CopyToAsync(ms);
        byte[]? bytes = ms.ToArray();

        string text = System.Text.Encoding.UTF8.GetString(bytes);
        string[] lines = text.Split('\r');

        foreach (string tmpLine in lines)
        {
            string line = tmpLine;

            if (line.StartsWith("\n"))
                line = line.Remove(0, 1);

            if (IsHeader(line))
                continue;

            string[] entries = line.Split(';');

            if (entries.Length < 2)
                continue;

            CSVInterfaceImportModel interfaceImport = new()
                {
                    AppID = entries[0],
                    AppIPRange = entries[1]
                };
        }
    }

    private bool IsHeader(string lineText)
    {
        string[] columns = lineText.Split(";");

        return ( columns[0] == "External App-ID" && columns[1] == "App-IP-Address-Range" && columns.Length == 2 );
    }
}
