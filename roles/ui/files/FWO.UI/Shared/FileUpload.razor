@using FWO.Api.Client
@using FWO.Api.Client.Queries
@using FWO.Api.Data
@using FWO.Config.File
@using FWO.GlobalConstants
@using FWO.Ui.Data
@using NetTools
@inject UserConfig userConfig


<div class="row">
    <div class="col-sm-8">
        <InputFile OnChange="@SingleUpload" />
        <button type="button" disabled="@ImportDisabled" class="btn btn-sm btn-primary mt-2 w-100" @onclick="LoadCSV">
            @(ModellingHandlerBase.DisplayButton(userConfig, "import", Icons.Import))
            <span class="ms-1">@(userConfig.GetText("import"))</span>
        </button>
    </div>
</div>
@if (ShowAlert)
{
    <div class="alert alert-warning mt-2" role="alert">
        <span>@userConfig.GetText("E7014")</span>
    </div>
}

@code {
    private bool ShowAlert { get; set; }
    InputFileChangeEventArgs? InputFileChangeEventArgs;

    private bool ImportDisabled { get; set; } = true;

    [Parameter]
    public EventCallback<Exception> OnAddAppServerError { get; set; }

    [Parameter]
    public ApiConnection ApiConnection { get; set; }

    private void SingleUpload(InputFileChangeEventArgs e)
    {
        ImportDisabled = true;
        InputFileChangeEventArgs = e;
        ShowAlert = false;

        if (InputFileChangeEventArgs.FileCount == 0)
            return;

        if (!e.File.Name.EndsWith(".csv"))
        {
            ShowAlert = true;
            return;
        }

        ImportDisabled = false;
    }

    private async Task LoadCSV()
    {
        if (ImportDisabled || InputFileChangeEventArgs is null)
            return;

        using MemoryStream ms = new MemoryStream();
        await InputFileChangeEventArgs.File.OpenReadStream().CopyToAsync(ms);
        byte[]? bytes = ms.ToArray();

        string text = System.Text.Encoding.UTF8.GetString(bytes);
        string[] lines = text.Split('\r');

        foreach (string tmpLine in lines)
        {
            string line = tmpLine;

            if (line.StartsWith("\n"))
                line = line.Remove(0, 1);

            if (IsHeader(line))
                continue;

            string[] entries = line.Split(';');

            if (entries.Length < 3)
                continue;

            CSVAppServerImportModel appServer = new()
                {
                    AppServerName = entries[0],
                    AppID = entries[1],
                    AppServerTyp = entries[2],
                    AppIPRange = entries[3]
                };

            bool success = await AddAppServerToDb(appServer);

            if (!success)
                return;
        }
    }

    private bool IsHeader(string lineText)
    {
        string[] columns = lineText.Split(";");

        return ( columns.Length == 4
            && columns[0] == "App-Server-Name"
            && columns[1] == "External-App-ID"
            && columns[2] == "App-Server-Typ"
            && columns[3] == "App-IP-Address-Range" );
    }

    private async Task<bool> AddAppServerToDb(CSVAppServerImportModel appServer)
    {
        try
        {
            var Variables = new
            {
                name = appServer.AppServerName,
                appId = appServer.AppID,
                ip =appServer.AppIPRange,
                // ipEnd = appServer.IpEnd != "" ? IPAddressRange.Parse(ActAppServer.IpEnd).ToCidrString() : IPAddressRange.Parse(ActAppServer.Ip).ToCidrString(),
                importSource = GlobalConst.kManual
            };
           
            ReturnId[]? returnIds = ( await ApiConnection.SendQueryAsync<NewReturning>(ModellingQueries.newAppServer, Variables) ).ReturnIds;
            
        }
        catch (Exception exception)
        {
            await OnAddAppServerError.InvokeAsync(exception);

            return false;
        }

        return true;
    }
}
