@inject ApiConnection apiConnection
@inject UserConfig userConfig

<PopUp Title="@(userConfig.GetText("rollback_import") + ": " + ManagementId)" Show="@RollbackMode" Size=PopupSize.Small OnClose="() => RollbackMode = false">
    <Body>
        @if (RollbackMode)
        {
            if (LastIncompleteImport != null && LastIncompleteImport.Length > 0)
            {
                <p>@(userConfig.GetText("U5104") + (LastIncompleteImport[0].StartTime != null ? Math.Round(((TimeSpan)(DateTime.Now - LastIncompleteImport[0].StartTime!)).TotalMinutes).ToString() : "?") + userConfig.GetText("U5105"))</p>
            }
            else
            {
                <p>@(userConfig.GetText("U5106"))</p>
            }
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Importer}")" Context="xxx">
                <Authorized>
                    @if (LastIncompleteImport != null && LastIncompleteImport.Length > 0)
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="async () => { await Rollback(); RollbackMode = false; await Closing.InvokeAsync(RollbackMode); }">@(userConfig.GetText("rollback"))</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-danger" @onclick="async () => { await FullMgmRollback(); RollbackMode = false; await Closing.InvokeAsync(RollbackMode); }">@(userConfig.GetText("full_rollback"))</button>
                    }
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("rollback"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>
<InProgress Display="workInProgress"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public int ManagementId { get; set; }

    [Parameter]
    public ImportControl[]? LastIncompleteImport { get; set; }

    [Parameter]
    public bool RollbackMode { get; set; }
   
    [Parameter]
    public EventCallback<bool> RollbackModeChanged { get; set; }
    
    [Parameter]
    public EventCallback<bool> Closing { get; set; }

    private bool workInProgress = false;

    private void Cancel()
    {
        RollbackMode = false;
        Closing.InvokeAsync(RollbackMode);
    }


    private async Task RollbackSingleImport(int mgm, long importId)
    {
        try
        {
            RollbackMode = true;
            workInProgress = true;
            var variablesRollback = new { importId = importId };
            var ReturnId = await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.ImportQueries.rollbackImport, variablesRollback);

            Log.WriteDebug("Delete Import", $"rolled back last import (id={importId}) of mangement with ID {ManagementId}");
            workInProgress = false;
        }
        catch (System.Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("rollback_import"), "", true);
        }
    }

    private async Task Rollback()
    {
        try
        {
            RollbackMode = false;
            workInProgress = false;
            var variablesGetLastImportId = new { mgmId = ManagementId };

            List<ImportControl> importList = await apiConnection.SendQueryAsync<List<ImportControl>>(FWO.Api.Client.Queries.ImportQueries.getLastImport, variablesGetLastImportId);
            if (importList.Count != 1)
            {
                // TODO: add a check if the python import for this mgmt is still running
                workInProgress = false;
                DisplayMessageInUi(null, userConfig.GetText("not_imported_yet"), userConfig.GetText("U51XX"), false);
            }
            else
            {
                long? lastImportId = importList[0].ControlId;
                if (lastImportId != null)
                {
                    await RollbackSingleImport(ManagementId, (long)lastImportId);
                    DisplayMessageInUi(null, userConfig.GetText("rollback_import"), userConfig.GetText("U5107"), false);            
                }
            }
        }
        catch (System.Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("rollback_import"), "", true);
        }
    }

    private async Task FullMgmRollback()
    {
        try
        {
            RollbackMode = false;
            workInProgress = false;
            var variablesGetLastImportId = new { mgmId = ManagementId };

            List<ImportControl> importList = await apiConnection.SendQueryAsync<List<ImportControl>>(FWO.Api.Client.Queries.ImportQueries.getLastImport, variablesGetLastImportId);
            if (importList.Count != 1)
            {
                // TODO: add a check if the python import for this mgmt is still running
                workInProgress = false;
                DisplayMessageInUi(null, userConfig.GetText("not_imported_yet"), userConfig.GetText("U51XX"), false);
            }
            else
            {
                long? lastImportId = importList[0].ControlId;
                if (lastImportId != null)
                {
                    try
                    {
                        RollbackMode = false;
                        workInProgress = false;

                        bool managementImportsStillExists = true;
                        while (managementImportsStillExists)
                        {
                            var variablesGetManagement = new { mgmId = ManagementId };
                            List<ImportControl>? getLastImportResponse = await apiConnection.SendQueryAsync<List<ImportControl>>(FWO.Api.Client.Queries.ImportQueries.getLastImport, variablesGetManagement);
                            lastImportId = getLastImportResponse.FirstOrDefault()?.ControlId;
                            if (lastImportId == null)
                            {
                                managementImportsStillExists = false;
                            }
                            else
                            {
                                await RollbackSingleImport(ManagementId, (long)lastImportId);
                            }
                        }

                        Log.WriteDebug("Delete Import", $"rolled back last import (id={lastImportId}) of mangement with ID {ManagementId}");
                        workInProgress = false;
                        DisplayMessageInUi(null, userConfig.GetText("rollback_import"), userConfig.GetText("U5107"), false);
                    }
                    catch (System.Exception exception)
                    {
                        workInProgress = false;
                        DisplayMessageInUi(exception, userConfig.GetText("rollback_import"), "", true);
                    }

                }
            }
        }
        catch (System.Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("rollback_import"), "", true);
        }
        await deleteLatestConfigOfManagement(ManagementId);
    }

    private async Task deleteLatestConfigOfManagement(int mgmId)
    {
        try
        {
            var variablesdeleteLatestConfigOfManagement = new { mgmId = ManagementId };
            ReturnId id = await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.ImportQueries.deleteLatestConfigOfManagement, variablesdeleteLatestConfigOfManagement);
        }
        catch (System.Exception exception)
        {
            Log.WriteDebug("Delete latest config", $"error while deleting latest config for mangement with ID {ManagementId}");
        }

    }

}
