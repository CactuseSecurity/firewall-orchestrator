@using NetTools;

@inject UserConfig userConfig

<input type="text" class="form-control @(ipAddressInputClass)" placeholder="@userConfig.GetText("ip_addresses")"
@oninput="@(e => {TryParseIpRange(e.Value?.ToString() ?? ""); })">

@code
{
	private string ipAddressInputClass = "";

	private IPAddressRange? ipRange;

	[Parameter]
    public IPAddressRange? IpRange { get; set; }

	[Parameter]
	public EventCallback<IPAddressRange?> IpRangeChanged { get; set; }

	private void TryParseIpRange(string ipAddressInput)
    protected override void OnParametersSet()
    {
        if (ipRange != IpRange)
        {
            ipRange = IpRange;
        }
    }

    private async void TryParseIpRange(string ipAddressInput)
    {
        if (IPAddressRange.TryParse(ipAddressInput, out IPAddressRange parsedIpRange))
        {
            ipRange = parsedIpRange;
            ipAddressInputClass = "is-valid";
            IpRange = parsedIpRange;
            await IpRangeChanged.InvokeAsync(parsedIpRange);
        }
        else
        {
            ipRange = null;
            ipAddressInputClass = "is-invalid";
            IpRange = null;
            await IpRangeChanged.InvokeAsync(null);
        }
    }
}
