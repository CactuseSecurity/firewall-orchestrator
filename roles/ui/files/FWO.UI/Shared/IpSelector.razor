@using NetTools;
@using FWO.GlobalConstants
@using FWO.Api.Data;
@using FWO.Ui.Display;

@inject UserConfig userConfig

<div class="form-group row">
    @if(WithLabel)
    {
        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ip_addresses")):</label>
    }
    <div class="@(WithLabel ? "col-sm-9" : "col-sm-12") me-auto">
        @if(Readonly)
        {
            @foreach(var adr in IpAddresses)
            {
                <div class="col-sm-10 border bg-transparent">@NwObjDisplay.DisplayIp(adr.IpString, adr.IpEndString)</div>
            }
        }
        else
        {
            <EditList ElementType="NwObjectElement" Elements="IpAddresses.ToArray()" ElementsToAdd="IpsToAdd" ElementsToDelete="IpsToDelete" StdLayout="false">
                <Display>
                    <div class="row">
                        <div class="mh-13 col-sm-12 border bg-transparent">@NwObjDisplay.DisplayIp(context.IpString, context.IpEndString)</div>
                    </div>
                </Display>
            </EditList>
            <div class="col-sm-12 mt-1">
                <div class="form-group row me-auto">
                    <div class="col-sm-10">
                        <IpAddressInput @bind-IpRange="ipRangeToAdd" />
                    </div>
                    <button @onclick="AddIpRange" type="button" class="col-sm-2 btn btn-sm btn-success" id="addIpAddress">@(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))</button>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    [Parameter]
    public List<NwObjectElement> IpAddresses { get; set; } = [];

    [Parameter]
    public List<NwObjectElement> IpsToAdd { get; set; } = [];

    [Parameter]
    public EventCallback<List<NwObjectElement>> IpsToAddChanged { get; set; }

    [Parameter]
    public List<NwObjectElement> IpsToDelete { get; set; } = [];

    [Parameter]
    public EventCallback<List<NwObjectElement>> IpsToDeleteChanged { get; set; }

    [Parameter]
    public bool Readonly { get; set; } = false;

    [Parameter]
    public bool WithLabel { get; set; } = true;


    private IPAddressRange? ipRangeToAdd;

    private void AddIpRange()
    {
        if (ipRangeToAdd != null)
        {
            NwObjectElement obj = new NwObjectElement(ipRangeToAdd, 0);
            if (!obj.CidrEnd.Valid)
            {
                obj.CidrEnd = obj.Cidr;
            }
            if (obj.Cidr.Valid && obj.CidrEnd.Valid)
            {
                IpsToAdd.Add(obj);
            }
			ipRangeToAdd = null;
		}
	}    
}
