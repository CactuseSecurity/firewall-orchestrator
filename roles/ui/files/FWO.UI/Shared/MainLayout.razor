@inherits LayoutComponentBase
@using FWO.Config.Api

@inject UserConfig userConfig

<div style="z-index:2; top:0px;" class="position-sticky">
    <NavigationMenu />
</div>

<div class="main h-100">
    <div class="content p-4">
        <CascadingValue Value="@DisplayMessageInUiFunction">
            @Body
        </CascadingValue>
    </div>
</div>

@if (errorDialogShow)
{
    <div class="footer alert alert-danger">
        <div class="d-flex flex-row justify-content-between">
            <div>@dialogTitle - @dialogMessage . @(userConfig.GetText("E0002"))</div>
            <div class="oi oi-x" @onclick="@(() => { errorDialogShow = false; StateHasChanged();})"></div>
        </div>
    </div>
}
@if (successDialogShow)
{
    <div class="footer alert alert-success">
        <div class="d-flex flex-row justify-content-between">
            <div>@dialogTitle - @dialogMessage</div>
            <div class="oi oi-x" @onclick="@(() => { successDialogShow = false; StateHasChanged();})"></div>
        </div>
    </div>
}

@code
{
    private bool errorDialogShow = false;
    private bool successDialogShow = false;
    private string dialogTitle;
    private string dialogMessage;

    private object errorLock = new object();

    Action<Exception, string, string, bool> DisplayMessageInUiFunction;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override void OnInitialized()
    {
        var user = authenticationStateTask.Result.User;
        DisplayMessageInUiFunction = DisplayMessageInUi;
    }

    private void ShowError(string title, string message)
    {
        // Needed so there is no chance an error is announced by 2 threads at the same time.
        lock (errorLock)
        {
            dialogTitle = title;
            dialogMessage = message;
            errorDialogShow = true;
            successDialogShow = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private void ShowSuccess(string title, string message)
    {
        // Needed so there is no chance an error is announced by 2 threads at the same time.
        lock (errorLock)
        {
            dialogTitle = title;
            dialogMessage = message;
            errorDialogShow = false;
            successDialogShow = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private void DisplayMessageInUi(Exception exception = null, string title = null, string message = null, bool ErrorFlag = false)
    {
        if (exception == null)
        {
            if (ErrorFlag)
            {
                // User message to be displayed as error
                ShowError(title, message); // todo: display warnings in yellow
                Log.WriteWarning(title, message);
            }
            else
            {
                // User message is no error
                ShowSuccess(title, message);
            }
        }
        else
        {
            // first some recurring specific messages
            if (exception.Message.Contains("JWTExpired"))
            {
                // todo: consider redirect to login page
                Log.WriteError("Auth Token Error", "JWT expired in session.", exception);
                ShowError(userConfig.GetText("jwt_expiry"), userConfig.GetText("E0003"));
            }
            else if (exception.Message == "no such type exists in the schema: 'cidr'")
            {
                // this is the default error message when user's access rights are not sufficient for API access
                ShowError(userConfig.GetText("api_access"), userConfig.GetText("E0004"));
            }
            else if (ErrorFlag)
            {
                // the exception message is shown to the user
                Log.WriteError((title != null ? title : "Unspecified Error"), (message != null ? message : "Unspecified error occured: "), exception);
                ShowError((title != null ? title : userConfig.GetText("unspecified_error")), $"{(message != null ? message : userConfig.GetText("E0001"))}: {exception.Message}");
            }
            else
            {
                // only title and message (if given) or unspecific error message is shown to the user
                Log.WriteError((title != null ? title : "Unspecified Error"), (message != null ? message : "Unspecified error occured: "), exception);
                ShowError((title != null ? title : userConfig.GetText("unspecified_error")), $"{(message != null ? message : userConfig.GetText("E0001"))}");
            }
        }
    }
}
