@using BlazorTable
@using FWO.Config.Api
@using FWO.Api.Data

@inject UserConfig userConfig
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@typeparam InputDataType

@if(Content != null)
{
    <Collapse Title="@(NameExtractor != null ? NameExtractor(Content) : "")" UseHtmlTitle="@(Tab == ruleTab)" Style="@("primary")" StartToggled="StartCollapsed">
        <TitleWithHtml>
            @if (Content.GetType() == typeof(Rule))
            {
                Rule rule = (Rule)(Object)Content;
                @($"{rule.DeviceName} - Rule ")
                if (rule.Uid != null)
                {
                    if (rule.Uid.Length > 5)
                    {
                        string shortId = rule.Uid.Substring(rule.Uid.Length - 5, 5);
                        <Tooltip Text="@rule.Uid">@($"..{shortId} ")</Tooltip>
                    }
                    else
                    {
                        @($"{rule.Uid} ")
                    }
                }
                @rule.Name
            }
        </TitleWithHtml>
        <ChildContent>
            @if(NetworkObjectExtractor != null)
            {
                <Collapse Title="@(userConfig.GetText("network_objects"))" StartToggled="StartCollapsed"  OnOpen="() => HandleUncollapse(nobj)">
                    <Table style="font-size:small" class="table table-bordered table-sm table-responsive" TableItem="NetworkObject" Items="@NetworkObjectExtractor(Content)" PageSize="PageSize" ColumnReorder="true">
                        <Column TableItem="NetworkObject" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Class="word-break">
                            <Template>
                                <span class="@GetIconClass(nobj, context.Type.Name)">&nbsp;</span>
                                <b id="@(GetID(nobj, context.Id))">@(context.Name)</b>
                            </Template>
                        </Column>
                        <DetailTemplate TableItem="NetworkObject">
                            <Detail Title="@(userConfig.GetText("type"))" Data=@context.Type.Name />
                            <Detail Title="@(userConfig.GetText("uid"))" Data=@context.Uid />
                            <Detail Title="@(userConfig.GetText("ip"))" Data=@context.IP />
                            <Detail Title="@(userConfig.GetText("zone"))" Data=@context.Zone?.Name />
                            @if (context.Type.Name == "group" && context.ObjectGroups != null && context.ObjectGroupFlats != null)
                            {
                                <ContentSwap Title1="@(userConfig.GetText("group_members"))" Title2="@(userConfig.GetText("group_members_flat"))">
                                    <Content1>
                                        @foreach (Group<NetworkObject> member in context.ObjectGroups)
                                        {
                                            if(member.Object != null)
                                            {
                                                @AddLinkToObject(nobj, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content1>
                                    <Content2>
                                        @{ List<long> shownMemberIds = new List<long>(); }
                                        @foreach (GroupFlat<NetworkObject> member in context.ObjectGroupFlats)
                                        {
                                            if(member.Object != null)
                                            {
                                                if (member.Object.Type.Name == "group" || shownMemberIds.Contains(member.Object.Id))
                                                    continue;
                                                shownMemberIds.Add(member.Object.Id);

                                                @AddLinkToObject(nobj, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content2>
                                </ContentSwap>
                            }
                            <Detail Title="@(userConfig.GetText("last_changed"))" Data=@context.CreateTime.Time.ToString() />
                            <Detail Title="@(userConfig.GetText("comment"))" Data=@context.Comment />
                        </DetailTemplate>
                    </Table>
                </Collapse>
            }
            @if(NetworkServiceExtractor != null)
            {
                <Collapse Title="@(userConfig.GetText("services"))" StartToggled="StartCollapsed" OnOpen="() => HandleUncollapse(nsrv)">
                    <Table style="font-size:small" class="table table-bordered table-sm table-responsive" TableItem="NetworkService" Items="@NetworkServiceExtractor(Content)" PageSize="PageSize" ColumnReorder="true">
                        <Column TableItem="NetworkService" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Class="word-break">
                            <Template>
                                <span class="@GetIconClass(nsrv, context.Type.Name)">&nbsp;</span>
                                <b id="@(GetID(nsrv, context.Id))">@(context.Name)</b>
                            </Template>
                        </Column>
                        <DetailTemplate TableItem="NetworkService">
                            <Detail Title="@(userConfig.GetText("type"))" Data=@context.Type.Name />
                            <Detail Title="@(userConfig.GetText("uid"))" Data=@context.Uid />
                            <Detail Title="@(userConfig.GetText("source_port"))" Data=@(context.SourcePort == context.SourcePortEnd ? context.SourcePort.ToString() : $"{context.SourcePort.ToString()}-{context.SourcePortEnd.ToString()}") />
                            <Detail Title="@(userConfig.GetText("destination_port"))" Data=@(context.DestinationPort == context.DestinationPortEnd ? context.DestinationPort.ToString() : $"{context.DestinationPort.ToString()}-{context.DestinationPortEnd.ToString()}") />
                            <Detail Title="@(userConfig.GetText("protocol"))" Data=@context.Protocol?.Name />
                            <Detail Title="@(userConfig.GetText("code"))" Data=@context.Code />
                            <Detail Title="@(userConfig.GetText("timeout"))" Data=@context.Timeout.ToString() />
                            @if (context.Type.Name == "group" && context.ServiceGroups != null && context.ServiceGroupFlats != null)
                            {
                                <ContentSwap Title1="@(userConfig.GetText("group_members"))" Title2="@(userConfig.GetText("group_members_flat"))">
                                    <Content1>
                                        @foreach (Group<NetworkService> member in context.ServiceGroups)
                                        {
                                            if(member.Object != null)
                                            {
                                                @AddLinkToObject(nsrv, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content1>
                                    <Content2>
                                        @{ List<long> shownMemberIds = new List<long>(); }
                                        @foreach (GroupFlat<NetworkService> member in context.ServiceGroupFlats)
                                        {
                                            if(member.Object != null)
                                            {
                                                if (member.Object.Type.Name == "group" || shownMemberIds.Contains(member.Object.Id))
                                                    continue;
                                                shownMemberIds.Add(member.Object.Id);

                                                @AddLinkToObject(nsrv, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content2>
                                </ContentSwap>
                            }
                            <Detail Title="@(userConfig.GetText("last_changed"))" Data=@context.CreateTime.Time.ToString() />
                            <Detail Title="@(userConfig.GetText("comment"))" Data=@context.Comment />
                        </DetailTemplate>
                    </Table>
                </Collapse>
            }
            @if(NetworkUserExtractor != null)
            {
                <Collapse Title="@(userConfig.GetText("users"))" StartToggled="StartCollapsed" OnOpen="() => HandleUncollapse(user)">
                    <Table style="font-size:small" class="table table-bordered table-sm table-responsive" TableItem="NetworkUser" Items="@NetworkUserExtractor(Content)" PageSize="PageSize" ColumnReorder="true">
                        <Column TableItem="NetworkUser" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Class="word-break">
                            <Template>
                                <span class="@GetIconClass(user, context.Type.Name)">&nbsp;</span>
                                <b id="@(GetID(user, context.Id))">@(context.Name)</b>
                            </Template>
                        </Column>
                        <DetailTemplate TableItem="NetworkUser">
                            <Detail Title="@(userConfig.GetText("type"))" Data=@context.Type?.Name />
                            <Detail Title="@(userConfig.GetText("uid"))" Data=@context.Uid />
                            <Detail Title="@(userConfig.GetText("real_name"))" Data=@($"{context.FirstName} {context.LastName}") />
                            @if (context.Type != null && context.Type.Name == "group" && context.UserGroups != null && context.UserGroupFlats != null)
                            {
                                <ContentSwap Title1="@(userConfig.GetText("group_members"))" Title2="@(userConfig.GetText("group_members_flat"))">
                                    <Content1>
                                        @foreach (Group<NetworkUser> member in context.UserGroups)
                                        {
                                            if(member.Object != null)
                                            {
                                                @AddLinkToObject(user, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content1>
                                    <Content2>
                                        @{ List<long> shownMemberIds = new List<long>(); }
                                        @foreach (GroupFlat<NetworkUser> member in context.UserGroupFlats)
                                        {
                                            if(member.Object != null)
                                            {
                                                if (member.Object.Type.Name == "group" || shownMemberIds.Contains(member.Object.Id))
                                                    continue;
                                                shownMemberIds.Add(member.Object.Id);

                                                @AddLinkToObject(user, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content2>
                                </ContentSwap>
                            }
                            <Detail Title="@(userConfig.GetText("last_changed"))" Data=@context.CreateTime.Time.ToString() />
                            <Detail Title="@(userConfig.GetText("comment"))" Data=@context.Comment />
                        </DetailTemplate>
                    </Table>
                </Collapse>
            }
        </ChildContent>
    </Collapse>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    [CascadingParameter]
    AnchorNavToRSB? anchorNavToRSB { get; set; }

    [Parameter]
    public Func<byte, Func<Management[], Task>, long, bool, Task>? FetchObjects { get; set; }

    [Parameter]
    public bool Recert { get; set; }

    [Parameter]
    public byte Tab { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public bool StartCollapsed { get; set; } = true;

    [Parameter]
    public bool StartContentDetailed { get; set; } = false;

    [Parameter]
    public Func<InputDataType, string>? NameExtractor { get; set; }

    [Parameter]
    public InputDataType? InitialContent { get; set; }

    [Parameter]
    public Func<InputDataType, IEnumerable<NetworkObject>>? NetworkObjectExtractor { get; set; }

    [Parameter]
    public Func<InputDataType, IEnumerable<NetworkService>>? NetworkServiceExtractor { get; set; }

    [Parameter]
    public Func<InputDataType, IEnumerable<NetworkUser>>? NetworkUserExtractor { get; set; }

    // Parameter Variables are being overwritten, because something happens with the component on StateHasChanged (but the Initialize Task does not get called)
    public InputDataType? Content { get; set; }
    private const byte allTab = 10, reportTab = 20, ruleTab = 30;
    private const byte all = 0, nobj = 1, nsrv = 2, user = 3;
    public bool ContentIsDetailed => nobjDetailed && nsrvDetailed && userDetailed;
    private bool nobjDetailed = false;
    private bool nsrvDetailed = false;
    private bool userDetailed = false;

    protected override async Task OnInitializedAsync()
    {
        Content = InitialContent;
        if (StartContentDetailed)
            await FetchContent(all);
    }

    private string GetIDPrefix(byte objCategory, byte? tab = null, bool toMgmtObj = false)
    {
        string idPref = "";
        switch (tab ?? Tab)
        {
            case allTab:
                idPref += "all-";
                break;
            case reportTab:
                idPref += "report-";
                break;
            case ruleTab:
                idPref += "rule-";
                break;
        }
        switch (Content)
        {
            case Management m:
                idPref += "m" + m.Id + "-";
                break;
            case Rule r:
                if (!toMgmtObj)
                    idPref += "r" + r.Id + "-";
                else
                    idPref += "m" + r.MgmtId + "-";
                break;
        }
        switch (objCategory)
        {
            case nobj:
                idPref += "nwobj";
                break;
            case nsrv:
                idPref += "svc";
                break;
            case user:
                idPref += "user";
                break;
        }

        return idPref;
    }
    private string GetID(byte objCategory, long objId)
    {
        return GetIDPrefix(objCategory) + objId;
    }

    private string GetIconClass(byte objCategory, string type)
    {
        switch (type)
        {
            case "group" when objCategory == user:
                return "oi oi-people";
            case "group":
                return "oi oi-list-rich";
            case "host":
                return "oi oi-laptop";
            case "network":
                return "oi oi-rss";
            case "ip_range":
                return "oi oi-resize-width";
            default:
                switch (objCategory)
                {
                    case nobj:
                        return "oi oi-laptop";
                    case nsrv:
                        return "oi oi-wrench";
                    case user:
                        return "oi oi-person";
                }
                return "";
        }
    }

    RenderFragment AddLinkToObject(byte objCategory, long objId, string type, string name)
    {
        byte targetTab = Tab == allTab ? allTab : reportTab;
        string htmlObjRefPrefix = GetIDPrefix(objCategory, targetTab, true);

        string page = Recert ? "certification" : "report";
        
        return @<a href="@(page)#@(htmlObjRefPrefix + objId)" target="_top"><span class="@GetIconClass(objCategory, type)">&nbsp;</span>@(name)</a>;
    }

    private async Task HandleUncollapse(byte objCategory)
    {
        if (Tab != ruleTab)
            await FetchContent(objCategory);
        anchorNavToRSB?.ScrollToFragmentIfMatch(GetIDPrefix(objCategory));
    }

    private async Task FetchContent(byte objCategory)
    {
        try
        {
            if (Tab == ruleTab && objCategory != 0)
                return;

            if (objCategory == all && !ContentIsDetailed || objCategory == nobj && !nobjDetailed || objCategory == nsrv && !nsrvDetailed || objCategory == user && !userDetailed)
            {
                if(FetchObjects != null)
                {
                    switch (Content)
                    {
                        case Management m:
                            await FetchObjects((byte)(Tab + objCategory),
                                managementsUpdate =>
                                {
                                    int id = m.Id;
                                    Management? m_updated = managementsUpdate.FirstOrDefault(mgmt => mgmt.Id == m.Id);
                                    if (m_updated != null)
                                    {
                                        switch (objCategory)
                                        {
                                            case all:
                                                m = m_updated; break;
                                            case nobj:
                                                m.Objects = m_updated.Objects; break;
                                            case nsrv:
                                                m.Services = m_updated.Services; break;
                                            case user:
                                                m.Users = m_updated.Users; break;
                                        }

                                        Content = (InputDataType)(Object)m;
                                    }
                                    return InvokeAsync(StateHasChanged);
                                }, m.Id, false);

                            break;

                        case Rule r:
                            await FetchObjects((byte)(Tab + objCategory),
                                managementsUpdate =>
                                {
                                    Rule? r_updated = managementsUpdate.SelectMany(m => m.Devices).SelectMany(d => d.Rules ?? new Rule[0]).FirstOrDefault();
                                    if (r_updated != null)
                                    {
                                        r_updated.DeviceName = r.DeviceName;
                                        Content = (InputDataType)(Object)r_updated;
                                    }
                                    return InvokeAsync(StateHasChanged);
                                 }, r.Id, !string.IsNullOrEmpty(r.NatData?.TranslatedSource));

                            break;
                    }
                }

                nobjDetailed = nobjDetailed || objCategory == 0 || objCategory == 1;
                nsrvDetailed = nsrvDetailed || objCategory == 0 || objCategory == 2;
                userDetailed = userDetailed || objCategory == 0 || objCategory == 3;

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }
}
