@using BlazorTable
@using FWO.Config.Api
@using FWO.GlobalConstants
@using FWO.Api.Data
@using FWO.Report
@using FWO.Ui.Display

@inject UserConfig userConfig
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@typeparam InputDataType

@if(Content != null && InitialContent != null)
{
    // InitialContent may be overwritten with data of different rule when rerendering RSB Rule tab objgroups after unselecting a rule
    if (typeof(InputDataType) == typeof(Rule))
    {
        Content = InitialContent;
    }
    <Collapse Title="@(NameExtractor != null ? NameExtractor(Content) : "")" UseHtmlTitle="@(Tab == RsbTab.rule)" Style="@("primary")" StartToggled="StartCollapsed">
        <TitleWithHtml>
            @if (typeof(InputDataType) == typeof(Rule))
            {
                Rule rule = (Rule)(Object)Content;
                @($"{rule.DeviceName} - {userConfig.GetText("rule")} ")
                if (rule.Uid != null)
                {
                    if (rule.Uid.Length > 5)
                    {
                        string shortId = rule.Uid.Substring(rule.Uid.Length - 5, 5);
                        <Tooltip Text="@rule.Uid">@($"..{shortId} ")</Tooltip>
                    }
                    else
                    {
                        @($"{rule.Uid} ")
                    }
                }
                @rule.Name
            }
        </TitleWithHtml>
        <ChildContent>
            @if(NetworkObjectExtractor != null)
            {
                <Collapse Title="@(userConfig.GetText("network_objects"))" StartToggled="StartCollapsed"  OnOpen="() => HandleUncollapse(ObjCategory.nobj)">
                    <Table style="font-size:small" class="table table-bordered table-sm th-bg-secondary table-responsive" TableItem="NetworkObject"
                            Items="@NetworkObjectExtractor(Content)" PageSize="PageSize" ColumnReorder="true">
                        <Column TableItem="NetworkObject" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Class="word-break">
                            <Template>
                                <div style="@(context.Highlighted ? GlobalConst.kStyleHighlighted : "")">
                                    <span class="@ReportBase.GetIconClass(ObjCategory.nobj, context.Type.Name)">&nbsp;</span>
                                    <b id="@(GetID(ObjCategory.nobj, context.Id))">@(context.Name)</b>
                                </div>
                            </Template>
                        </Column>
                        <DetailTemplate TableItem="NetworkObject">
                            <Detail Title="@(userConfig.GetText("type"))" Data=@(context.Type != null ? context.Type.Name : "") />
                            <Detail Title="@(userConfig.GetText("uid"))" Data=@context.Uid />
                            <Detail Title="@(userConfig.GetText("ip"))" Data=@NwObjDisplay.DisplayIp(context.IP, context.IpEnd, context.Type.Name) />
                            <Detail Title="@(userConfig.GetText("zone"))" Data=@context.Zone?.Name />
                            @if (context.Type.Name == ObjectType.Group && context.ObjectGroups != null && context.ObjectGroupFlats != null)
                            {
                                if(Tab == RsbTab.usedObj || Tab == RsbTab.unusedObj)
                                {
                                    foreach (Group<NetworkObject> member in context.ObjectGroups)
                                    {
                                        if(member.Object != null)
                                        {
                                            <div style="@(context.Highlighted ? GlobalConst.kStyleHighlighted : "")"><span class=\"{Icons.NwObject}\"></span> @DisplayBase.DisplayIpWithName(member.Object)</div>
                                        }
                                    }
                                }
                                else
                                {
                                    <ContentSwap Title1="@(userConfig.GetText("group_members"))" Title2="@(userConfig.GetText("group_members_flat"))">
                                        <Content1>
                                            @foreach (Group<NetworkObject> member in context.ObjectGroups)
                                            {
                                                if(member.Object != null)
                                                {
                                                    @AddLinkToObject(ObjCategory.nobj, member.Object.Id, member.Object.Type.Name, member.Object.Name, member.Object.Highlighted)
                                                    <br>
                                                }
                                            }
                                        </Content1>
                                        <Content2>
                                            @{ List<long> shownMemberIds = []; }
                                            @foreach (GroupFlat<NetworkObject> member in context.ObjectGroupFlats)
                                            {
                                                if(member.Object != null)
                                                {
                                                    if (member.Object.Type.Name == ObjectType.Group || shownMemberIds.Contains(member.Object.Id))
                                                        continue;
                                                    shownMemberIds.Add(member.Object.Id);

                                                    @AddLinkToObject(ObjCategory.nobj, member.Object.Id, member.Object.Type.Name, member.Object.Name, member.Object.Highlighted)
                                                    <br>
                                                }
                                            }
                                        </Content2>
                                    </ContentSwap>
                                }
                            }
                            @if(context.CreateTime.Time.Year > 1)
                            {
                                <Detail Title="@(userConfig.GetText("last_changed"))" Data=@context.CreateTime.Time.ToString() />
                            }
                            <Detail Title="@(userConfig.GetText("comment"))" Data=@context.Comment />
                        </DetailTemplate>
                    </Table>
                </Collapse>
            }
            @if(NetworkServiceExtractor != null)
            {
                <Collapse Title="@(userConfig.GetText("services"))" StartToggled="StartCollapsed" OnOpen="() => HandleUncollapse(ObjCategory.nsrv)">
                    <Table style="font-size:small" class="table table-bordered table-sm th-bg-secondary table-responsive" TableItem="NetworkService"
                            Items="@NetworkServiceExtractor(Content)" PageSize="PageSize" ColumnReorder="true">
                        <Column TableItem="NetworkService" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Class="word-break">
                            <Template>
                                <span class="@ReportBase.GetIconClass(ObjCategory.nsrv, context.Type.Name)">&nbsp;</span>
                                <b id="@(GetID(ObjCategory.nsrv, context.Id))">@(context.Name)</b>
                            </Template>
                        </Column>
                        <DetailTemplate TableItem="NetworkService">
                            <Detail Title="@(userConfig.GetText("type"))" Data=@(context.Type != null ? context.Type.Name : "") />
                            <Detail Title="@(userConfig.GetText("uid"))" Data=@context.Uid />
                            @if (context.Type.Name != ServiceType.Group)
                            {
                                <Detail Title="@(userConfig.GetText("source_port"))" Data=@(context.SourcePort == context.SourcePortEnd || context.SourcePortEnd.ToString() == "" ? 
                                    context.SourcePort.ToString() : $"{context.SourcePort.ToString()}-{context.SourcePortEnd.ToString()}") />
                                <Detail Title="@(userConfig.GetText("destination_port"))" Data=@(context.DestinationPort == context.DestinationPortEnd || context.DestinationPortEnd.ToString() == "" ? 
                                    context.DestinationPort.ToString() : $"{context.DestinationPort.ToString()}-{context.DestinationPortEnd.ToString()}") />
                                <Detail Title="@(userConfig.GetText("protocol"))" Data=@context.Protocol?.Name />
                                <Detail Title="@(userConfig.GetText("code"))" Data=@context.Code />
                                <Detail Title="@(userConfig.GetText("timeout"))" Data=@context.Timeout.ToString() />
                            }
                            @if (context.Type.Name == ServiceType.Group && context.ServiceGroups != null && context.ServiceGroupFlats != null)
                            {
                                if(Tab == RsbTab.usedObj || Tab == RsbTab.unusedObj)
                                {
                                    foreach (Group<NetworkService> member in context.ServiceGroups)
                                    {
                                        if(member.Object != null)
                                        {
                                            <div><span class=\"{Icons.Service}\"></span> @DisplayBase.DisplayService(member.Object, false)</div>
                                        }
                                    }
                                }
                                else
                                {
                                    <ContentSwap Title1="@(userConfig.GetText("group_members"))" Title2="@(userConfig.GetText("group_members_flat"))">
                                        <Content1>
                                            @foreach (Group<NetworkService> member in context.ServiceGroups)
                                            {
                                                if(member.Object != null)
                                                {
                                                    @AddLinkToObject(ObjCategory.nsrv, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                    <br>
                                                }
                                            }
                                        </Content1>
                                        <Content2>
                                            @{ List<long> shownMemberIds = []; }
                                            @foreach (GroupFlat<NetworkService> member in context.ServiceGroupFlats)
                                            {
                                                if(member.Object != null)
                                                {
                                                    if (member.Object.Type.Name == ServiceType.Group || shownMemberIds.Contains(member.Object.Id))
                                                        continue;
                                                    shownMemberIds.Add(member.Object.Id);

                                                    @AddLinkToObject(ObjCategory.nsrv, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                    <br>
                                                }
                                            }
                                        </Content2>
                                    </ContentSwap>
                                }
                            }
                            @if(context.CreateTime.Time.Year > 1)
                            {
                                <Detail Title="@(userConfig.GetText("last_changed"))" Data=@context.CreateTime.Time.ToString() />
                            }
                            <Detail Title="@(userConfig.GetText("comment"))" Data=@context.Comment />
                        </DetailTemplate>
                    </Table>
                </Collapse>
            }
            @if(NetworkUserExtractor != null)
            {
                <Collapse Title="@(userConfig.GetText("users"))" StartToggled="StartCollapsed" OnOpen="() => HandleUncollapse(ObjCategory.user)">
                    <Table style="font-size:small" class="table table-bordered table-sm th-bg-secondary table-responsive"
                            TableItem="NetworkUser" Items="@NetworkUserExtractor(Content)" PageSize="PageSize" ColumnReorder="true">
                        <Column TableItem="NetworkUser" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Class="word-break">
                            <Template>
                                <span class="@ReportBase.GetIconClass(ObjCategory.user, context.Type.Name)">&nbsp;</span>
                                <b id="@(GetID(ObjCategory.user, context.Id))">@(context.Name)</b>
                            </Template>
                        </Column>
                        <DetailTemplate TableItem="NetworkUser">
                            <Detail Title="@(userConfig.GetText("type"))" Data=@(context.Type != null ? context.Type.Name : "") />
                            <Detail Title="@(userConfig.GetText("uid"))" Data=@context.Uid />
                            <Detail Title="@(userConfig.GetText("real_name"))" Data=@($"{context.FirstName} {context.LastName}") />
                            @if (context.Type != null && context.Type.Name == ObjectType.Group && context.UserGroups != null && context.UserGroupFlats != null)
                            {
                                <ContentSwap Title1="@(userConfig.GetText("group_members"))" Title2="@(userConfig.GetText("group_members_flat"))">
                                    <Content1>
                                        @foreach (Group<NetworkUser> member in context.UserGroups)
                                        {
                                            if(member.Object != null)
                                            {
                                                @AddLinkToObject(ObjCategory.user, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content1>
                                    <Content2>
                                        @{ List<long> shownMemberIds = []; }
                                        @foreach (GroupFlat<NetworkUser> member in context.UserGroupFlats)
                                        {
                                            if(member.Object != null)
                                            {
                                                if (member.Object.Type.Name == ObjectType.Group || shownMemberIds.Contains(member.Object.Id))
                                                    continue;
                                                shownMemberIds.Add(member.Object.Id);

                                                @AddLinkToObject(ObjCategory.user, member.Object.Id, member.Object.Type.Name, member.Object.Name)
                                                <br>
                                            }
                                        }
                                    </Content2>
                                </ContentSwap>
                            }
                            <Detail Title="@(userConfig.GetText("last_changed"))" Data=@context.CreateTime.Time.ToString() />
                            <Detail Title="@(userConfig.GetText("comment"))" Data=@context.Comment />
                        </DetailTemplate>
                    </Table>
                </Collapse>
            }
        </ChildContent>
    </Collapse>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    AnchorNavToRSB? anchorNavToRSB { get; set; }

    [Parameter]
    public Func<RsbTab, ObjCategory, Func<ReportData, Task>, long, bool, Task>? FetchObjects { get; set; }

    [Parameter]
    public bool Recert { get; set; }

    [Parameter]
    public RsbTab Tab { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public bool StartCollapsed { get; set; } = true;

    [Parameter]
    public bool StartContentDetailed { get; set; } = false;

    [Parameter]
    public Func<InputDataType, string>? NameExtractor { get; set; }

    [Parameter]
    public InputDataType? InitialContent { get; set; }

    [Parameter]
    public Func<InputDataType, IEnumerable<NetworkObject>>? NetworkObjectExtractor { get; set; }

    [Parameter]
    public Func<InputDataType, IEnumerable<NetworkService>>? NetworkServiceExtractor { get; set; }

    [Parameter]
    public Func<InputDataType, IEnumerable<NetworkUser>>? NetworkUserExtractor { get; set; }

    [Parameter]
    public bool Reload { get; set; } = false;


    // Parameter Variables are being overwritten, because something happens with the component on StateHasChanged (but the Initialize Task does not get called)
    public InputDataType? Content { get; set; }
    public bool ContentIsDetailed => nobjDetailed && nsrvDetailed && userDetailed;
    private bool nobjDetailed = false;
    private bool nsrvDetailed = false;
    private bool userDetailed = false;

    protected override async Task OnInitializedAsync()
    {
        Content = InitialContent;
        if (StartContentDetailed)
        {
            await FetchContent(ObjCategory.all);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Reload)
        {
            Content = InitialContent;
        }
    }

    private string GetIDPrefix(ObjCategory objCategory, RsbTab? tab = null, bool toMgmtObj = false)
    {
        string idPref = "";
        switch (tab ?? Tab)
        {
            case RsbTab.all:
                idPref += "all-";
                break;
            case RsbTab.report:
                idPref += "report-";
                break;
            case RsbTab.rule:
                idPref += "rule-";
                break;
        }
        switch (Content)
        {
            case ManagementReport m:
                idPref += "m" + m.Id + "-";
                break;
            case Rule r:
                if (!toMgmtObj)
                    idPref += "r" + r.Id + "-";
                else
                    idPref += "m" + r.MgmtId + "-";
                break;
        }
        switch (objCategory)
        {
            case ObjCategory.nobj:
                idPref += ObjCatString.NwObj;
                break;
            case ObjCategory.nsrv:
                idPref += ObjCatString.Svc;
                break;
            case ObjCategory.user:
                idPref += ObjCatString.User;
                break;
        }

        return idPref;
    }
    
    private string GetID(ObjCategory objCategory, long objId)
    {
        return GetIDPrefix(objCategory) + objId;
    }

    RenderFragment AddLinkToObject(ObjCategory objCategory, long objId, string type, string name, bool highlighted=false)
    {
        @* if(Tab == RsbTab.usedObj || Tab == RsbTab.unusedObj)
        {
            return @<span class="@ReportBase.GetIconClass(objCategory, type)">@name</span>;
        } *@
        RsbTab targetTab = Tab == RsbTab.all ? RsbTab.all : RsbTab.report;
        string htmlObjRefPrefix = GetIDPrefix(objCategory, targetTab, true);

        string page = Recert ? PageName.Certification : PageName.ReportGeneration;
        
        return @<a style="@(highlighted ? GlobalConst.kStyleHighlighted : "")" href="@(page)#goto-@(htmlObjRefPrefix + objId)" target="_top"><span class="@ReportBase.GetIconClass(objCategory, type)">&nbsp;</span>@(name)</a>;
    }

    private async Task HandleUncollapse(ObjCategory objCategory)
    {
        if (Tab != RsbTab.rule)
            await FetchContent(objCategory);
        anchorNavToRSB?.ScrollToFragmentIfMatch(GetIDPrefix(objCategory));
    }

    private async Task FetchContent(ObjCategory objCategory)
    {
        try
        {
            if (Tab == RsbTab.rule && objCategory != ObjCategory.all)
                return;

            if (objCategory == ObjCategory.all && !ContentIsDetailed || objCategory == ObjCategory.nobj && !nobjDetailed ||
                objCategory == ObjCategory.nsrv && !nsrvDetailed || objCategory == ObjCategory.user && !userDetailed)
            {
                if(FetchObjects != null)
                {
                    switch (Content)
                    {
                        case ManagementReport mgt:
                            await FetchObjects(Tab, objCategory,
                                managementsUpdate =>
                                {
                                    ManagementReport? mgtUpdated = managementsUpdate.ManagementData.FirstOrDefault(m => m.Id == mgt.Id);
                                    if (mgtUpdated != null)
                                    {
                                        switch (objCategory)
                                        {
                                            case ObjCategory.all:
                                                mgt = mgtUpdated;
                                                break;
                                            case ObjCategory.nobj:
                                                mgt.Objects = mgtUpdated.Objects;
                                                mgt.ReportObjects = mgtUpdated.ReportObjects;
                                                break;
                                            case ObjCategory.nsrv:
                                                mgt.Services = mgtUpdated.Services;
                                                mgt.ReportServices = mgtUpdated.ReportServices;
                                                break;
                                            case ObjCategory.user:
                                                mgt.Users = mgtUpdated.Users;
                                                mgt.ReportUsers = mgtUpdated.ReportUsers;
                                                break;
                                        }
                                        Content = (InputDataType)(Object)mgt;
                                    }
                                    return InvokeAsync(StateHasChanged);
                                }, mgt.Id, false);
                            break;

                        case Rule rule:
                            await FetchObjects(Tab, objCategory,
                                managementsUpdate =>
                                {
                                    Rule? ruleUpdated = managementsUpdate.ManagementData.SelectMany(m => m.Devices).SelectMany(d => d.Rules ?? new Rule[0]).FirstOrDefault();
                                    if (ruleUpdated != null)
                                    {
                                        ruleUpdated.DeviceName = rule.DeviceName;
                                        Content = (InputDataType)(Object)ruleUpdated;
                                    }
                                    return InvokeAsync(StateHasChanged);
                                 }, rule.Id, !string.IsNullOrEmpty(rule.NatData?.TranslatedSource));
                            break;
                    }
                }

                nobjDetailed = nobjDetailed || objCategory == ObjCategory.all || objCategory == ObjCategory.nobj;
                nsrvDetailed = nsrvDetailed || objCategory == ObjCategory.all || objCategory == ObjCategory.nsrv;
                userDetailed = userDetailed || objCategory == ObjCategory.all || objCategory == ObjCategory.user;

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }
}
