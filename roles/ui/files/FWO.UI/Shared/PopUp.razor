@if (Show)
{
    //The not *custom* popupsizes will be deprecated soon
    <div class="modal-backdrop popup-outer">
        <div class="modal-open" tabindex="-1">
                                    <div class="@(SizeClass())">
                <div class="modal-content @(SizeClassContent())">
                    <div class="modal-header justify-content-between">
                        <h5 class="modal-title">@Title</h5>
                        <button type="button" class="modern-close" @onclick="Close">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @Body
                    </div>
                </div>
                <div class="custom-modal-footer">
                    <hr>
                    <div class="modal-footer">
                        @Footer
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public string Title { get; set; } = "EMPTY_TITLE";

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public bool Show { get; set; } = false;

    [Parameter]
    public PopupSize Size { get; set; } = PopupSize.CustomSmall;

    [Parameter]
    public bool Scrollable { get; set; } = true;

    [Parameter]
    public Action OnClose { get; set; } = new Action(() => { });
        
    private string SizeClass()
    {
        switch (Size)
        {
            case PopupSize.CustomFullScreen: return "custom-modal-fs";
            case PopupSize.CustomXLarge: return "custom-modal-xl";
            case PopupSize.CustomLarge: return "custom-modal-lg";
            case PopupSize.CustomMedium: return "custom-modal-md";
            case PopupSize.CustomSmall: return "custom-modal-sm";
            default: return "custom-modal-sm";
        };
    }

    private string SizeClassContent()
    {
        switch (Size)
        {
            case PopupSize.CustomFullScreen: return "custom-modal-content-fs";
            case PopupSize.CustomXLarge: return "custom-modal-content-xl";
            case PopupSize.CustomLarge: return "custom-modal-content-lg ";
            case PopupSize.CustomMedium: return "custom-modal-content-md";
            case PopupSize.CustomSmall: return "custom-modal-content-sm";

            default: return "custom-modal-content-sm";
        };
    }

    private void Close()
    {
        Show = false;
        OnClose();
    }
}
