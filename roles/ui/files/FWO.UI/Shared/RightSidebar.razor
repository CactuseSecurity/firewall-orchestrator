@using FWO.Data.Modelling
@using FWO.Data.Report
@using FWO.Report
@using FWO.Report.Filter
@using FWO.Ui.Data
@using System

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<Sidebar Collapsible="true" Resizeable="true" PositionLeft="false" @bind-Width="intWidth">
    <div class="p-3 mt-2">
        <h5 class="text-center">@(userConfig.GetText("objects"))</h5>
        <TabSet @ref="tabset" DarkMode="true" KeepPanelsAlive="true" RsbStyle="true">
            <AnchorNavToRSB @ref="anchorNavToRSB" TabSet="tabset" CollapseState="collapseInRSB" />
            <CascadingValue Value="collapseInRSB">
                <CascadingValue Value="anchorNavToRSB">
                    @if (SelectedReportType.IsDeviceRelatedReport() && AllTabVisible)
                    {
                        <Tab Title="@(userConfig.GetText("all"))" Position=0>
                            <div class="d-md-flex justify-content-md-end sticky-marker-45">
                                <div class="btn btn-secondary btn-sm w-50" @onclick="@(() => collapseInRSB.Collapse("all"))">@(userConfig.GetText("collapse_all"))</div>
                            </div>
                            <div class="mt-2">
                                <ObjectGroupCollection PageSize="PageSize" FetchObjects="FetchContent" Recert="Recert" Tab="RsbTab.all" InputDataType="ManagementReport" Data="managementsAllObjects"
                                NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                                NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
                            </div>
                        </Tab>
                    }
                    @if (CurrentReport?.ReportData.ManagementData.Count > 0 && (CurrentReport?.ReportType.IsRuleReport() ?? false))
                    {
                        <Tab Title="@(userConfig.GetText("report"))" StartSelected="true">
                            <div class="d-md-flex justify-content-md-end sticky-marker-45">
                                <div class="btn btn-secondary btn-sm w-50" @onclick="@(() => collapseInRSB.Collapse("report"))">@(userConfig.GetText("collapse_all"))</div>
                            </div>
                            <div class="mt-2">
                                <ObjectGroupCollection PageSize="PageSize" FetchObjects="FetchContent" Recert="Recert" Tab="RsbTab.report" InputDataType="ManagementReport"
                                Data="CurrentReport.ReportData.ManagementData
                                                                            .Where(m => m.Devices.Any(d => d.RulebaseLinks != null && d.RulebaseLinks.Any(rb => rb.NextRulebaseId != null)))"

                                NameExtractor="man => man.Name"
                                NetworkObjectExtractor="man => man.ReportObjects"
                                NetworkServiceExtractor="man => man.ReportServices"
                                NetworkUserExtractor="man => man.ReportUsers" />
                            </div>
                        </Tab>
                        <Tab Title="@(userConfig.GetText("rule"))">
                            <div class="btn-group btn-group-sm d-md-flex justify-content-md-between sticky-marker-45">
                                <div class="btn btn-dark btn-sm w-50" @onclick="@(async () => { SelectedRules.Clear(); await SelectedRulesChanged.InvokeAsync(SelectedRules); })">@(userConfig.GetText("clear_all"))</div>
                                <div class="btn btn-secondary btn-sm w-50" @onclick="@(() => collapseInRSB.Collapse("rule"))">@(userConfig.GetText("collapse_all"))</div>
                            </div>
                            <div class="mt-2">
                                <ObjectGroupCollection PageSize="PageSize" FetchObjects="FetchContent" Recert="Recert" Tab="RsbTab.rule" StartContentDetailed="true" StartCollapsed="false" InputDataType="Rule"
                                Data="selectedRulesDetailed.Where(r => SelectedRules.Any(sr => sr.Id == r.Id)).ToList()"
                                NameExtractor=@(rule => $"{rule.DeviceName} - Rule {rule.Id} {rule.Name}")
                                NetworkObjectExtractor="rule => rule.Froms.Select(nl => nl.Object)
                                                                        .Union(rule.Tos.Select(nl => nl.Object))
                                                                        .Union(rule.NatData.TranslatedFroms.Select(nl => nl.Object))
                                                                        .Union(rule.NatData.TranslatedTos.Select(nl => nl.Object)).OrderBy(o => o.Name).ToArray()"
                                NetworkServiceExtractor="rule => rule.Services.Select(sw => sw.Content)
                                                                        .Union(rule.NatData.TranslatedServices.Select(sw => sw.Content)).OrderBy(s => s.Name).ToArray()"
                                NetworkUserExtractor="rule => rule.Froms.Select(nl => nl.User).Distinct().Where(u => u != null).OrderBy(u => u.Name).ToArray()" />
                            </div>
                        </Tab>
                    }
                    @if (CurrentReport?.ReportData.OwnerData.Count > 0 && (bool)CurrentReport?.ReportType.IsOwnerRelatedReport())
                    {
                        <Tab Title="@(CurrentReport?.ReportType == ReportType.VarianceAnalysis ? userConfig.GetText("modelled_objects") : userConfig.GetText("used_objects"))" StartSelected="true">
                            <div class="d-md-flex justify-content-md-end sticky-marker-45">
                                <div class="btn btn-secondary btn-sm w-50" @onclick="@(() => collapseInRSB.Collapse("report"))">@(userConfig.GetText("collapse_all"))</div>
                            </div>
                            <div class="mt-2">
                                <ObjectGroupCollection PageSize="PageSize" FetchObjects="FetchContent" Recert="Recert" Tab="RsbTab.usedObj" StartCollapsed="false" InputDataType="OwnerReport"
                                Data="@(PrepareObjects(CurrentReport.ReportData.OwnerData))"
                                NameExtractor="own => own.Name"
                                NetworkObjectExtractor="own => own.GetAllNetworkObjects(true, userConfig.ResolveNetworkAreas)"
                                NetworkServiceExtractor="own => own.GetAllServices(true)" />
                                <ObjectGroupCollection PageSize="PageSize" FetchObjects="FetchContent" Recert="Recert" Tab="RsbTab.usedObj" StartCollapsed="false" InputDataType="GlobalCommonSvcReport"
                                Data="CurrentReport.ReportData.GlobalComSvc"
                                NameExtractor="glbComSvc => glbComSvc.Name"
                                NetworkObjectExtractor="glbComSvc => glbComSvc.GetAllNetworkObjects(true, userConfig.ResolveNetworkAreas)"
                                NetworkServiceExtractor="glbComSvc => glbComSvc.GetAllServices(true)" />
                            </div>
                        </Tab>
                    }
                </CascadingValue>
            </CascadingValue>
        </TabSet>
    </div>
</Sidebar>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public ReportBase? CurrentReport { get; set; }

    [Parameter]
    public List<Rule> SelectedRules { get; set; } = [];

    [Parameter]
    public EventCallback<List<Rule>> SelectedRulesChanged { get; set; }

    [Parameter]
    public bool AllTabVisible { get; set; } = true;

    [Parameter]
    public ReportType SelectedReportType { get; set; } = ReportType.Rules;

    [Parameter]
    public TimeFilter LSBTime { get; set; } = new();

    [Parameter]
    public bool Recert { get; set; } = false;

    private FWO.Ui.Shared.TabSet tabset = new();
    private FWO.Ui.Shared.AnchorNavToRSB anchorNavToRSB = new();
    private CollapseState collapseInRSB = new();

    /// <summary>
    /// List of all managements. Will include detailed objects fetched on demand.
    /// </summary>
    private List<ManagementReport> managementsAllObjects = new();
    /// <summary>
    /// List of managements copied from current report. Will include detailed objects fetched on demand.
    /// </summary>
    private List<ManagementReport> managementsReportObjects = new();
    /// <summary>
    /// List of detailed rules copied from selected rules. Keeps deselected rules cached for the current report.
    /// </summary>
    private List<Rule> selectedRulesDetailed = new();

    private string rsbTimeShortcut = "";
    private string rsbTimeStart = "";
    private string rsbTimeEnd = "";
    private Dictionary<int, long> import_id_start = new(); // import id matching rsbTimeStart for each management
    private Dictionary<int, long> import_id_end = new(); // import id matching rsbTimeEnd for each management
    private ReportBase? previousReport = null;

    private int intWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width); } }

    private readonly int PageSize = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AllTabVisible)
        {
            setRSBTime();
            await ResetAllTabMgts();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        bool timeChanged = setRSBTime();
        if (AllTabVisible && timeChanged)
            await ResetAllTabMgts();
        if (CurrentReport != previousReport)
        {
            previousReport = CurrentReport;
            ResetReportState();
        }
        foreach (Rule rule in SelectedRules)
        {
            if (!selectedRulesDetailed.Any(r => r.Id == rule.Id))
            {
                selectedRulesDetailed.Add(new () { Id = rule.Id, Name = rule.Name, MgmtId = rule.MgmtId });
            }
        }
    }

    public void ResetReportState()
    {
        managementsReportObjects = new();
        foreach (ManagementReport mgt in CurrentReport?.ReportData.ManagementData ?? new List<ManagementReport>())
        {
            if (mgt.Devices.Any(d => d.ContainsRules()))
            {
                managementsReportObjects.Add(new() { Id = mgt.Id, Name = mgt.Name });
            }
        }
    }

    private async Task ResetAllTabMgts()
    {
        try
        {
            import_id_start = await GetImportIds(rsbTimeStart);
            import_id_end = await GetImportIds(rsbTimeEnd);
            Dictionary<string, object> queryVars = new()
            {
                ["limit"] = 1,
                ["offset"] = 0,
                ["import_id_start"] = import_id_start.Values.Any(v => v > 0) ? import_id_start.Values.Where(v => v > 0).Min() : 0,
                ["import_id_end"] = import_id_end.Values.Max(),
            };
            var mgmResult = await apiConnection.SendQueryAsync<List<ManagementReport>>(ObjectQueries.getAllObjectDetails, queryVars);
            managementsAllObjects = mgmResult.Where(m => m.Objects.Count() > 0 || m.Services.Count() > 0 || m.Users.Count() > 0).ToList();
            collapseInRSB.Collapse("all");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    private bool setRSBTime()
    {
        string prevStart = rsbTimeStart;
        string prevEnd = rsbTimeEnd;

        if (SelectedReportType.IsRuleReport())
        {
            if (LSBTime.IsShortcut)
            {
                if (rsbTimeShortcut == LSBTime.TimeShortcut)
                    return false;
                rsbTimeStart = DateTime.Now.ToString(DynGraphqlQuery.fullTimeFormat);
                rsbTimeShortcut = LSBTime.TimeShortcut;
            }
            else
            {
                rsbTimeStart = LSBTime.ReportTime.ToString(DynGraphqlQuery.fullTimeFormat);
                rsbTimeShortcut = "";
            }

            rsbTimeEnd = rsbTimeStart;
        }
        else if (SelectedReportType.IsChangeReport())
        {
            (rsbTimeStart, rsbTimeEnd) = DynGraphqlQuery.ResolveTimeRange(LSBTime);
        }

        return prevStart != rsbTimeStart || prevEnd != rsbTimeEnd;
    }

    private async Task<Dictionary<int, long>> GetImportIds(string time, int? mgmId = null)
    {
        Dictionary<string, object> queryVars = new()
        {
            ["time"] = time != "" ? time : DateTime.Now.ToString(DynGraphqlQuery.fullTimeFormat),
        };
        if (mgmId != null)
            queryVars.Add("mgmIds", mgmId);
        List<ManagementReport> result = await apiConnection.SendQueryAsync<List<ManagementReport>>(ReportQueries.getRelevantImportIdsAtTime, queryVars);
        Dictionary<int, long> importIds = new();
        foreach (ManagementReport mgm in result)
        {
            importIds[mgm.Id] = mgm.Import.ImportAggregate.ImportAggregateMax.RelevantImportId ?? 0;
        }
        return importIds;
    }

    public async Task FetchContent(RsbTab rsbTab, ObjCategory objType, Func<Task> hasChangedCallback, long id = 0, bool nat = false)
    {
        Log.WriteDebug("Fetching Content..", $"nat: {nat}");

        try
        {
            string query = "";
            Dictionary<String, object> queryVars = new()
            {
                { "limit", userConfig.ElementsPerFetch },
                { "offset", 0 }
            };
            bool gotAllObjects = true;

            switch (rsbTab)
            {
                case RsbTab.all:
                    ManagementReport? mgt = managementsAllObjects.FirstOrDefault(m => m.Id == id);
                    if (mgt == null) break;

                    if (objType == ObjCategory.all)
                        mgt.Detailed = [true, true, true];
                    else
                        mgt.Detailed[(int)objType - 1] = true;

                    queryVars.Add("management_id", (int)id);
                    queryVars.Add("import_id_start", import_id_start.GetValueOrDefault((int)id, 0));
                    queryVars.Add("import_id_end", import_id_end.GetValueOrDefault((int)id, 0));

                    switch (objType)
                    {
                        case ObjCategory.all:
                            query = ObjectQueries.getAllObjectDetails;
                            break;
                        case ObjCategory.nobj:
                            query = ObjectQueries.getNetworkObjectDetails;
                            break;
                        case ObjCategory.nsrv:
                            query = ObjectQueries.getNetworkServiceObjectDetails;
                            break;
                        case ObjCategory.user:
                            query = ObjectQueries.getUserDetails;
                            break;
                    }

                    await FetchObjects<ManagementReport>(query, queryVars, managementsUpdate =>
                    {
                        ManagementReport? mgtUpdated = managementsUpdate.FirstOrDefault(m => m.Id == id);
                        if (mgt != null && mgtUpdated != null)
                        {
                            if (objType == ObjCategory.all || objType == ObjCategory.nobj)
                            {
                                mgt.Objects = mgtUpdated.Objects;
                                mgt.ReportObjects = mgtUpdated.ReportObjects;
                            }
                            if (objType == ObjCategory.all || objType == ObjCategory.nsrv)
                            {
                                mgt.Services = mgtUpdated.Services;
                                mgt.ReportServices = mgtUpdated.ReportServices;
                            }
                            if (objType == ObjCategory.all || objType == ObjCategory.user)
                            {
                                mgt.Users = mgtUpdated.Users;
                                mgt.ReportUsers = mgtUpdated.ReportUsers;
                            }
                        }
                        return hasChangedCallback();
                    });

                    break;
                case RsbTab.report:
                    ManagementReport? mgtReport = CurrentReport?.ReportData.ManagementData.FirstOrDefault(m => m.Id == id && m.Devices.Any(d => d.RulebaseLinks != null && d.RulebaseLinks.Any(rb => rb.NextRulebaseId != null)));

                    queryVars.Add("mgmIds", (int)id);
                    if (mgtReport != null)
                    {
                        if (objType == ObjCategory.all)
                            mgtReport.Detailed = [true, true, true];
                        else
                            mgtReport.Detailed[(int)objType - 1] = true;

                        gotAllObjects = await CurrentReport!.GetObjectsForManagementInReport(queryVars, objType,
                            userConfig.AutoFillRightSidebar ? int.MaxValue : userConfig.MaxInitialFetchesRightSidebar, apiConnection, managementsUpdate =>
                        {
                            ManagementReport? mgtUpdated = managementsUpdate.ManagementData.FirstOrDefault(m => m.Id == id);
                            if (mgtReport != null && mgtUpdated != null)
                            {
                                if (objType == ObjCategory.all || objType == ObjCategory.nobj)
                                {
                                    mgtReport.ReportObjects = mgtUpdated.ReportObjects;
                                }
                                if (objType == ObjCategory.all || objType == ObjCategory.nsrv)
                                {
                                    mgtReport.ReportServices = mgtUpdated.ReportServices;
                                }
                                if (objType == ObjCategory.all || objType == ObjCategory.user)
                                {
                                    mgtReport.ReportUsers = mgtUpdated.ReportUsers;
                                }
                            }
                            return hasChangedCallback();
                        });
                    }
                    if (!gotAllObjects)
                    {
                        DisplayMessageInUi(null, userConfig.GetText("object_fetch_warning"), userConfig.GetText("E0021"), true);
                    }
                    break;
                case RsbTab.rule:
                    Rule? rule = selectedRulesDetailed.FirstOrDefault(r => r.Id == id);
                    if (rule == null) break;

                    rule.Detailed = true;

                    queryVars.Add("import_id_start", import_id_start.GetValueOrDefault((int)rule.MgmtId, 0));
                    queryVars.Add("import_id_end", import_id_end.GetValueOrDefault((int)rule.MgmtId, 0));
                    queryVars.Add("rule_id", id);
                    query = nat ? RuleQueries.getNatRuleDetails : RuleQueries.getRuleDetails;

                    await FetchObjects<Rule>(query, queryVars, rulesUpdate =>
                    {
                        Rule? ruleUpdated = rulesUpdate.Where(r => r.Id == id).FirstOrDefault();
                        if (ruleUpdated != null)
                        {
                            rule.Froms = ruleUpdated.Froms;
                            rule.Tos = ruleUpdated.Tos;
                            rule.NatData.TranslatedFroms = ruleUpdated.NatData.TranslatedFroms;
                            rule.NatData.TranslatedTos = ruleUpdated.NatData.TranslatedTos;
                            rule.Services = ruleUpdated.Services;
                            rule.NatData.TranslatedServices = ruleUpdated.NatData.TranslatedServices;
                        }
                        return hasChangedCallback();
                    });
                    break;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    private async Task FetchObjects<ContentType>(string query, Dictionary<string, object> queryVars, Func<List<ContentType>, Task> callback)
    {
        // lazy fetch all objects for right sidebar
        try
        {
            List<ContentType> updatedContent = new();
            bool newObjects = true;
            int fetchCount = 0;
            int elementsPerFetch = userConfig.ElementsPerFetch;

            while (newObjects && (++fetchCount <= userConfig.MaxInitialFetchesRightSidebar || userConfig.AutoFillRightSidebar))
            {
                List<ContentType> currentFetch = await apiConnection.SendQueryAsync<List<ContentType>>(query, queryVars);
                if (fetchCount == 1)
                {
                    updatedContent = currentFetch;
                }
                else
                {
                    switch (currentFetch)
                    {
                        case List<ManagementReport> mgmData when updatedContent is List<ManagementReport> updatedMgm:
                            newObjects = updatedMgm.Merge(mgmData);
                            break;
                        case List<Rule> ruleData:
                            return;
                    }
                }

                if (queryVars.ContainsKey("offset"))
                    queryVars["offset"] = (int)queryVars["offset"] + elementsPerFetch;
                await callback(updatedContent);
            }

            Log.WriteDebug("Lazy Fetch", $"Fetched sidebar objects in {fetchCount - 1} cycle(s) ({elementsPerFetch} at a time)");

            if (fetchCount > userConfig.MaxInitialFetchesRightSidebar && !userConfig.AutoFillRightSidebar)
                DisplayMessageInUi(null, userConfig.GetText("object_fetch_warning"), userConfig.GetText("E0021"), true);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
        }
    }

    private List<OwnerReport> PrepareObjects(List<OwnerReport> ownerData)
    {
        if(CurrentReport?.ReportType == ReportType.VarianceAnalysis)
        {
            List<OwnerReport> ownerDataForRsb = [];
            foreach(var ownerReport in ownerData)
            {
                ownerDataForRsb.Add(ReportVariances.CollectObjectsInReport(ownerReport));
            }
            return ownerDataForRsb;
        }
        return ownerData;
    }
}
