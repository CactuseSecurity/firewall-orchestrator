<div class="sidebar-main d-flex flex-row @SidebarContainerCssClass" style="@(PositionLeft ? "left: 0px;" : "right: 0px;")">
    @if (!PositionLeft)
    {
        if (Collapsible)
        {
            <div class="btn-dark btn-sm sidebar-min-max-button align-self-center text-left" @onclick="MinMaxSidebar" draggable="@(Resizeable.ToString())" @ondragstart="ResizeStart" @ondragend="Resize">
                <div class="oi oi-@minMaxButtonSymbol" style="vertical-align: top; margin-left:-5px; margin-top:-3px;"></div>
            </div>
        }

        <div class="sidebar-sizer" draggable="@(Resizeable.ToString())" @ondragstart="ResizeStart" @ondragend="Resize"></div>
    }

    <div class="@SidebarCssClass" style="width:@($"{Width}px"); overflow-x:@overflowSidebar;">
        @* Sidebar Content *@
        @ChildContent
    </div>

    @if (PositionLeft)
    {
        <div class="sidebar-sizer" draggable="@(Resizeable.ToString())" @ondragstart="ResizeStart" @ondragend="Resize"></div>

        if (Collapsible)
        {
            <div class="btn-dark btn-sm sidebar-min-max-button align-self-center text-left" style="transform:rotate(180deg);" @onclick="MinMaxSidebar" draggable="@(Resizeable.ToString())" @ondragstart="ResizeStart" @ondragend="Resize">
                <div class="oi oi-@minMaxButtonSymbol" style="vertical-align: top; margin-left:-5px; margin-top:-3px;"></div>
            </div>
        }
    }
</div>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string SidebarContainerCssClass { get; set; }

    [Parameter]
    public string SidebarCssClass { get; set; }

    [Parameter]
    public bool PositionLeft { get; set; } = true;

    [Parameter]
    public bool Collapsible { get; set; } = false;

    [Parameter]
    public bool Resizeable { get; set; } = true;

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    private bool Collapsed = false;

    [CascadingParameter]
    private Action<string, string> ShowError { get; set; }

    private double resizeStartX;

    private int WidthBeforeMinimize;

    private string minMaxButtonSymbol = "collapse-right";
    private string overflowSidebar = "auto";

    private void ResizeStart(DragEventArgs dragArgs)
    {
        if (!Collapsed)
        {
            dragArgs.DataTransfer.DropEffect = "link";
            dragArgs.DataTransfer.EffectAllowed = "copyMove";
            resizeStartX = dragArgs.ScreenX;
        }
    }

    private void Resize(DragEventArgs mouseArgs)
    {
        if (!Collapsed)
        {
            int postitionDiffrence = (int)(resizeStartX - mouseArgs.ScreenX);

            if (PositionLeft)
                postitionDiffrence = -postitionDiffrence;

            Width = (int)(Width + postitionDiffrence) > 0 ? (int)(Width + postitionDiffrence) : 1;
            AdjustSidebarOverflow();
            WidthChanged.InvokeAsync(Width);
        }
    }

    private void MinMaxSidebar()
    {
        ToggleCollapse(!Collapsed);
    }

    public void ToggleCollapse(bool collapse)
    {
        if (Collapsed != collapse)
        {
            if (collapse)
            {
                minMaxButtonSymbol = "collapse-left";

                WidthBeforeMinimize = Width;
                Width = 0;
                WidthChanged.InvokeAsync(Width);
            }
            else
            {
                minMaxButtonSymbol = "collapse-right";

                Width = WidthBeforeMinimize;
                WidthChanged.InvokeAsync(Width);
            }

            Collapsed = !Collapsed;
            AdjustSidebarOverflow();
        }
    }

    private void AdjustSidebarOverflow()
    {
        overflowSidebar = Width < 5 ? "hidden" : "auto";
    }
}
