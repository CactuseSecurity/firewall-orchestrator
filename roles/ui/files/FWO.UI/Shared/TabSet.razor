@implements IDisposable

<!-- Display the tab headers -->
<ul class="@GetNavClasses()">
    @foreach (Tab tab in Tabs)
    {
        <li class="nav-item">
            <a href="" @onclick="() => SetActiveTab(tab)" @onclick:preventDefault class="@GetTabLinkClasses(tab)">
                @tab.Title
            </a>
        </li>
    }
</ul>

<CascadingValue Value="this" IsFixed="true">
    <!-- Display active tab -->
    <div class="nav-tabs-body pt-3">
        @ChildContent
    </div>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool DarkMode { get; set; } = false;

    [Parameter]
    public bool KeepPanelsAlive { get; set; }

    [Parameter]
    public bool WholeWidth { get; set; } = true;

    [Parameter]
    public bool RsbStyle { get; set; } = false;

    public List<Tab> Tabs = new List<Tab>();

    public Tab? ActiveTab { get; private set; }

    private bool _isDisposed;

    private string GetNavClasses()
    {
        var classes = new List<string> { "nav", "nav-tabs" };
        if (WholeWidth) classes.Add("nav-fill");
        classes.Add("sticky-marker");
        if (DarkMode) classes.Add("nav-tabs-dark");
        if (DarkMode) classes.Add("nav-tabs-border-transparent");
        if (RsbStyle) classes.Add("nav-tabs-rsb");
        return string.Join(" ", classes);
    }

    private string GetTabLinkClasses(Tab tab)
    {
        var classes = new List<string> { "nav-link" };
        if (DarkMode) classes.Add("text-white");
        else          classes.Add("text-dark");
        if (ActiveTab == tab)
        {
            classes.Add("nav-link-active");
            if (RsbStyle) classes.Add("nav-link-active-rsb");
        }
        else
        {
            classes.Add("nav-link-inactive");
            if (RsbStyle) classes.Add("nav-link-inactive-rsb");
        }
        if (RsbStyle) classes.Add("nav-link-rsb-hover");
        return string.Join(" ", classes);
    }

    internal void AddTab(Tab tab, int pos = -1)
    {
        Tabs.Insert(pos >= 0 && pos <= Tabs.Count ? pos : Tabs.Count, tab);
        if (ActiveTab == null || Tabs.Count == 1)
        {
            SetActiveTab(tab);
        }
        StateHasChanged();
    }

    internal void RemoveTab(Tab tab)
    {
        if (_isDisposed)
        {
            return;
        }

        var index = Tabs.IndexOf(tab);
        if (ActiveTab != null && tab == ActiveTab)
        {
            SetActiveTab(Tabs[index > 0 ? index - 1 : 0]);
            if (Tabs.Count == 1)
            {
                ActiveTab = null;
            }
        }
        Tabs.Remove(tab);
        StateHasChanged();
    }

    public void SetActiveTab(Tab? tab)
    {
        if (tab == null)
            return;

        if (Tabs.Contains(tab) && (ActiveTab == null || ActiveTab != tab))
        {
            ActiveTab = tab;
            StateHasChanged();
        }
    }

    public void SetActiveTab(int index)
    {
        if (Tabs.Count > index && (ActiveTab == null || ActiveTab != Tabs[index]))
        {
            ActiveTab = Tabs[index];
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _isDisposed = true;
    }
}