<th class="@HeadClass">
    <div class="d-inline-flex align-items-center">
        @Title

        <div class="d-block">
            @if(Hideable)
            {
                <i class="bi bi-eye-slash ps-2 @HideClass"></i>
            }
            @if(Sortable)
            {
                <i class="bi @GetSortClass() ps-2 @SortClass" @onclick="OnSortClick"></i>
            }
        </div>
    </div>
</th>

@code {
    [Parameter, EditorRequired]
    public required string Title { get; set; }

    [Parameter]
    public string? HeadClass { get; set; }

    [Parameter]
    public bool Hideable { get; set; }

    [Parameter]
    public string? HideClass { get; set; }

    [Parameter]
    public bool Sortable { get; set; }

    [Parameter]
    public string? SortClass { get; set; }

    [Parameter]
    public EventCallback<string> OnSort { get; set; }

    [Parameter]
    public bool SortAscending { get; set; }

    [Parameter]
    public string? SortContext { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if(Sortable && (!OnSort.HasDelegate || string.IsNullOrEmpty(SortContext)))
        {
            throw new InvalidOperationException($"{nameof(TableHead)}({Title}): " +
            $"{nameof(Sortable)} is {Sortable}, but {nameof(OnSort)} EventCallback is {OnSort.HasDelegate} and {nameof(SortContext)} is {SortContext}.\n" +
            $"If {nameof(Sortable)} is 'True', then {nameof(OnSort)} EvenCallback and {nameof(SortContext)} has to be set!");
        }
    }

    private void OnSortClick()
    {
        if(Sortable && OnSort.HasDelegate && !string.IsNullOrEmpty(SortContext))
            OnSort.InvokeAsync(SortContext);
    }

    private string GetSortClass()
    {
        return Sortable ? (SortAscending ? "bi-sort-up" : "bi-sort-down") : string.Empty;
    }
}
