@using FWO.Data.Report
@typeparam TItem

<table class="table">
    <thead>
        <tr>
            <th @onclick="() => SortBy(nameof(Rule.Name))">
                Name
                @if(SortColumn == nameof(Rule.Name))
                {
                    @((MarkupString)SortingIcon())
                }
            </th>
            <th @onclick="() => SortBy(nameof(Rule.OrderNumber))">
                Nummer
                @if(SortColumn == nameof(Rule.OrderNumber))
                {
                    @((MarkupString)SortingIcon())
                }
            </th>
        </tr>
    </thead>
    <tbody>
        @if(SortedNodes is not null)
        {
            @foreach(var node in SortedNodes)
            {
                <TreeTableRow TItem="TItem" Node="node" Level="0" CellTemplate="CellTemplate" OnToggle="ToggleNode" />
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<string> Columns { get; set; } = new();

    [Parameter]
    public List<TreeNode<TItem>> Nodes { get; set; } = new();

    [Parameter]
    public RenderFragment<TItem> CellTemplate { get; set; }

    [Parameter]
    public Action<TreeNode<TItem>> OnToggle { get; set; }

    private string SortColumn { get; set; } = nameof(Rule.OrderNumber);
    private bool SortAscending { get; set; } = true;

    private IEnumerable<TreeNode<TItem>> SortedNodes =>
        SortNodes(Nodes);

    private void SortBy(string column)
    {
        if(SortColumn == column)
            SortAscending = !SortAscending;
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
    }

    private IEnumerable<TreeNode<TItem>> SortNodes(IEnumerable<TreeNode<TItem>> nodes)
    {
        if(typeof(TItem) == typeof(Rule))
        {
            if(SortColumn == nameof(Rule.Name))
            {
                return SortAscending
                    ? nodes.OrderBy(n => ((Rule)(object)n.Item).Name)
                    : nodes.OrderByDescending(n => ((Rule)(object)n.Item).Name);
            }
            else if(SortColumn == nameof(Rule.OrderNumber))
            {
                return SortAscending
                    ? nodes.OrderBy(n => ((Rule)(object)n.Item).OrderNumber)
                    : nodes.OrderByDescending(n => ((Rule)(object)n.Item).OrderNumber);
            }
        }
        return nodes;
    }

    private void ToggleNode(TreeNode<TItem> node)
    {
        node.IsExpanded = !node.IsExpanded;
    }

    private MarkupString SortingIcon()
    {
        return new MarkupString($@"<span class=""{(SortAscending ? "oi oi-caret-bottom" : "oi oi-caret-top")}""></span>");
    } 
}
