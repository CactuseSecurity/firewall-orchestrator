@using FWO.Data.Report
@using FWO.Report
@using FWO.Report.Data
@using FWO.Ui.Display
@inject UserConfig userConfig
@typeparam TItem

<tr class="@(IsSectionHeader() ? "section-header" : "")">
    <td class="tree-cell" style="padding-left:@(Level * 1)rem;" colspan="@GetColumnSpan()">
        @if(Node.Children.Any())
        {
            <button class="btn btn-sm toggle-btn" @onclick="() => OnToggle(Node)">
                @if(Node.IsExpanded)
                {
                    <span class="oi oi-collapse-down"></span>
                }
                else
                {
                    <span class="oi oi-collapse-right"></span>
                }
            </button>
        }
        else
        {
            <span class="indent-placeholder"></span>
        }
        @CellTemplate(Node.Item)
    </td>
    
    @if(!IsSectionHeader() && RuleItem is not null)
    {
        <td>@RuleItem.DisplayOrderNumberString</td>
        <td>@((MarkupString)RuleDisplayHtml.DisplaySourceZone(RuleItem))</td>
        <td>
            @((MarkupString)RuleDisplay.DisplaySource(RuleItem, OutputLocation.report, ReportType.Rules))            
        </td>
        <td>@((MarkupString)RuleDisplayHtml.DisplayDestinationZone(RuleItem))</td>
        <td>
            @((MarkupString)RuleDisplay.DisplayDestination(RuleItem, OutputLocation.report, ReportType.Rules))            
        </td>
        <td>
            @((MarkupString)RuleDisplay.DisplayServices(RuleItem, OutputLocation.report, ReportType.Rules))            
        </td>
        <td>@RuleItem.Action</td>
        <td>@RuleItem.Track</td>
        <td>@((MarkupString)RuleDisplayHtml.DisplayEnabled(RuleItem, OutputLocation.report))</td>
        <td>@RuleItem.Uid</td>
        <td>@RuleItem.Comment</td>
    }
</tr>

@if(Node.IsExpanded)
{
    @foreach(TreeNode<TItem> child in Node.Children)
    {
        <TreeTableRow TItem="TItem" Node="child" Level="Level + 1" CellTemplate="CellTemplate" OnToggle="OnToggle" RuleDisplay="RuleDisplay" />
    }
}

@code {
    [Parameter] 
    public TreeNode<TItem> Node { get; set; }

    [Parameter] 
    public int Level { get; set; }

    [Parameter] 
    public RenderFragment<TItem> CellTemplate { get; set; }

    [Parameter] 
    public Action<TreeNode<TItem>> OnToggle { get; set; }

    [Parameter]
    public NatRuleDisplayHtml RuleDisplay { get; set; }

    private Rule? RuleItem => Node.Item as Rule;

    private bool IsSectionHeader() => RuleItem?.SectionHeader != null;

    private string GetColumnSpan()
    {
        if(Node.Item is Rule rule && !string.IsNullOrEmpty(rule.SectionHeader))
        {
            return "12"; // Span all columns for section headers
        }

        return "1";
    }
}
