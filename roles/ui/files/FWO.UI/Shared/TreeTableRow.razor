@using FWO.Data.Report
@using FWO.Report
@using FWO.Report.Data
@using FWO.Ui.Display
@inject UserConfig userConfig
@typeparam TItem

<tr class="@(Node.Type == RulebaseType.Section ? "section-header" : "")">
    <td class="tree-cell" colspan="@GetColumnSpan()">
        <span class="tree-indent" style="width:@(Level * 1.5)rem;"></span>
        @if(Node.Children.Any())
        {
            <button class="btn btn-sm toggle-btn p-2 mx-1" @onclick="() => OnToggle(Node)">
                @if(Node.IsExpanded)
                {
                    <span class="oi oi-caret-bottom"></span>
                }
                else
                {
                    <span class="oi oi-caret-right"></span>
                }
            </button>
        }
        else
        {
            <span class="indent-placeholder"></span>
        }
        @CellTemplate(Node.Item)
    </td>
    @if(!IsSectionHeader() && RuleItem is not null)
    {
        <td>@RuleItem.DisplayOrderNumberString</td>
        <td>@((MarkupString)RuleDisplayHtml.DisplaySourceZone(RuleItem))</td>
        <td>
            @((MarkupString)RuleDisplay.DisplaySource(RuleItem, OutputLocation.report, ReportType.Rules))
        </td>
        <td>@((MarkupString)RuleDisplayHtml.DisplayDestinationZone(RuleItem))</td>
        <td>
            @((MarkupString)RuleDisplay.DisplayDestination(RuleItem, OutputLocation.report, ReportType.Rules))
        </td>
        <td>
            @((MarkupString)RuleDisplay.DisplayServices(RuleItem, OutputLocation.report, ReportType.Rules))
        </td>
        <td class="text-center">@RuleDisplayHtml.DisplayActionMarkup(RuleItem)</td>
        <td class="text-center">@RuleDisplayHtml.DisplayLogMarkup(RuleItem)</td>
        <td class="text-center @GetRuleDisabledClass(RuleItem.Disabled)">@((MarkupString)RuleDisplayHtml.DisplayEnabled(RuleItem, OutputLocation.report))</td>
        <td title="@RuleItem.Uid" class="cursor-pointer" style="min-width: 135px;" @onclick="ToggleUid">
            @if(ShowFullUid)
            {
                <span>
                    @RuleItem.Uid
                </span>
            }
            else
            {
                @TruncateColumnUIDText(RuleItem.Uid)
                <span class="oi oi-eye text-secondary text-info-hover ms-1"></span>
            }
        </td>
        <td title="@RuleItem.Comment" class="cursor-pointer text-center" @onclick="ToggleComment">
            @if (string.IsNullOrWhiteSpace(RuleItem.Comment))
            {
                <i class="bi bi-dash-lg"></i>
            }
            else
            {
                @if(ShowFullComment)
                {
                    <span>
                        @RuleItem.Comment
                    </span>
                }
                else
                {
                    @TruncateColumnText(RuleItem.Comment, 20)
                    <span class="oi oi-eye text-secondary"></span>
                }
            }
        </td>        
    }
</tr>

@if(Node.IsExpanded)
{
    @foreach(TreeNode<TItem> child in Node.Children)
    {
        <TreeTableRow TItem="TItem" Node="child" Level="Level + 1" CellTemplate="CellTemplate" OnToggle="OnToggle" RuleDisplay="RuleDisplay" />
    }
}

@code {
    [Parameter]
    public TreeNode<TItem> Node { get; set; }

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public RenderFragment<TItem> CellTemplate { get; set; }

    [Parameter]
    public Action<TreeNode<TItem>> OnToggle { get; set; }

    [Parameter]
    public NatRuleDisplayHtml RuleDisplay { get; set; }

    private Rule? RuleItem => Node.Item as Rule;

    private bool IsSectionHeader() => RuleItem?.SectionHeader != null;
    private bool ShowFullUid = false;
    private bool ShowFullComment = false;

    private string GetColumnSpan()
    {
        if(Node.Type == RulebaseType.Section)
        {
            return "12"; // Span all columns for section headers
        }

        return "1";
    }

    /// <summary>
    /// Truncates the given text to a specified maximum length. If the text exceeds the maximum length,
    /// it is cut off and an ellipsis ("...") is appended. If the text is null or shorter than the maximum length,
    /// the original text is returned.
    /// </summary>
    /// <param name="text">The text to be truncated.</param>
    /// <param name="maxLength">The maximum allowed length of the text before truncation.</param>
    /// <returns>The truncated text with ellipsis if needed, or the original text.</returns>
    private string TruncateColumnText(string? text, int maxLength)
    {
        if(string.IsNullOrEmpty(text) || text.Length <= maxLength)
        {
            return text ?? string.Empty;
        }

        return text.Substring(0, maxLength) + "...";
    }

    /// <summary>
    /// Truncates a GUID-like string by displaying only the first segment (before the first dash)
    /// followed by "-...". If the input is null, empty, or does not contain a dash, returns an empty string.
    /// </summary>
    /// <param name="text">The GUID string to be truncated.</param>
    /// <returns>The truncated GUID string, or an empty string if input is invalid.</returns>
    private string TruncateColumnUIDText(string? text)
    {
        if(!string.IsNullOrEmpty(text) && text.TrySplit('-', 0, out string guidStart))
        {
            return guidStart + "-...";
        }

        return string.Empty;
    }

    private void ToggleUid()
    {
        ShowFullUid = !ShowFullUid;
    }

    private void ToggleComment()
    {
        ShowFullComment = !ShowFullComment;
    }

    private string GetActionClass(string action)
    {
        switch(action.ToLower())
        {           
            case "allow":
            case "accept":
                return "text-success";
            case "deny":
            case "reject":
            case "drop":
            case "block":
                return "text-danger";
            case "ask":
                return "text-info";
            default:
                return "";
        }
    }

    private string GetRuleDisabledClass(bool disabled)
    {
        switch(disabled)
        {
            case false:
                return "text-success";
            case true:
                return "text-danger";
        }
    }
}
