@using FWO.Data.Report
@using FWO.Report.Data
@typeparam TItem

<tr>
    <td style="" colspan="">
        <!-- GetColumnStyle() GetColumnSpan() -->
        @if(Node.Children.Any())
        {
            <button class="btn btn-sm btn-link p-1" @onclick="() => OnToggle(Node)">
                @if(Node.IsExpanded)
                {
                    <span class="oi oi-collapse-down"></span>
                }
                else
                {
                    <span class="oi oi-collapse-right"></span>
                }
            </button>
        }
        else
        {
            <span style="display:inline-block;width:1.2rem"></span>
        }
        @CellTemplate(Node.Item)
    </td>
    <td>        
    </td>
    <td>
    </td>
    <td>
    </td>
</tr>

@if(Node.IsExpanded)
{
    @foreach(var child in Node.Children)
    {
        <TreeTableRow TItem="TItem" Node="child" Level="Level + 1" CellTemplate="CellTemplate" OnToggle="OnToggle" />
    }
}

@code {
    [Parameter] 
    public TreeNode<TItem> Node { get; set; }

    [Parameter] 
    public int Level { get; set; }

    [Parameter] 
    public RenderFragment<TItem> CellTemplate { get; set; }

    [Parameter] 
    public Action<TreeNode<TItem>> OnToggle { get; set; }

    private Rule? RuleItem => Node.Item as Rule;

    private string GetColumnStyle()
    {
        string color = "#ffff";
        string yellow = "#fbf3b5", gray = "#f0f1f3", lightBlue = "#bbe3fd";
        int rem = Level * 1;

        if(Node.Item is Rule)
        {
            Rule item = (Rule)Convert.ChangeType(Node.Item, typeof(Rule));

            //switch section/rulebase/inline
            // switch (item.HeaderType)
            // {
            //     case HeaderType.Section:
            //         color = yellow;
            //         break;
            //     case HeaderType.Rulebase:
            //         color = gray;
            //         rem -= 1;
            //         break;
            //     default:
            //         color = gray;
            //         rem -= 1;
            //         break;
            // }
        }

        return $"padding-left:{rem}rem; background-color: {color}";
    }

    private string GetColumnSpan()
    {
        if(Node.Item is Rule)
        {
            Rule item = (Rule)Convert.ChangeType(Node.Item, typeof(Rule));
            //switch section/rulebase/inline
            // switch(item.HeaderType)
            // {
            //     case HeaderType.Section:
            //         return "4";
            //     default: 
            //         return "1";
            // }
        }

        return "1";
    }
}
