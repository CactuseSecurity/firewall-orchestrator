@using System
@using System.Text.RegularExpressions
@using FWO.Ui.Data
@using FWO.Report.Filter
@using FWO.Report
@using FWO.Ui.Pages.Reporting.Reports

@page "/certification"

@inject APIConnection apiConnection
@inject UserConfig userConfig

@* ==== LEFT SIDEBAR ==== *@
<Sidebar @ref="deviceSelectionSidebar" Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth">
    <DeviceSelection Managements="managements" @bind-FilterInput="filterInput" @bind-SelectAll="selectAll" ></DeviceSelection>
</Sidebar>

<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
    <h3>@(userConfig.GetText("recertification"))</h3>
    <div class="d-flex flex-row flex-wrap mb-2">
        <div class="mr-3">
            <div class="input-group input-group-sm">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="inputGroupSelect01">@(userConfig.GetText("due_within")):</label>
                </div>
                <input id="inputGroupSelect01" type="text" class="form-control form-control-sm" @bind="recertificationDisplayPeriod" />
                <div class="input-group-append">
                    <button class="btn btn-sm btn-primary" @onclick="() => GenerateRecertificationReport()">@(userConfig.GetText("load_rules"))</button>
                </div>
            </div>
        </div>
        <AuthorizeView Roles="admin, recertifier">
            <Authorized>
                <button class="btn btn-sm btn-dark" @onclick="() => RequestExecuteSelected()">@(userConfig.GetText("execute_selected"))</button>
            </Authorized>
            <NotAuthorized>
                <button class="btn btn-sm btn-dark" disabled>@(userConfig.GetText("execute_selected"))</button>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <RulesReport Recertification="true" Managements="managements" RulesPerPage="rulesPerPage" @bind-SelectedRules="selectedRules"></RulesReport>
</div>

<PopUp Title="@(userConfig.GetText("add_comment"))" Show="@AddCommentMode" Large="true" OnClose="() => AddCommentMode = false">
    <Body>
        @if (AddCommentMode)
        {
            <form onsubmit="return false">
                <div class="form-group row">
                    <label for="comment" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("comment") + (commentRequired ? "*:" : ":"))</label>
                    <div class="col-sm-8">
                        <input id="comment" type="text" class="form-control form-control-sm" @bind="actComment" />
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-primary" @onclick="() => ExecuteSelected()">@(userConfig.GetText("ok"))</button>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@*==== RIGHT SIDEBAR ====*@
<Sidebar Collapsible="true" Resizeable="true" PositionLeft="false" @bind-Width="sidebarRightWidth">
    <div class="p-3">
        <h5 class="text-center">@(userConfig.GetText("objects"))</h5>

        <TabSet KeepPanelsAlive="true">
            <Tab Title="@(userConfig.GetText("rule"))">
                <div class="d-md-flex justify-content-md-between">
                    <div class="btn btn-dark btn-sm mb-2" @onclick="@(() => selectedRules.Clear())">@(userConfig.GetText("clear_all"))</div>
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseControlObjects.CollapseAll())">@(userConfig.GetText("collapse_all"))</div>
                </div>
                <CascadingValue Value="collapseControlObjects">
                    <ObjectGroupCollection FetchObjects="FetchContent" Type="30" StartContentDetailed="true" StartCollapsed="false" InputDataType="Rule" Data="selectedRules"
                                           NameExtractor=@(rule => $"{rule.DeviceName} - Rule {rule.Id} {rule.Name}")
                                           NetworkObjectExtractor="rule => rule.Froms.Select(nl => nl.Object).Union(rule.Tos.Select(nl => nl.Object)).ToArray()"
                                           NetworkServiceExtractor="rule => Array.ConvertAll(rule.Services, wrapper => wrapper.Content)"
                                           NetworkUserExtractor="rule => Array.FindAll(rule.Froms.Select(nl => nl.User).Distinct().ToArray(), user => user != null)" />
                </CascadingValue>
            </Tab>
        </TabSet>
    </div>
</Sidebar>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    private const int rulesPerPage = 0;
    private int elementsPerFetch = 100;
    private int maxInitFetchRightSidebar = 20;
    private bool autoFillRightSidebar;

    private int recertificationPeriod = 365;
    private int recertificationNoticePeriod = 30;
    private int recertificationDisplayPeriod = 30;
    private int ruleRemovalGracePeriod = 60;
    private bool commentRequired = false;

    private int sidebarLeftWidth = 300;
    private int sidebarRightWidth = 300;
    private bool selectAll = true;

    private string filterInput = "remove=false and recertdisplay=0";

    private Management[] managements = new Management[0];
//    private Management[] managementsObjects = new Management[0];

    private List<Rule> selectedRules = new List<Rule>();
    private CollapseState collapseControlObjects = new CollapseState();

    private ReportBase currentReport;

    private Sidebar deviceSelectionSidebar;
    // private bool fullDeviceActionIsSelect = true;
    private bool AddCommentMode = false;
    private string actComment = "";

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            try
            {
                GetSettings();

                managements = await apiConnection.SendQueryAsync<Management[]>(DeviceQueries.getDevicesByManagements);
                await InvokeAsync(StateHasChanged);

//                PaginationVariables paginationVariables = new PaginationVariables() { Limit = 0, Offset = 0 };
//                managementsObjects = await apiConnection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);
//                await InvokeAsync(StateHasChanged);
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), null, true);
            }
        });
    }

    private async Task GenerateRecertificationReport()
    {
        // clear selected rules
        selectedRules.Clear();

        try
        {
            // when generating report, filter line overrules LSB filter, as this can be triggered by changing the filter line and pressing enter
            DeviceFilter.syncFilterLineToLSBFilter(filterInput, managements);
            SyncFilterToDisplay();

            currentReport = ReportBase.ConstructReport(filterInput);
            if (!DeviceFilter.isAnyDeviceFilterSet(managements, currentReport.Query))  // display pop-up with warning, todo: check if device is selected in filter line
            {
                DisplayMessageInUi(null, userConfig.GetText("no_device_selected"), userConfig.GetText("E1001"), true);
                return;
            }

            DateTime startTime = DateTime.Now;
            managements = new Management[0]; // reset management data when switching between reports

            await currentReport.Generate(elementsPerFetch, apiConnection,
            managementsReportIntermediate =>
            {
                managements = managementsReportIntermediate;
                return InvokeAsync(StateHasChanged);
            });

            PrepareMetadata();

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("generate_report"), null, true);
        }
    }

    private void SyncFilterToDisplay()
    {
        filterInput = Regex.Replace(filterInput, "recertdisplay=" + @"-?\d+", $"recertdisplay={(recertificationPeriod-recertificationDisplayPeriod).ToString()}");
    }

    private void PrepareMetadata()
    {
        foreach (Management management in managements)
        {
            foreach (Device device in management.Devices)
            {
                foreach (Rule rule in device.Rules)
                {
                    if (rule.Metadata.LastCertifierDn != null && rule.Metadata.LastCertifierDn != "")
                    {
                        rule.Metadata.LastCertifierName = (new FWO.Api.Data.DistName(rule.Metadata.LastCertifierDn)).UserName;
                    }
                    else
                    {
                        rule.Metadata.LastCertifierName = userConfig.GetText("unknown");
                    }

                    if (rule.Metadata.LastCertified != null)
                    {
                        rule.Metadata.NextRecert = ((DateTime)rule.Metadata.LastCertified).AddDays(recertificationPeriod);
                    }
                    else if (rule.Metadata.Created != null)
                    {
                        rule.Metadata.NextRecert = ((DateTime)rule.Metadata.Created).AddDays(recertificationPeriod);
                    }
                    else
                    {
                        rule.Metadata.NextRecert = DateTime.Now;
                    }

                    if(rule.Metadata.NextRecert <= DateTime.Now)
                    {
                        rule.Metadata.Style = "background-color: red";
                    }
                    else if(rule.Metadata.NextRecert <= DateTime.Now.AddDays(recertificationNoticePeriod))
                    {
                        rule.Metadata.Style = "background-color: yellow";
                    }
                }
            }
        }
    }

    public async Task FetchContent(byte contentType, Func<Management[], Task> callback, long id = 0)
    {
        const byte all = 10, report = 20, rule = 30, all_nobj = 11, all_nsrv = 12, all_user = 13, report_nobj = 21, report_nsrv = 22, report_user = 23;

        Log.WriteDebug("Fetching Content..", "");

        Management[] managements = new Management[0];

        try
        {
            GetSettings();

            string query = "";
            Dictionary<String, object> queryVars = new Dictionary<string, object>();

            bool newObjects = true;
            int fetchCount = 0;

            switch (contentType)
            {
                case all:
                    query = ObjectQueries.getAllObjectDetails;
                    break;
                case all_nobj:
                    query = ObjectQueries.getNetworkObjectDetails;
                    break;
                case all_nsrv:
                    query = ObjectQueries.getNetworkServiceObjectDetails;
                    break;
                case all_user:
                    query = ObjectQueries.getUserDetails;
                    break;
                case rule:
                    query = RuleQueries.getRuleDetails;
                    break;
            }

            switch (contentType)
            {
                case all or all_nobj or all_nsrv or all_user:

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", 0 },
                        { "management_id", id }
                    };

                    break;

                case report or report_nobj or report_nsrv or report_user:

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", 0 },
                        { "mgmIds", id }
                    };

                    await currentReport.GetObjectsForManagementInReport(queryVars, (byte)(contentType - report), apiConnection, callback);

                    return;

                case rule:

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", (int)0 },
                        { "rule_id", id }
                    };

                    break;
            }

            // lazy fetch all objects for right sidebar
            while (newObjects && (++fetchCount <= maxInitFetchRightSidebar || autoFillRightSidebar))
            {
                Management[] managementsCurrentFetch = await apiConnection.SendQueryAsync<Management[]>(query, queryVars);
                if (fetchCount == 1)
                {
                    managements = managementsCurrentFetch;
                }
                else
                {
                    newObjects = managements.Merge(managementsCurrentFetch);
                }

                if (queryVars.ContainsKey("offset"))
                    queryVars["offset"] = (int)queryVars["offset"] + elementsPerFetch;
                await callback(managements);
            }

            Log.WriteDebug("Lazy Fetch", $"Fetched sidebar objects in {fetchCount} cycle(s) ({elementsPerFetch} at a time)");
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), null, true);
        }
    }

    private void RequestExecuteSelected()
    {
        AddCommentMode = true;
    }

    private void Cancel()
    {
        AddCommentMode = false;
    }

    private async Task ExecuteSelected()
    {
        if(commentRequired && actComment == "")
        {
            DisplayMessageInUi(null, userConfig.GetText("execute_selected"), userConfig.GetText("E4001"), true);
            return;
        }
        AddCommentMode = false;
        try
        {
            // collect selected recerts + decerts
            List<long> RecertIds = new List<long>();
            List<long> DecertIds = new List<long>();
            
            foreach (Management management in managements)
            {
                foreach (Device device in management.Devices)
                {
                    foreach (Rule rule in device.Rules)
                    {
                        if(rule.Metadata.Recert)
                        {
                            RecertIds.Add(rule.Metadata.Id);
                        }
                        else if(rule.Metadata.ToBeRemoved)
                        {
                            DecertIds.Add(rule.Metadata.Id);
                        }
                    }
                }
            }

            // execute recertifications
            if (RecertIds.Count > 0)
            {
                var apiVariables = new 
                { 
                    ids = RecertIds.ToArray(), 
                    certDate = DateTime.Now, 
                    userDn = userConfig.User.Dn,
                    comment = actComment
                };
                await apiConnection.SendQueryAsync<object>(RuleQueries.updateRuleMetadataRecert, apiVariables);
            }

            // execute decertifications
            if (DecertIds.Count > 0)
            {
                var apiVariables = new 
                { 
                    ids = DecertIds.ToArray(),
                    decertDate = DateTime.Now,
                    comment = actComment
                };
                await apiConnection.SendQueryAsync<object>(RuleQueries.updateRuleMetadataDecert, apiVariables);
            }

            string txt = userConfig.GetText("recerts_executed") + RecertIds.Count.ToString() + ", " +
                         userConfig.GetText("decerts_executed") + DecertIds.Count.ToString();
            DisplayMessageInUi(null, userConfig.GetText("execute_selected"), txt, false);

            // reload updated report
            await GenerateRecertificationReport();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("execute_selected"), null, true);
        }
    }

    private void GetSettings()
    {
        try
        {
            GetBoolSetting(ref autoFillRightSidebar, GlobalConfig.kAutoFillRightSidebar);
            GetIntSetting(ref elementsPerFetch, GlobalConfig.kElementsPerFetch);
            GetIntSetting(ref maxInitFetchRightSidebar, GlobalConfig.kMaxInitialFetchesRightSidebar);
            GetIntSetting(ref recertificationPeriod, GlobalConfig.kRecertificationPeriod);
            GetIntSetting(ref recertificationNoticePeriod, GlobalConfig.kRecertificationNoticePeriod);
            GetIntSetting(ref recertificationDisplayPeriod, GlobalConfig.kRecertificationDisplayPeriod);
            GetIntSetting(ref ruleRemovalGracePeriod, GlobalConfig.kRuleRemovalGracePeriod);
            GetBoolSetting(ref commentRequired, GlobalConfig.kCommentRequired);
        }
        catch (Exception exception)
        {
            Log.WriteError("Read Config", $"Error reading config value", exception);
        }
    }

    private void GetIntSetting(ref int value, string setting)
    {
        string settingsValue = userConfig.GetConfigValue(setting);
        if (settingsValue != "")
        {
            value = Int32.Parse(settingsValue);
        }
    }

    private void GetBoolSetting(ref bool value, string setting)
    {
        string settingsValue = userConfig.GetConfigValue(setting);
        value = (settingsValue == "True" ? true : false);
    }
}
