@using BlazorTable
@using FWO.ApiClient
@using FWO.ApiClient.Queries
@using FWO.Ui.Data.API
@using FWO.Ui.Data
@using FWO.Ui.Display
@using FWO.Ui.Filter
@using FWO.Ui.Filter.Exceptions

@inject APIConnection Connection

@page "/report"

<Sidebar Collapsible="true" Resizeable="true" InitialWidth="sidebarLeftWidth" PositionLeft="true" @bind-Width="sidebarLeftWidth">
    <div class="p-3">
        <h5 class="text-center">Report Type</h5>

        <div class="list-group small mt-3">
            <a class="list-group-item list-group-item-action active" @onclick="() => { }" href="report">Point in time</a>
            <a class="list-group-item list-group-item-action" @onclick="() => { }" href="#">Time intervall</a>
            <a class="list-group-item list-group-item-action" @onclick="() => { }" href="#">Compliance</a>
            <a class="list-group-item list-group-item-action" @onclick="() => { }" href="#">Statistics</a>
        </div>

        <hr />

        <button class="btn btn-primary btn-sm" @onclick="GenerateTestReport">Generate Report</button>

        <hr />

        @foreach (Management management in managementsOverview)
        {
            @if (management != null)
            {
                <Collapse Title="@(management.Name)" StartToggled="false" Style="@("primary")">
                    @foreach (Device device in management.Devices)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@($"man{management.Id}dev{device.Id}")" value="">
                            <label class="form-check-label" for="@($"man{management.Id}dev{device.Id}")">
                                @(device.Name)
                            </label>
                        </div>
                    }
                </Collapse>
            }
        }
    </div>
</Sidebar>

<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
    <h4 class="m-1">Reporting</h4>
    <button class="btn btn-secondary btn-sm m-1" @onclick="Export">Generate Pdf Export</button>
    <a href="downloads/test.pdf" target="_blank" download>Download Pdf Export</a>
    <button class="btn btn-danger btn-sm m-1" @onclick="() => ShowPopUp = true">Show Pop up</button>

    <PopUp Title="test" Show="@ShowPopUp">
        <Body>
            test
        </Body>
        <Footer>
            <button class="btn btn-sm btn-danger" @onclick="() => ShowPopUp = false">Close</button>
        </Footer>
    </PopUp>

    <form class="form-inline m-1">
        <div class="form-group mt-1 mb-1 mr-2">
            <label for="rulesPerDeviceHtml" class="mr-1">Load rules per fetch: </label>
            <input id="rulesPerDeviceHtml" type="number" class="form-control-sm" @bind="rulesPerFetch" />
        </div>
        <div class="form-group mt-1 mb-1">
            <label for="rulesPerPageHtml" class="mr-1">Show rules per page: </label>
            <input id="rulesPerPageHtml" type="number" class="form-control-sm" @bind="rulesPerPage" />
        </div>
    </form>

    <div class="mr-1 ml-1 position-relative">
        <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off" class="form-control" spellcheck="false" placeholder="Filter" @oninput="TryFilter" />
        <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off" class="form-control position-absolute" spellcheck="false">@filterFeedback</div>
    </div>

    <div class="card m-1 shadow">
        <div class="card-body">

            @foreach (Management management in managementsReport)
            {
                <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">
                    <hr />

                    @foreach (Device device in management.Devices)
                    {
                        <Collapse Title="@device.Name" Style="@("secondary")" StartToggled="false">

                            <Table SelectedItems="selectedItemsReportRuleTable"
                                   RowClickAction="tableItem => { if (!selectedItemsReportRuleTable.Remove(tableItem)) selectedItemsReportRuleTable.Add(tableItem); StateHasChanged(); }"
                                   style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Rule" Items="device.Rules" ShowSearchBar="true"
                                   PageSize="rulesPerPage" ColumnReorder="true" TableRowClass="@(rule => rule.SectionHeader != null ? "hide-all-but-second-child second-child-full-width" : "")">

                                <Column TableItem="Rule" Title="Number" DefaultSortColumn="true" Field="@(x => x.OrderNumber)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplayNumber(device.Rules))
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                                <Column TableItem="Rule" Title="Source Zone" Field="@(x => x.SourceZone)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplaySourceZone())
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="Source" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplaySource())
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="Destination Zone" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplayDestinationZone())
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="Destination" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplayDestination())
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="Services" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplayServices())
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="Action" Field="@(x => x.Action)" Sortable="true" Filterable="true" />
                                <Column TableItem="Rule" Title="Track" Field="@(x => x.Track)" Sortable="true" Filterable="true" />
                                <Column TableItem="Rule" Title="Disabled" Field="@(x => x.Disabled)" Sortable="true" Filterable="true">
                                    <Template>
                                        @((MarkupString)context.DisplayDisabled())
                                    </Template>
                                </Column>
                                <Column TableItem="Rule" Title="UID" Field="@(x => x.Uid)" Sortable="true" Filterable="true" />
                                <Column TableItem="Rule" Title="Comment" Field="@(x => x.Comment)" Sortable="true" Filterable="true" />

                                <DetailTemplate TableItem="Rule">
                                    <div>test</div>
                                </DetailTemplate>

                                <Pager ShowPageNumber="true" ShowTotalCount="true" />
                            </Table>
                        </Collapse>
                    }
                </Collapse>
            }
        </div>
    </div>
</div>

<Sidebar Collapsible="true" Resizeable="true" InitialWidth="sidebarRightWidth" PositionLeft="false" @bind-Width="sidebarRightWidth">
    <div class="p-3">
        <TabSet>
            <Tab Title="All">
                <ObjectGroup InputDataType="Management" Data="managementsAllObjects" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                             NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
            </Tab>
            <Tab Title="Report">
                <ObjectGroup InputDataType="Management" Data="managementsReport" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                             NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
            </Tab>
            <Tab Title="Rule">
                <ObjectGroup InputDataType="Rule" Data="selectedItemsReportRuleTable" NameExtractor="rule => rule.Name"
                             NetworkObjectExtractor="rule => Array.ConvertAll(rule.Tos.Concat(rule.Froms).ToArray(), location => location.Object)"
                             NetworkServiceExtractor="rule => Array.ConvertAll(rule.Services, wrapper => wrapper.Content)"
                             NetworkUserExtractor="rule => Array.FindAll(Array.ConvertAll(rule.Tos.Concat(rule.Froms).ToArray(), location => location.User), user => user != null)" />
            </Tab>
        </TabSet>
    </div>
</Sidebar>

@code
{
    private List<Rule> selectedItemsReportRuleTable = new List<Rule>();

    private Management[] managementsOverview = new Management[0];
    private Management[] managementsReport = new Management[0];
    private Management[] managementsAllObjects = new Management[0];

    private int rulesPerFetch = 10;
    private int rulesPerPage = 0;

    private bool ShowPopUp = false;

    private int sidebarLeftWidth = 300;
    private int sidebarRightWidth = 300;

    private MarkupString filterFeedback = new MarkupString("");
    private string filterInput = "";

    [CascadingParameter]
    Action<string, string> ShowError { get; set; }

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            try
            {
                PaginationVariables paginationVariables = new PaginationVariables() { Limit = rulesPerFetch, Offset = 0 };

                managementsAllObjects = await Connection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);
                await InvokeAsync(StateHasChanged);

                bool newObjects = true;

                while (newObjects)
                {
                    paginationVariables.Offset += rulesPerFetch;
                    Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);
                    newObjects = managementsAllObjects.Merge(managementsCurrentFetch);

                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception exception)
            {
                Log.WriteError("Object Fetching Error", "Error while fetching objects from API.", exception);
                ShowError("Object Fetching Error", "Error while fetching objects from API.");
            }
        });

        Task.Run(async () =>
        {
            managementsOverview = await Connection.SendQueryAsync<Management[]>(FWO.ApiClient.Queries.DeviceQueries.getDevicesByManagements);
            await InvokeAsync(StateHasChanged);
        });
    }

    private void GenerateTestReport()
    {
        Task.Run(async () =>
        {
            try
            {
                DynGraphqlQuery query = Compiler.Compile(filterInput);

                int limit = rulesPerFetch;
                int offset = 0;
                query.QueryVariables["limit"] = limit;
                query.QueryVariables["offset"] = offset;

                // with filter:
                string test = System.Text.Json.JsonSerializer.Serialize(query.QueryVariables);
                managementsReport = await Connection.SendQueryAsync<Management[]>(query.FullQuery, query.QueryVariables);
                await InvokeAsync(StateHasChanged);

                bool newObjects = true;

                while (newObjects)
                {
                    offset += rulesPerFetch;
                    query.QueryVariables["offset"] = offset;

                    // with filter:
                    Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management[]>(query.FullQuery, query.QueryVariables);
                    newObjects = managementsReport.Merge(managementsCurrentFetch);

                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception exception)
            {
                //this is the default error message when user's access rights are not sufficient (e.g. user = anonymous)
                //leave managementsReport as default = empty array
                if (exception.Message == "no such type exists in the schema: 'cidr'")
                {
                    Log.WriteError("Report generation", "User does not have sufficient access rights.", exception);
                    ShowError("Report generation", "You dont have sufficient acces rights.");
                }
                else
                {
                    Log.WriteError("Report generation", "Unclassified error.", exception);
                    ShowError("Report generation", "Unclassified error.");
                }
            }
        });
    }

    private void Export()
    {
        ReportPointInTimeExporter exporter = new ReportPointInTimeExporter() { Managements = managementsReport };
        string text = exporter.ToHtml();
        exporter.ToPdf();
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        DynGraphqlQuery query;

        try
        {
            filterInput = changeArgs.Value.ToString();
            filterFeedback = new MarkupString(filterInput);

            if (filterInput != "")
                query = Compiler.Compile(filterInput);
        }
        catch (FilterException filterError)
        {
            int errorStart = filterError.ErrorPosition.Start.Value;
            int errorEnd = filterError.ErrorPosition.End.Value;

            // TODO: RESTRUCTURE (current structure only for debug purpose)
            string t0 = $"{filterInput.Substring(0, errorStart)}";
            string t1 = $"<span class=\"error-underline\">{filterInput.Substring(errorStart, errorEnd + 1 - errorStart)}</span>";
            string t2 = $"{filterInput.Substring(errorEnd, filterInput.Length - 1 - errorEnd)}";

            filterFeedback = new MarkupString(t0 + t1 + t2);
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            ShowError("Filter Error", $"{unexpectedError.Message}\n{unexpectedError.StackTrace}");
#endif
        }
    }
}
