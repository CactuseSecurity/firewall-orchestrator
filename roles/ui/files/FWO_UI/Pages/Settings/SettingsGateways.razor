@using BlazorTable
@using FWO.Ui.Data.API
@using FWO.ApiClient

@page "/settings/gateways"

@inject APIConnection apiConnection

<h3 class="m-2">Gateways</h3>

<button class="btn btn-success m-2" @onclick="Add">Add new gateway</button>

<div class="m-2">
    <Table class="table table-bordered table-responsive" TableItem="Device" Items="devices" PageSize="0" ColumnReorder="true">
        <Column TableItem="Device" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true"/>
        <Column TableItem="Device" Title="Type" Field="@(x => x.DeviceType.Id)" Sortable="true" Filterable="true">
            <Template>
                @context.DeviceType.NameVersion()
            </Template>
        </Column>
        <Column TableItem="Device" Title="Management" Field="@(x => x.Management.Id)" Sortable="true" Filterable="true">
            <Template>
                @context.Management.Name
            </Template>
        </Column>
        <Column TableItem="Device" Title="Import Disabled" Field="@(x => x.ImportDisabled)" Sortable="true" Filterable="true"/>
        <Column TableItem="Device" Title="Action" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Clone(context)">Clone</button>
                    <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">Delete</button>
                </div>
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="Edit Gateway" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="deviceName" class="col-sm-4 col-form-label col-form-label-sm">Name:</label>
                    <div class="col-sm-8">
                        <input id="deviceName" type="text" class="form-control form-control-sm" @bind="actDevice.Name" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="deviceComment" class="col-sm-4 col-form-label col-form-label-sm">Comment:</label>
                    <div class="col-sm-8">
                        <textarea id="deviceComment" class="form-control form-control-sm" @bind="actDevice.Comment" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="deviceDevType" class="col-sm-4 col-form-label col-form-label-sm">Device Type:</label>
                    <div class="col-sm-8">
                        <select id="deviceDevType" class="form-control form-control-sm" @bind="actDevice.DeviceType.Id">
                            @foreach (DeviceType devType in deviceTypes)
                            {
                                <option value="@devType.Id">@(devType.NameVersion())</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="deviceManagement" class="col-sm-4 col-form-label col-form-label-sm">Management:</label>
                    <div class="col-sm-8">
                        <select id="deviceManagement" class="form-control form-control-sm" @bind="actDevice.Management.Id">
                            @foreach (Management management in managements)
                            {
                                <option value="@management.Id">@(management.Name)</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="deviceRulebase" class="col-sm-4 col-form-label col-form-label-sm">Rulebase:</label>
                    <div class="col-sm-8">
                        <input id="deviceRulebase" type="text" class="form-control form-control-sm" @bind="actDevice.Rulebase" />
                    </div>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="deviceImportDisabled" type="checkbox" @bind="actDevice.ImportDisabled">
                    <label class="form-check-label" for="deviceImportDisabled"><small>Import Disabled</small></label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="deviceHideInUi" type="checkbox" @bind="actDevice.HideInUi">
                    <label class="form-check-label" for="deviceHideInUi"><small>Hide in UI</small></label>
                </div>

                @if (errorMessage != "")
                {
                    <label class="m-2">@errorMessage</label>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-primary" @onclick="Save">Save</button>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="Delete" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <p>Are you sure you want to delete gateway "@(actDevice.Name)"?</p>

            @if (errorMessage != "")
            {
                <label class="m-2">@errorMessage</label>
            }
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-danger" @onclick="() => Delete(actDevice)">Delete</button>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

@code
{
    private List<Device> devices = new List<Device>();
    private List<DeviceType> deviceTypes = new List<DeviceType>();
    private List<Management> managements = new List<Management>();

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool AddMode = false;

    private Device newDevice;
    private Device actDevice;

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        devices = (await Task.Run(() => apiConnection.SendQueryAsync<Device[]>(FWO.ApiClient.Queries.BasicQueries.getDeviceDetails))).ToList();
        deviceTypes = (await Task.Run(() => apiConnection.SendQueryAsync<DeviceType[]>(FWO.ApiClient.Queries.BasicQueries.getDeviceTypeDetails))).ToList();
        managements = (await Task.Run(() => apiConnection.SendQueryAsync<Management[]>(FWO.ApiClient.Queries.BasicQueries.getManagementsDetails))).ToList();
    }

    private void Edit(Device device)
    {
        actDevice = new Device(device);
        EditMode = true;
    }

    private void RequestDelete(Device device)
    {
        actDevice = device;
        DeleteMode = true;
    }

    private async Task Delete(Device device)
    {
        try
        {
            // Todo: checks if delete possible. Else set e.g. an archive flag?
            var Variables = new { id = device.Id };
            int delId = (await Task.Run(() => apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.BasicQueries.deleteDevice, Variables))).DeletedId;
            if(delId == device.Id)
            {
                devices.Remove(device);
                DeleteMode = false;
            }
        }
        catch (Exception exception)
        {
            Log.WriteDebug("Delete Device", $"Exception occurred: {exception}");
            errorMessage = "Something went wrong with deleting: " + exception.Message;
        }
    }

    private void Add()
    {
        AddMode = true;
        newDevice = new Device()
        {
            DeviceType = new DeviceType { Id = deviceTypes.First().Id },
            Management = new Management { Id = managements.First().Id , DeviceType = new DeviceType { Id = deviceTypes.First().Id }}
        };
        Edit(newDevice);
    }

    private void Clone(Device device)
    {
        AddMode = true;
        newDevice = new Device(device);
        Edit(newDevice);
    }

    private async Task Save()
    {
        try
        {
            // Todo: Value checks?
            if (AddMode)
            {
                // insert new device
                var Variables = new
                {
                    name = actDevice.Name,
                    devTypeId = actDevice.DeviceType.Id,
                    managementId = actDevice.Management.Id,
                    rulebase = actDevice.Rulebase,
                    importDisabled = actDevice.ImportDisabled,
                    hideInUi = actDevice.HideInUi,
                    comment = actDevice.Comment
                };
                actDevice.Id = (await Task.Run(() => apiConnection.SendQueryAsync<NewReturning>(FWO.ApiClient.Queries.BasicQueries.newDevice, Variables))).ReturnIds[0].NewId;
                devices.Add(actDevice);
                AddMode = false;
                EditMode = false;
                errorMessage = "";
            }
            else
            {
                // Update existing device
                var Variables = new
                {
                    id = actDevice.Id,
                    name = actDevice.Name,
                    devTypeId = actDevice.DeviceType.Id,
                    managementId = actDevice.Management.Id,
                    rulebase = actDevice.Rulebase,
                    importDisabled = actDevice.ImportDisabled,
                    hideInUi = actDevice.HideInUi,
                    comment = actDevice.Comment
                };
                int udId = (await Task.Run(() => apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.BasicQueries.updateDevice, Variables))).UpdatedId;
                EditMode = (udId == actDevice.Id ? false : true);
                devices[devices.FindIndex(x => x.Id == actDevice.Id)] = actDevice;
                errorMessage = (EditMode ? "Something went wrong with saving changes" : "");
            }
            // update actDevice for immediate display
            actDevice.DeviceType.Name = deviceTypes.Find(x => x.Id == actDevice.DeviceType.Id).Name;
            actDevice.DeviceType.Version = deviceTypes.Find(x => x.Id == actDevice.DeviceType.Id).Version;
            actDevice.Management.Name = managements.Find(x => x.Id == actDevice.Management.Id).Name;
        }
        catch (Exception exception)
        {
            Log.WriteDebug("Save Device", $"Exception occurred: {exception}");
            errorMessage = "Something went wrong with saving: " + exception.Message;
        }
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        errorMessage = "";
    }
}
