@using BlazorTable
@using FWO.Ui.Data.API
@using FWO.ApiClient

@page "/settings/managements"

@inject APIConnection apiConnection

<h3 class="m-2">Managements</h3>

<button class="btn btn-success m-2" @onclick="Add">Add new management</button>

<div class="d-flex flex-column m-2">
    <Table class="table table-bordered table-responsive" TableItem="Management" Items="managements" @ref="table" PageSize="0" ColumnReorder="true">
        <Column TableItem="Management" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="Type" Field="@(x => x.DeviceType.Id)" Sortable="true" Filterable="true">
            <Template>
                @(context.DeviceType.NameVersion())
            </Template>
        </Column>
        <Column TableItem="Management" Title="Host" Field="@(x => x.Hostname)" Sortable="true" Filterable="true">
            <Template>
                @(context.Host())
            </Template>
        </Column>
        <Column TableItem="Management" Title="Config Path" Field="@(x => x.ConfigPath)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="Importer Host" Field="@(x => x.ImporterHostname)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="Import Disabled" Field="@(x => x.ImportDisabled)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="Action" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Clone(context)">Clone</button>
                    <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">Delete</button>
                </div>
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="Edit Management" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="managementName" class="col-sm-4 col-form-label col-form-label-sm">Name:</label>
                    <div class="col-sm-8">
                        <input id="managementName" type="text" class="form-control form-control-sm" @bind="actManagement.Name" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementComment" class="col-sm-4 col-form-label col-form-label-sm">Comment:</label>
                    <div class="col-sm-8">
                        <textarea id="managementComment" class="form-control form-control-sm" @bind="actManagement.Comment" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementDevType" class="col-sm-4 col-form-label col-form-label-sm">Device Type:</label>
                    <div class="col-sm-8">
                        <select id="managementDevType" class="form-control form-control-sm" @bind="actManagement.DeviceType.Id">
                            @foreach (DeviceType devType in deviceTypes)
                            {
                                <option value="@devType.Id">@(devType.NameVersion())</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementHostname" class="col-sm-4 col-form-label col-form-label-sm">Hostname:</label>
                    <div class="col-sm-8">
                        <input id="managementHostname" type="text" class="form-control form-control-sm" @bind="actManagement.Hostname" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementPort" class="col-sm-4 col-form-label col-form-label-sm">Port:</label>
                    <div class="col-sm-8">
                        <input id="managementPort" type="text" class="form-control form-control-sm" @bind="actManagement.Port" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementImportUser" class="col-sm-4 col-form-label col-form-label-sm">Import User:</label>
                    <div class="col-sm-8">
                        <input id="managementImportUser" type="text" class="form-control form-control-sm" @bind="actManagement.ImportUser" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementPrivateKey" class="col-sm-4 col-form-label col-form-label-sm">Private Key:</label>
                    <div class="col-sm-8">
                        <textarea id="managementPrivateKey" class="form-control form-control-sm" @bind="actManagement.PrivateKey" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementPublicKey" class="col-sm-4 col-form-label col-form-label-sm">Public Key:</label>
                    <div class="col-sm-8">
                        <textarea id="managementPublicKey" class="form-control form-control-sm" @bind="actManagement.PublicKey" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementConfigPath" class="col-sm-4 col-form-label col-form-label-sm">Config Path:</label>
                    <div class="col-sm-8">
                        <input id="managementConfigPath" type="text" class="form-control form-control-sm" @bind="actManagement.ConfigPath" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="managementImporterHostname" class="col-sm-4 col-form-label col-form-label-sm">Importer Hostname:</label>
                    <div class="col-sm-8">
                        <input id="managementImporterHostname" type="text" class="form-control form-control-sm" @bind="actManagement.ImporterHostname" />
                    </div>
                </div>

                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="managementImportDisabled" type="checkbox" @bind="actManagement.ImportDisabled">
                    <label class="form-check-label" for="managementImportDisabled"><small>Import Disabled</small></label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="managementForceInitImport" type="checkbox" @bind="actManagement.ForceInitialImport">
                    <label class="form-check-label" for="managementForceInitImport"><small>Force Initial Import</small></label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="managementHideInUi" type="checkbox" @bind="actManagement.HideInUi">
                    <label class="form-check-label" for="managementHideInUi"><small>Hide in UI</small></label>
                </div>

                @if (errorMessage != "")
                {
                    <label class="m-2">@errorMessage</label>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-primary" @onclick="Save">Save</button>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="Delete" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <p>@(deleteMessage)</p>

            @if (errorMessage != "")
            {
                <label class="m-2">@errorMessage</label>
            }
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (DeleteAllowed)
            {
                <button class="btn btn-sm btn-danger" @onclick="() => Delete(actManagement)">Delete</button>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

@code
{
    private List<Management> managements = new List<Management>();
    private List<DeviceType> deviceTypes = new List<DeviceType>();

    private ITable<Management> table;

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool DeleteAllowed = false;
    private bool AddMode = false;

    private Management newManagement;
    private Management actManagement;

    private string deleteMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        managements = (await Task.Run(() => apiConnection.SendQueryAsync<Management[]>(FWO.ApiClient.Queries.DeviceQueries.getManagementsDetails))).ToList();
        deviceTypes = (await Task.Run(() => apiConnection.SendQueryAsync<DeviceType[]>(FWO.ApiClient.Queries.DeviceQueries.getDeviceTypeDetails))).ToList();
    }

    private void Edit(Management management)
    {
        actManagement = new Management(management);
        EditMode = true;
    }

    private void RequestDelete(Management management)
    {
        actManagement = management;
        // Checks if delete possible. Todo: further checks?
        if (actManagement.Devices != null && actManagement.Devices.Length > 0)
        {
            deleteMessage = $"Deletion of management {actManagement.Name} not allowed as there are related Gateways. Delete them first if possible.";
            DeleteAllowed = false;
        }
        else
        {
            deleteMessage = $"Are you sure you want to delete management {actManagement.Name}?";
            DeleteAllowed = true;
        }
        DeleteMode = true;
    }

    private async Task Delete(Management management)
    {
        try
        {
            var Variables = new { id = management.Id };
            int delId = (await Task.Run(() => apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.DeviceQueries.deleteManagement, Variables))).DeletedId;
            if (delId == management.Id)
            {
                managements.Remove(management);
                DeleteMode = false;
            }
        }
        catch (Exception exception)
        {
            Log.WriteDebug("Delete Management", $"Exception occurred: {exception}");
            errorMessage = "Something went wrong with deleting: " + exception.Message;
        }
    }

    private void Add()
    {
        AddMode = true;
        newManagement = new Management() { DeviceType = new DeviceType { Id = deviceTypes.First().Id } };
        Edit(newManagement);
    }

    private void Clone(Management management)
    {
        AddMode = true;
        newManagement = new Management(management);
        Edit(newManagement);
    }

    private async Task Save()
    {
        try
        {
            // Todo: Value checks?
            if (AddMode)
            {
                // insert new management
                var Variables = new
                {
                    name = actManagement.Name,
                    devTypeId = actManagement.DeviceType.Id,
                    hostname = actManagement.Hostname,
                    importUser = actManagement.ImportUser,
                    importUserSecret = actManagement.PrivateKey,
                    port = actManagement.Port,
                    sshPublicKey = actManagement.PublicKey,
                    importDisabled = actManagement.ImportDisabled,
                    forceInitialImport = actManagement.ForceInitialImport,
                    hideInUi = actManagement.HideInUi,
                    configPath = actManagement.ConfigPath,
                    importerHostname = actManagement.ImporterHostname,
                    comment = actManagement.Comment /*,
                    tenantId = actManagement.TenantId */
                };
                actManagement.Id = (await Task.Run(() => apiConnection.SendQueryAsync<NewReturning>(FWO.ApiClient.Queries.DeviceQueries.newManagement, Variables))).ReturnIds[0].NewId;
                managements.Add(actManagement);
                AddMode = false;
                EditMode = false;
                errorMessage = "";
            }
            else
            {
                // Update existing management
                // Todo: handle TenantId
                var Variables = new
                {
                    id = actManagement.Id,
                    name = actManagement.Name,
                    devTypeId = actManagement.DeviceType.Id,
                    hostname = actManagement.Hostname,
                    importUser = actManagement.ImportUser,
                    importUserSecret = actManagement.PrivateKey,
                    port = actManagement.Port,
                    sshPublicKey = actManagement.PublicKey,
                    importDisabled = actManagement.ImportDisabled,
                    forceInitialImport = actManagement.ForceInitialImport,
                    hideInUi = actManagement.HideInUi,
                    configPath = actManagement.ConfigPath,
                    importerHostname = actManagement.ImporterHostname,
                    comment = actManagement.Comment /*,
                    tenantId = actManagement.TenantId */
                };
                int udId = (await Task.Run(() => apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.DeviceQueries.updateManagement, Variables))).UpdatedId;
                EditMode = (udId == actManagement.Id ? false : true);
                managements[managements.FindIndex(x => x.Id == actManagement.Id)] = actManagement;
                errorMessage = (EditMode ? "Something went wrong with saving changes" : "");
            }
            // update actManagement
            actManagement.DeviceType.Name = deviceTypes.Find(x => x.Id == actManagement.DeviceType.Id).Name;
            actManagement.DeviceType.Version = deviceTypes.Find(x => x.Id == actManagement.DeviceType.Id).Version;
        }
        catch (Exception exception)
        {
            // Todo: Error message? Ignore?
            Log.WriteDebug("Save Management", $"Exception occurred: {exception}");
            errorMessage = "Something went wrong with saving: " + exception.Message;
        }
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        errorMessage = "";
    }
}
