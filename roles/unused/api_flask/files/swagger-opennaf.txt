swagger: "2.0"
info:
  description: "Allows interaction with network configuration data"
  version: "1.0.0"
  title: "OpenNAF"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "tmp@cactus.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "10.5.10.20"
basePath: "/v1"
tags:
- name: "management"
  description: "data of network management system"
  externalDocs:
    description: "Find out more"
    url: "https://www.onaf.org/docs/management"
schemes:
- "https"
- "http"
paths:
  /management:
    post:
      tags:
      - "management"
      summary: "Add a new management to OpenNAF"
      description: ""
      operationId: "addManagement"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Management object to be added"
        required: true
        schema:
          $ref: "#/definitions/Management"
      responses:
        405:
          description: "Invalid input"
      security:
      - onaf_auth:
        - "write:management"
        - "read:management"
    put:
      tags:
      - "management"
      summary: "Update an existing management"
      description: ""
      operationId: "updateManagement"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Management to be changed"
        required: true
        schema:
          $ref: "#/definitions/Management"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - onaf_auth:
        - "write:management"
        - "read:management"
  /management/findByStatus:
    get:
      tags:
      - "management"
      summary: "Find management by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findManagementByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "active"
          - "gui_visible"
          - "import_active"
          default: "active"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Management"
        400:
          description: "Invalid status value"
      security:
      - onaf_auth:
        - "write:management"
        - "read:management"
  /management/findByTags:
    get:
      tags:
      - "management"
      summary: "Finds managements by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findManagementsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Management"
        400:
          description: "Invalid tag value"
      security:
      - onaf_auth:
        - "write:management"
        - "read:management"
      deprecated: true
  /management/{managementId}:
    get:
      tags:
      - "management"
      summary: "Find management by ID"
      description: "Returns a single management"
      operationId: "getManagementById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "managementId"
        in: "path"
        description: "ID of management to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Management"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Management not found"
      security:
      - api_key: []
    post:
      tags:
      - "management"
      summary: "Updates a management in OpenNAF"
      description: ""
      operationId: "updateManagementWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "managementId"
        in: "path"
        description: "ID of management to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the management"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the management"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - onaf_auth:
        - "write:management"
        - "read:management"
    delete:
      tags:
      - "management"
      summary: "Deletes a management"
      description: ""
      operationId: "deleteManagement"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "managementId"
        in: "path"
        description: "Management id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Management not found"
      security:
      - onaf_auth:
        - "write:management"
        - "read:management"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  onaf_auth:
    type: "oauth2"
    authorizationUrl: "http://10.5.10.20/oauth/dialog"
    flow: "implicit"
    scopes:
      write:management: "modify managements"
      read:management: "read managements"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Management:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "fw1"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "management status"
        enum:
        - "active"
        - "visible_in_gui"
        - "import_active"
    xml:
      name: "Management"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Cactus"
  url: "https://www.cactus.de"
