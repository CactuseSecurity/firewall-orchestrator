#!/usr/bin/python3
# source: https://github.com/Esri/webhooks-samples/tree/master/python/receiver/flask

# starting with: python3 {{ fworchtest_home }}/fworch-webhook-receiver.py
# in github settings webhook:
#   https://cactus.de:{{ webhook_port }}/fwo
#   content-type: application/json
#   trigger: just the push-event
#   Disable SSL verification
# todo: deal with timeout of long build process

from flask import Flask, request
from OpenSSL import SSL
from pathlib import Path
import os
import sys
import json
import subprocess
from datetime import datetime
import re
import hmac
import hashlib

root_dir = '{{ fworchtest_home }}/'
tmp_git_dir = root_dir + 'tmp_git'
github_hostname = "github.com"
project_path = '/CactuseSecurity/firewall-orchestrator.git'
# ssh_priv_key_file = root_dir + '.ssh/id_github_deploy'
webhook_log_file_basename = 'webhookPayloads.txt'
webhook_logfile = root_dir + webhook_log_file_basename
prox="http_proxy={{ http_proxy }}"

Path(webhook_logfile).touch()

#Step Two: Set parameters for server:
app = Flask(__name__)


@app.route('/fwo', methods=['GET'])
def get_handler():
   webpage = '<h1>fworch test server webhook listener</h1>\n'
   f = open(webhook_logfile,'r')
   str = f.read()
   f.close()
   webpage += '<pre>'+str+'</pre>'
   return webpage


@app.route('/fwo', methods=['POST'])
def post_handler():
   f = open(webhook_logfile,'a')

   # check for signature header of post request from github hook
   if not "X-Hub-Signature" in request.headers:
      f.write('bad github request: no github signature header present\n')
      abort(400)
   else:
      f.write('found github signature header\n')

   signature = request.headers['X-Hub-Signature']
   payload = request.data

   # verify signature of post request from github hook
   with open(os.path.expanduser('~/fworch-webhook.secret'), 'r') as secret_file:
      webhook_secret = secret_file.read().replace("\n", "")
      secret = webhook_secret.encode() # must be encoded to a byte array
      # contruct hmac generator with our secret as key, and SHA-1 as the hashing function
      hmac_gen = hmac.new(secret, payload, hashlib.sha1)
      # create the hex digest and append prefix to match the GitHub request format
      digest = "sha1=" + hmac_gen.hexdigest()
      if not hmac.compare_digest(digest, signature):
         f.write('bad github request: signature does not match\n')
         abort(400) # if the signatures don't match, bad request not from GitHub
      else:
         f.write('verfied signature succesfully\n')

      req_data = request.get_json()
      req_data_str = json.dumps(req_data)
      now = datetime.now() # current date and time
      f.write('--- webhook call received '+ now.strftime("%Y-%m-%d %H:%M:%S") +' ---\n')
      f.write('request: ' + req_data_str + '\n')
      if 'head_commit' in req_data:
         now = datetime.now() # current date and time
         if req_data['head_commit'] != None and 'modified' in req_data['head_commit']:
            modified_files = req_data['head_commit']['modified']
            f.write('found modified files: ' + json.dumps(modified_files) + '\n')
            relevant_change = False
            pattern = '^roles\/|^scripts\/|^inventory\/|^site.yml$'
            for modified_file in modified_files:
               if (re.match(pattern, modified_file)):
                  relevant_change = True
            pattern = '^scripts\/fworch-webhook-receiver.py$'
            webhook_script_changed = False
            for modified_file in modified_files:
               if (re.match(pattern, modified_file)):
                  webhook_script_changed = True
            if (relevant_change):
               f.write('Relevant change: start building\n')
               # prepare a clean path for git cloning
               os.system('rm -rf ' + tmp_git_dir)
               os.system('mkdir -p ' + tmp_git_dir)
               target_path  =  tmp_git_dir
               # clone_cmd = "cd " + tmp_git_dir + " && ssh-agent bash -c 'ssh-add " + ssh_priv_key_file + " && git clone -b {{ webhook_branch }} ssh://git@" + github_hostname + project_path + "'"
               clone_cmd = "cd " + tmp_git_dir + " && git clone -b {{ webhook_branch }} https://" + github_hostname + project_path
               f.write('executing ' + clone_cmd + '\n')
               os.system(clone_cmd) # Cloning
               if (webhook_script_changed):
                  os.system("cp " + tmp_git_dir + "/firewall-orchestrator/scripts/fworch-webhook-receiver.py " + root_dir)
                  # might not work due to user rights:
                  # os.system("systemctl restart fworch-webhook-receiver.service")
{% if webhook_install_mode == 'reinstall' %}
               uninstall_cmd = "cd " + tmp_git_dir + "/firewall-orchestrator && ansible-playbook site.yml -e \"installation_mode=uninstall " + prox + "\""
               f.write('executing uninstall command: ' + uninstall_cmd + '\n')
               os.system(uninstall_cmd) # remove fworch
               # fresh install: 
               build_cmd = "cd " + tmp_git_dir + "/firewall-orchestrator && ansible-playbook site.yml -e \"testkeys=yes installation_mode=new " + prox + "\""
{% else %}
               # upgrade 
               build_cmd = "cd " + tmp_git_dir + "/firewall-orchestrator && ansible-playbook site.yml -e \"testkeys=yes installation_mode=upgrade " + prox + "\""
{% endif %}
               f.write('executing build command: ' + build_cmd + '\n')
               os.system(build_cmd) # building fworch
               now = datetime.now() # current date and time
               f.write('--- build completed '+ now.strftime("%Y-%m-%d %H:%M:%S") +' ---\n')
            else:
               f.write('No relevant change found, not re-building.\n')
            return '{"success":"true"}'

   return '{"success":"false"}'
   f.close()

if __name__ == "__main__":
   context = ('ssl.cert', 'ssl.key') # certificate and key file. Cannot be self signed certs
   app.run(host='0.0.0.0', port={{ webhook_port }}, ssl_context='adhoc', threaded=True, debug=True)
