---
# this script will uninstall all fworch components from all hosts in the chosen inventory
# call with:
# sudo ansible-playbook/ scripts/uninstall-fworch.yml -K [-e "wipe_packages=yes"]
# parameters:
# wipe_packages=yes    removes all packages potentially installed during fworch installation
#                      NB: this might break other applications running on the same system
#
# caveat: run this script with "wipe_packages" switch only if you are on an fworch-exclusive system

- name: stop docker container
  command: docker stop fworch-api
  ignore_errors: true

- name: remove docker container
  command: docker rm fworch-api
  ignore_errors: true

- name: restart postgres to make sure no connections are blocking the database removal
  service:
    name: postgresql
    state: restarted
  when: ansible_facts['distribution']|lower == 'debian' or ansible_facts['distribution']|lower == 'ubuntu'
  ignore_errors: true

# - set_fact:
#     distribution_version: "debian/10"
#     when: ansible_facts['distribution']|lower == 'debian'

# - set_fact:
#     distribution_version: "ubuntu/20.04"
#     when: ansible_facts['distribution']|lower == 'ubuntu' and ansible_facts['distribution_version'] == '20.04'

# - set_fact:
#     distribution_version: "ubuntu/18.04"
#     when: ansible_facts['distribution']|lower == 'ubuntu' and ansible_facts['distribution_version'] == '18.04'

- name: find out installed postgres version
  script: "get_pg_version.sh"
  register: pg_version_result
  changed_when: false

- name: set fact pg_version
  set_fact:
      pg_version: "{{ pg_version_result.stdout }}"

- set_fact:
    postgresql_dev_package: "{{ postgresql_dev_package_prefix }}-{{ pg_version }}"

- block:
    - name: remove database pre pg_version 13
      postgresql_db:
        name: fworchdb
        state: absent
      become_user: postgres
      register: drop_db
      ignore_errors: true
  when: pg_version|int < 13

- block:
    - name: remove database for pg_version starting from 13
      command: psql -c 'drop database if exists fworchdb with ( force )'
      become_user: postgres
      register: drop_db
  when: pg_version|int >= 13

- name: check if db still exists
  postgresql_query:
    db: "{{ fworch_db_name }}"
    query: "select exists(SELECT datname FROM pg_catalog.pg_database WHERE lower(datname) = lower('fworchdb'))"
  become: yes
  become_user: postgres
  register: db_exists
  ignore_errors: true

- block:
  - name: fail when db still exists
    fail:
      msg: database could not be dropped {{ drop_db.msg }}. Try to stop all sessions connected to the database before running uninstall again.
    when: db_exists|bool

  - name: remove db groups
    postgresql_user:
      name: "{{ item }}"
      state: absent
    loop: "{{ database_groups }}"
    become_user: postgres

  - name: remove db users
    postgresql_user:
      name: "{{ item }}"
      state: absent
    loop: "{{ database_users }}"
    become_user: postgres

  ignore_errors: true

- name: stop and disable slapd
  service:
    name: slapd
    state: stopped
    enabled: no
  when: ansible_facts['distribution']|lower == 'debian' or ansible_facts['distribution']|lower == 'ubuntu'
  ignore_errors: true

- name: stop and disable fworch-ui
  service:
    name: fworch-ui
    state: stopped
    enabled: no
  ignore_errors: true

- name: stop and disable fworch-middleware
  service:
    name: fworch-middleware
    state: stopped
    enabled: no
  ignore_errors: true

- name: stop and disable hasura-docker-api
  service:
    name: hasura-docker-api
    state: stopped
    enabled: no
  ignore_errors: true

- block:
    - name: disable apache sites
      command: a2dissite fworch-ui
      ignore_errors: true

    - name: disable apache modules (due to a bug with php mod not properly getting purged)
      apache2_module: state=absent name={{ item }}
      loop:
        - php
        - proxy_http
        - rewrite
        - proxy_wstunnel
      ignore_errors: true

    - name: uninstall all packages for fworch, keeping git and ansible
      package:
        state: absent
        name: "{{ item }}"
        purge: yes
      loop:
        - rsyslog
        - apache2
        - gnupg2
        - apt-transport-https
        - software-properties-common
        - npm
        - python3-pip
        - python3-virtualenv
        - python3-psycopg2
        - libpq-dev
        - "{{ postgresql_package }}"
        - libpq-dev
        - postgresql-client
        - ldap-utils
        - libldap-common
        - libldap
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - dotnet-sdk-3.1
        - make
        - "{{ postgresql_dev_package }}"
        - "{{ postgresql_test_package }}"
        - apache2
        - libdbi-perl
        - libdbd-pg-perl
        - libdate-calc-perl
        - psmisc
        - libnet-cidr-perl
        - libsys-syslog-perl
        - libexpect-perl
        - libcgi-pm-perl
      when: wipe_packages is defined and wipe_packages|bool

    - name: uninstall openldap
      package:
        state: absent
        name: slapd
        purge: yes

    - name: remove fworch dirs and files
      file:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ fworch_home }}"
        - /etc/fworch
        - /etc/apache2/sites-available/fworch-ui.conf
        - /etc/apache2/sites-available/fworch-api.conf
        - /var/lib/ldap/fworch.internal
        - /var/lib/ldap/example.com
        - /var/lib/pgsql/data
        - "{{ api_hasura_cli_bin }}"

    - name: remove OS users and delete home directories
      user:
        name: "{{ item }}"
        force: yes
        remove: yes
        state: absent
      loop:
        - "{{ fworch_user }}"
        - "fworchsample"

    - name: remove OS group
      group:
        name: "{{ fworch_group }}"
        state: absent

    # ssh-keygen -f "/usr/local/fworch/.ssh/known_hosts" -R "localhost"
    - name: remove known host key
      known_hosts:
        name: "localhost"
        path: "{{ fworch_home }}/.ssh/known_hosts"
        state: absent

  become: yes
