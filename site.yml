---
# installation options: see docs at https://github.com/CactuseSecurity/firewall-orchestrator/blob/master/documentation/installer/install-advanced.md

- hosts: importers
  tasks:
    - name: stop importer service before making any changes
      systemd:
        name: "{{ product_name }}-importer"
        state: stopped
      become: yes
      when: "not installation_mode == 'new'"
      ignore_errors: yes
  tags:
    - frontend
    - importer

- hosts: all
  tasks:
    - name: uninstall product
      import_tasks: scripts/uninstall-fworch.yml
      when: "installation_mode == 'uninstall'"
      become: yes
  tags:
    - backend
    - frontend

- hosts: all
  roles:
    - { role: common, when: "not installation_mode == 'uninstall'" }

  tags:
    - backend

- hosts: backendserver
  roles:
    - { role: database, when: "not installation_mode == 'uninstall'" }
  tags:
    - backend

- hosts: middlewareserver
  roles:
    - { role: openldap-server, when: "not installation_mode == 'uninstall'" }
    - { role: lib, when: "not installation_mode == 'uninstall'" }
    - { role: middleware, when: "not installation_mode == 'uninstall'" }
  tags:
    - backend
    - csharp

- hosts: apiserver
  roles:
    - { role: docker, when: "not installation_mode == 'uninstall'" }
    - { role: api, when: "not installation_mode == 'uninstall'" }
  tags:
    - backend

# restart middlewareserver now that the API is ready.
- hosts: middlewareserver
  tasks:
    - name: restart middleware service
      systemd:
        name: "{{ middleware_service_name }}"
        state: restarted
        daemon_reload: yes
      become: yes
      when: "not installation_mode == 'uninstall'"
  tags:
    - backend
    - csharp

- hosts: frontends
  roles:
    # do not install lib role twice (for non distributed install, already installed for middlewareserver)
    - { role: lib, when: "'middlewareserver' not in group_names and not installation_mode == 'uninstall'"}
    - { role: ui, when: "not installation_mode == 'uninstall'"}
  tags:
    - frontend
    - csharp

- hosts: importers
  roles:
    - { role: importer, when: "not installation_mode == 'uninstall'" }
  tags:
    - frontend
    - importer

- hosts: sampleserver
  roles:
    - { role: sample-data, when: "not without_sample_data|bool and not installation_mode == 'uninstall'" }
    - { role: sample-data-connect-sting, when: "connect_sting is defined and not installation_mode == 'uninstall'" }
  tags:
    - samples
    - backend
    - importer

- hosts: middlewareserver
  roles:
    - { role: sample-auth-data, when: "not without_sample_data|bool and not installation_mode == 'uninstall'" }
  tags:
    - samples
    - backend
  # todo: add a meta dependency on role sample-data

- hosts: importers
  tasks:
    - name: restart importer service to make sure it works correctly with sample data
      ansible.builtin.systemd:
        name: "{{ product_name }}-importer"
        state: restarted
      become: yes
      when: "not installation_mode == 'uninstall'"
  tags:
    - frontend
    - importer

- hosts: all
  roles:
    - { role: upgrade-completion, when: "installation_mode == 'upgrade'" }
  tags:
    - backend
    - frontend
    - importer

- hosts: frontends
  tasks:
    - name: restart ui service to display new version
      service: 
        name: "{{ ui_service_name }}"
        state: restarted
      become: yes
      when: "not installation_mode == 'uninstall'"
  tags:
    - frontend

- hosts: testservers
  roles:
    - { role: webhook, when: install_webhook|bool and not installation_mode == 'uninstall' }
  tags:
    - test
    
- hosts: all
  roles:
    - { role: test, when: "not installation_mode == 'uninstall'" }
  tags:
    - test

- hosts: all
  tasks:
    - name: show listener status
      import_tasks: scripts/show-fworch-listeners.yml
      become: yes
  tags:
    - backend
    - frontend

- hosts: backendserver
  tasks:
    - name: display secrets for this installation
      debug:
        msg:
          - "Your initial UI admin password is '{{ admin_password }}'"
          - "Your api hasura admin secret is '{{ api_hasura_admin_secret }}'"
      when: admin_password is defined and api_hasura_admin_secret is defined
 
